// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package rest

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DefaultControllerDefaultInfo request
	DefaultControllerDefaultInfo(ctx context.Context, params *DefaultControllerDefaultInfoParams) (*http.Response, error)

	// ActiveResponseControllerRunCommand request  with any body
	ActiveResponseControllerRunCommandWithBody(ctx context.Context, params *ActiveResponseControllerRunCommandParams, contentType string, body io.Reader) (*http.Response, error)

	ActiveResponseControllerRunCommand(ctx context.Context, params *ActiveResponseControllerRunCommandParams, body ActiveResponseControllerRunCommandJSONRequestBody) (*http.Response, error)

	// AgentsControllerDeleteAgents request
	AgentsControllerDeleteAgents(ctx context.Context, params *AgentsControllerDeleteAgentsParams) (*http.Response, error)

	// AgentsControllerGetAgents request
	AgentsControllerGetAgents(ctx context.Context, params *AgentsControllerGetAgentsParams) (*http.Response, error)

	// AgentsControllerAddAgent request  with any body
	AgentsControllerAddAgentWithBody(ctx context.Context, params *AgentsControllerAddAgentParams, contentType string, body io.Reader) (*http.Response, error)

	AgentsControllerAddAgent(ctx context.Context, params *AgentsControllerAddAgentParams, body AgentsControllerAddAgentJSONRequestBody) (*http.Response, error)

	// AgentsControllerDeleteMultipleAgentSingleGroup request
	AgentsControllerDeleteMultipleAgentSingleGroup(ctx context.Context, params *AgentsControllerDeleteMultipleAgentSingleGroupParams) (*http.Response, error)

	// AgentsControllerPutMultipleAgentSingleGroup request
	AgentsControllerPutMultipleAgentSingleGroup(ctx context.Context, params *AgentsControllerPutMultipleAgentSingleGroupParams) (*http.Response, error)

	// AgentsControllerRestartAgentsByGroup request
	AgentsControllerRestartAgentsByGroup(ctx context.Context, groupId GroupId, params *AgentsControllerRestartAgentsByGroupParams) (*http.Response, error)

	// AgentsControllerInsertAgent request  with any body
	AgentsControllerInsertAgentWithBody(ctx context.Context, params *AgentsControllerInsertAgentParams, contentType string, body io.Reader) (*http.Response, error)

	AgentsControllerInsertAgent(ctx context.Context, params *AgentsControllerInsertAgentParams, body AgentsControllerInsertAgentJSONRequestBody) (*http.Response, error)

	// AgentsControllerPostNewAgent request
	AgentsControllerPostNewAgent(ctx context.Context, params *AgentsControllerPostNewAgentParams) (*http.Response, error)

	// AgentsControllerGetAgentNoGroup request
	AgentsControllerGetAgentNoGroup(ctx context.Context, params *AgentsControllerGetAgentNoGroupParams) (*http.Response, error)

	// AgentsControllerRestartAgentsByNode request
	AgentsControllerRestartAgentsByNode(ctx context.Context, nodeId NodeId, params *AgentsControllerRestartAgentsByNodeParams) (*http.Response, error)

	// AgentsControllerGetAgentOutdated request
	AgentsControllerGetAgentOutdated(ctx context.Context, params *AgentsControllerGetAgentOutdatedParams) (*http.Response, error)

	// AgentsControllerRestartAgents request
	AgentsControllerRestartAgents(ctx context.Context, params *AgentsControllerRestartAgentsParams) (*http.Response, error)

	// AgentsControllerGetAgentFields request
	AgentsControllerGetAgentFields(ctx context.Context, params *AgentsControllerGetAgentFieldsParams) (*http.Response, error)

	// AgentsControllerGetAgentSummaryOs request
	AgentsControllerGetAgentSummaryOs(ctx context.Context, params *AgentsControllerGetAgentSummaryOsParams) (*http.Response, error)

	// AgentsControllerGetAgentSummaryStatus request
	AgentsControllerGetAgentSummaryStatus(ctx context.Context, params *AgentsControllerGetAgentSummaryStatusParams) (*http.Response, error)

	// AgentsControllerGetAgentConfig request
	AgentsControllerGetAgentConfig(ctx context.Context, agentId AgentId, component Component, configuration Configuration, params *AgentsControllerGetAgentConfigParams) (*http.Response, error)

	// AgentsControllerDeleteSingleAgentMultipleGroups request
	AgentsControllerDeleteSingleAgentMultipleGroups(ctx context.Context, agentId AgentId, params *AgentsControllerDeleteSingleAgentMultipleGroupsParams) (*http.Response, error)

	// AgentsControllerGetSyncAgent request
	AgentsControllerGetSyncAgent(ctx context.Context, agentId AgentId, params *AgentsControllerGetSyncAgentParams) (*http.Response, error)

	// AgentsControllerDeleteSingleAgentSingleGroup request
	AgentsControllerDeleteSingleAgentSingleGroup(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentsControllerDeleteSingleAgentSingleGroupParams) (*http.Response, error)

	// AgentsControllerPutAgentSingleGroup request
	AgentsControllerPutAgentSingleGroup(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentsControllerPutAgentSingleGroupParams) (*http.Response, error)

	// AgentsControllerGetAgentKey request
	AgentsControllerGetAgentKey(ctx context.Context, agentId AgentId, params *AgentsControllerGetAgentKeyParams) (*http.Response, error)

	// AgentsControllerRestartAgent request
	AgentsControllerRestartAgent(ctx context.Context, agentId AgentId, params *AgentsControllerRestartAgentParams) (*http.Response, error)

	// AgentsControllerPutUpgradeAgent request
	AgentsControllerPutUpgradeAgent(ctx context.Context, agentId AgentId, params *AgentsControllerPutUpgradeAgentParams) (*http.Response, error)

	// AgentsControllerPutUpgradeCustomAgent request
	AgentsControllerPutUpgradeCustomAgent(ctx context.Context, agentId AgentId, params *AgentsControllerPutUpgradeCustomAgentParams) (*http.Response, error)

	// AgentsControllerGetAgentUpgrade request
	AgentsControllerGetAgentUpgrade(ctx context.Context, agentId AgentId, params *AgentsControllerGetAgentUpgradeParams) (*http.Response, error)

	// CiscatControllerGetAgentsCiscatResults request
	CiscatControllerGetAgentsCiscatResults(ctx context.Context, agentId AgentId, params *CiscatControllerGetAgentsCiscatResultsParams) (*http.Response, error)

	// ClusterControllerGetApiConfig request
	ClusterControllerGetApiConfig(ctx context.Context, params *ClusterControllerGetApiConfigParams) (*http.Response, error)

	// ClusterControllerGetConfValidation request
	ClusterControllerGetConfValidation(ctx context.Context, params *ClusterControllerGetConfValidationParams) (*http.Response, error)

	// ClusterControllerGetHealthcheck request
	ClusterControllerGetHealthcheck(ctx context.Context, params *ClusterControllerGetHealthcheckParams) (*http.Response, error)

	// ClusterControllerGetConfig request
	ClusterControllerGetConfig(ctx context.Context, params *ClusterControllerGetConfigParams) (*http.Response, error)

	// ClusterControllerGetClusterNode request
	ClusterControllerGetClusterNode(ctx context.Context, params *ClusterControllerGetClusterNodeParams) (*http.Response, error)

	// ClusterControllerGetClusterNodes request
	ClusterControllerGetClusterNodes(ctx context.Context, params *ClusterControllerGetClusterNodesParams) (*http.Response, error)

	// ClusterControllerPutRestart request
	ClusterControllerPutRestart(ctx context.Context, params *ClusterControllerPutRestartParams) (*http.Response, error)

	// ClusterControllerGetStatus request
	ClusterControllerGetStatus(ctx context.Context, params *ClusterControllerGetStatusParams) (*http.Response, error)

	// ClusterControllerGetConfigurationNode request
	ClusterControllerGetConfigurationNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetConfigurationNodeParams) (*http.Response, error)

	// ClusterControllerGetNodeConfig request
	ClusterControllerGetNodeConfig(ctx context.Context, nodeId NodeId, component Component, configuration Configuration, params *ClusterControllerGetNodeConfigParams) (*http.Response, error)

	// ClusterControllerDeleteFilesNode request
	ClusterControllerDeleteFilesNode(ctx context.Context, nodeId NodeId, params *ClusterControllerDeleteFilesNodeParams) (*http.Response, error)

	// ClusterControllerGetFilesNode request
	ClusterControllerGetFilesNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetFilesNodeParams) (*http.Response, error)

	// ClusterControllerPutFilesNode request  with any body
	ClusterControllerPutFilesNodeWithBody(ctx context.Context, nodeId NodeId, params *ClusterControllerPutFilesNodeParams, contentType string, body io.Reader) (*http.Response, error)

	// ClusterControllerGetInfoNode request
	ClusterControllerGetInfoNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetInfoNodeParams) (*http.Response, error)

	// ClusterControllerGetLogNode request
	ClusterControllerGetLogNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogNodeParams) (*http.Response, error)

	// ClusterControllerGetLogSummaryNode request
	ClusterControllerGetLogSummaryNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogSummaryNodeParams) (*http.Response, error)

	// ClusterControllerGetStatsNode request
	ClusterControllerGetStatsNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsNodeParams) (*http.Response, error)

	// ClusterControllerGetStatsAnalysisdNode request
	ClusterControllerGetStatsAnalysisdNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsAnalysisdNodeParams) (*http.Response, error)

	// ClusterControllerGetStatsHourlyNode request
	ClusterControllerGetStatsHourlyNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsHourlyNodeParams) (*http.Response, error)

	// ClusterControllerGetStatsRemotedNode request
	ClusterControllerGetStatsRemotedNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsRemotedNodeParams) (*http.Response, error)

	// ClusterControllerGetStatsWeeklyNode request
	ClusterControllerGetStatsWeeklyNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsWeeklyNodeParams) (*http.Response, error)

	// ClusterControllerGetStatusNode request
	ClusterControllerGetStatusNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatusNodeParams) (*http.Response, error)

	// DecodersControllerGetDecoders request
	DecodersControllerGetDecoders(ctx context.Context, params *DecodersControllerGetDecodersParams) (*http.Response, error)

	// DecodersControllerGetDecodersFiles request
	DecodersControllerGetDecodersFiles(ctx context.Context, params *DecodersControllerGetDecodersFilesParams) (*http.Response, error)

	// DecodersControllerGetDownloadFile request
	DecodersControllerGetDownloadFile(ctx context.Context, filename DownloadFile, params *DecodersControllerGetDownloadFileParams) (*http.Response, error)

	// DecodersControllerGetDecodersParents request
	DecodersControllerGetDecodersParents(ctx context.Context, params *DecodersControllerGetDecodersParentsParams) (*http.Response, error)

	// ExperimentalControllerGetCisCatResults request
	ExperimentalControllerGetCisCatResults(ctx context.Context, params *ExperimentalControllerGetCisCatResultsParams) (*http.Response, error)

	// ExperimentalControllerClearSyscheckDatabase request
	ExperimentalControllerClearSyscheckDatabase(ctx context.Context, params *ExperimentalControllerClearSyscheckDatabaseParams) (*http.Response, error)

	// ExperimentalControllerGetHardwareInfo request
	ExperimentalControllerGetHardwareInfo(ctx context.Context, params *ExperimentalControllerGetHardwareInfoParams) (*http.Response, error)

	// ExperimentalControllerGetHotfixesInfo request
	ExperimentalControllerGetHotfixesInfo(ctx context.Context, params *ExperimentalControllerGetHotfixesInfoParams) (*http.Response, error)

	// ExperimentalControllerGetNetworkAddressInfo request
	ExperimentalControllerGetNetworkAddressInfo(ctx context.Context, params *ExperimentalControllerGetNetworkAddressInfoParams) (*http.Response, error)

	// ExperimentalControllerGetNetworkInterfaceInfo request
	ExperimentalControllerGetNetworkInterfaceInfo(ctx context.Context, params *ExperimentalControllerGetNetworkInterfaceInfoParams) (*http.Response, error)

	// ExperimentalControllerGetNetworkProtocolInfo request
	ExperimentalControllerGetNetworkProtocolInfo(ctx context.Context, params *ExperimentalControllerGetNetworkProtocolInfoParams) (*http.Response, error)

	// ExperimentalControllerGetOsInfo request
	ExperimentalControllerGetOsInfo(ctx context.Context, params *ExperimentalControllerGetOsInfoParams) (*http.Response, error)

	// ExperimentalControllerGetPackagesInfo request
	ExperimentalControllerGetPackagesInfo(ctx context.Context, params *ExperimentalControllerGetPackagesInfoParams) (*http.Response, error)

	// ExperimentalControllerGetPortsInfo request
	ExperimentalControllerGetPortsInfo(ctx context.Context, params *ExperimentalControllerGetPortsInfoParams) (*http.Response, error)

	// ExperimentalControllerGetProcessesInfo request
	ExperimentalControllerGetProcessesInfo(ctx context.Context, params *ExperimentalControllerGetProcessesInfoParams) (*http.Response, error)

	// AgentsControllerDeleteGroups request
	AgentsControllerDeleteGroups(ctx context.Context, params *AgentsControllerDeleteGroupsParams) (*http.Response, error)

	// AgentsControllerGetListGroup request
	AgentsControllerGetListGroup(ctx context.Context, params *AgentsControllerGetListGroupParams) (*http.Response, error)

	// AgentsControllerPostGroup request
	AgentsControllerPostGroup(ctx context.Context, params *AgentsControllerPostGroupParams) (*http.Response, error)

	// AgentsControllerGetAgentsInGroup request
	AgentsControllerGetAgentsInGroup(ctx context.Context, groupId GroupId, params *AgentsControllerGetAgentsInGroupParams) (*http.Response, error)

	// AgentsControllerGetGroupConfig request
	AgentsControllerGetGroupConfig(ctx context.Context, groupId GroupId, params *AgentsControllerGetGroupConfigParams) (*http.Response, error)

	// AgentsControllerPutGroupConfig request  with any body
	AgentsControllerPutGroupConfigWithBody(ctx context.Context, groupId GroupId, params *AgentsControllerPutGroupConfigParams, contentType string, body io.Reader) (*http.Response, error)

	// AgentsControllerGetGroupFiles request
	AgentsControllerGetGroupFiles(ctx context.Context, groupId GroupId, params *AgentsControllerGetGroupFilesParams) (*http.Response, error)

	// AgentsControllerGetGroupFileJson request
	AgentsControllerGetGroupFileJson(ctx context.Context, groupId GroupId, fileName FileName, params *AgentsControllerGetGroupFileJsonParams) (*http.Response, error)

	// AgentsControllerGetGroupFileXml request
	AgentsControllerGetGroupFileXml(ctx context.Context, groupId GroupId, fileName FileName, params *AgentsControllerGetGroupFileXmlParams) (*http.Response, error)

	// ListsControllerGetLists request
	ListsControllerGetLists(ctx context.Context, params *ListsControllerGetListsParams) (*http.Response, error)

	// ListsControllerGetListsFiles request
	ListsControllerGetListsFiles(ctx context.Context, params *ListsControllerGetListsFilesParams) (*http.Response, error)

	// ManagerControllerGetApiConfig request
	ManagerControllerGetApiConfig(ctx context.Context, params *ManagerControllerGetApiConfigParams) (*http.Response, error)

	// ManagerControllerGetConfiguration request
	ManagerControllerGetConfiguration(ctx context.Context, params *ManagerControllerGetConfigurationParams) (*http.Response, error)

	// ManagerControllerGetConfValidation request
	ManagerControllerGetConfValidation(ctx context.Context, params *ManagerControllerGetConfValidationParams) (*http.Response, error)

	// ManagerControllerGetManagerConfigOndemand request
	ManagerControllerGetManagerConfigOndemand(ctx context.Context, component Component, configuration Configuration, params *ManagerControllerGetManagerConfigOndemandParams) (*http.Response, error)

	// ManagerControllerDeleteFiles request
	ManagerControllerDeleteFiles(ctx context.Context, params *ManagerControllerDeleteFilesParams) (*http.Response, error)

	// ManagerControllerGetFiles request
	ManagerControllerGetFiles(ctx context.Context, params *ManagerControllerGetFilesParams) (*http.Response, error)

	// ManagerControllerPutFiles request  with any body
	ManagerControllerPutFilesWithBody(ctx context.Context, params *ManagerControllerPutFilesParams, contentType string, body io.Reader) (*http.Response, error)

	// ManagerControllerGetInfo request
	ManagerControllerGetInfo(ctx context.Context, params *ManagerControllerGetInfoParams) (*http.Response, error)

	// ManagerControllerGetLog request
	ManagerControllerGetLog(ctx context.Context, params *ManagerControllerGetLogParams) (*http.Response, error)

	// ManagerControllerGetLogSummary request
	ManagerControllerGetLogSummary(ctx context.Context, params *ManagerControllerGetLogSummaryParams) (*http.Response, error)

	// ManagerControllerPutRestart request
	ManagerControllerPutRestart(ctx context.Context, params *ManagerControllerPutRestartParams) (*http.Response, error)

	// ManagerControllerGetStats request
	ManagerControllerGetStats(ctx context.Context, params *ManagerControllerGetStatsParams) (*http.Response, error)

	// ManagerControllerGetStatsAnalysisd request
	ManagerControllerGetStatsAnalysisd(ctx context.Context, params *ManagerControllerGetStatsAnalysisdParams) (*http.Response, error)

	// ManagerControllerGetStatsHourly request
	ManagerControllerGetStatsHourly(ctx context.Context, params *ManagerControllerGetStatsHourlyParams) (*http.Response, error)

	// ManagerControllerGetStatsRemoted request
	ManagerControllerGetStatsRemoted(ctx context.Context, params *ManagerControllerGetStatsRemotedParams) (*http.Response, error)

	// ManagerControllerGetStatsWeekly request
	ManagerControllerGetStatsWeekly(ctx context.Context, params *ManagerControllerGetStatsWeeklyParams) (*http.Response, error)

	// ManagerControllerGetStatus request
	ManagerControllerGetStatus(ctx context.Context, params *ManagerControllerGetStatusParams) (*http.Response, error)

	// MitreControllerGetAttack request
	MitreControllerGetAttack(ctx context.Context, params *MitreControllerGetAttackParams) (*http.Response, error)

	// OverviewControllerGetOverviewAgents request
	OverviewControllerGetOverviewAgents(ctx context.Context, params *OverviewControllerGetOverviewAgentsParams) (*http.Response, error)

	// RulesControllerGetRules request
	RulesControllerGetRules(ctx context.Context, params *RulesControllerGetRulesParams) (*http.Response, error)

	// RulesControllerGetRulesFiles request
	RulesControllerGetRulesFiles(ctx context.Context, params *RulesControllerGetRulesFilesParams) (*http.Response, error)

	// RulesControllerGetDownloadFile request
	RulesControllerGetDownloadFile(ctx context.Context, filename DownloadFile, params *RulesControllerGetDownloadFileParams) (*http.Response, error)

	// RulesControllerGetRulesGroups request
	RulesControllerGetRulesGroups(ctx context.Context, params *RulesControllerGetRulesGroupsParams) (*http.Response, error)

	// RulesControllerGetRulesRequirement request
	RulesControllerGetRulesRequirement(ctx context.Context, requirement RuleRequirement, params *RulesControllerGetRulesRequirementParams) (*http.Response, error)

	// ScaControllerGetScaAgent request
	ScaControllerGetScaAgent(ctx context.Context, agentId AgentId, params *ScaControllerGetScaAgentParams) (*http.Response, error)

	// ScaControllerGetScaChecks request
	ScaControllerGetScaChecks(ctx context.Context, agentId AgentId, policyId PolicyId, params *ScaControllerGetScaChecksParams) (*http.Response, error)

	// SecurityControllerGetRbacActions request
	SecurityControllerGetRbacActions(ctx context.Context, params *SecurityControllerGetRbacActionsParams) (*http.Response, error)

	// SecurityControllerDeleteSecurityConfig request
	SecurityControllerDeleteSecurityConfig(ctx context.Context, params *SecurityControllerDeleteSecurityConfigParams) (*http.Response, error)

	// SecurityControllerGetSecurityConfig request
	SecurityControllerGetSecurityConfig(ctx context.Context, params *SecurityControllerGetSecurityConfigParams) (*http.Response, error)

	// SecurityControllerPutSecurityConfig request  with any body
	SecurityControllerPutSecurityConfigWithBody(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, contentType string, body io.Reader) (*http.Response, error)

	SecurityControllerPutSecurityConfig(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, body SecurityControllerPutSecurityConfigJSONRequestBody) (*http.Response, error)

	// SecurityControllerRemovePolicies request
	SecurityControllerRemovePolicies(ctx context.Context, params *SecurityControllerRemovePoliciesParams) (*http.Response, error)

	// SecurityControllerGetPolicies request
	SecurityControllerGetPolicies(ctx context.Context, params *SecurityControllerGetPoliciesParams) (*http.Response, error)

	// SecurityControllerAddPolicy request  with any body
	SecurityControllerAddPolicyWithBody(ctx context.Context, params *SecurityControllerAddPolicyParams, contentType string, body io.Reader) (*http.Response, error)

	SecurityControllerAddPolicy(ctx context.Context, params *SecurityControllerAddPolicyParams, body SecurityControllerAddPolicyJSONRequestBody) (*http.Response, error)

	// SecurityControllerUpdatePolicy request  with any body
	SecurityControllerUpdatePolicyWithBody(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, contentType string, body io.Reader) (*http.Response, error)

	SecurityControllerUpdatePolicy(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, body SecurityControllerUpdatePolicyJSONRequestBody) (*http.Response, error)

	// SecurityControllerGetRbacResources request
	SecurityControllerGetRbacResources(ctx context.Context, params *SecurityControllerGetRbacResourcesParams) (*http.Response, error)

	// SecurityControllerRemoveRoles request
	SecurityControllerRemoveRoles(ctx context.Context, params *SecurityControllerRemoveRolesParams) (*http.Response, error)

	// SecurityControllerGetRoles request
	SecurityControllerGetRoles(ctx context.Context, params *SecurityControllerGetRolesParams) (*http.Response, error)

	// SecurityControllerAddRole request  with any body
	SecurityControllerAddRoleWithBody(ctx context.Context, params *SecurityControllerAddRoleParams, contentType string, body io.Reader) (*http.Response, error)

	SecurityControllerAddRole(ctx context.Context, params *SecurityControllerAddRoleParams, body SecurityControllerAddRoleJSONRequestBody) (*http.Response, error)

	// SecurityControllerUpdateRole request  with any body
	SecurityControllerUpdateRoleWithBody(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, contentType string, body io.Reader) (*http.Response, error)

	SecurityControllerUpdateRole(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, body SecurityControllerUpdateRoleJSONRequestBody) (*http.Response, error)

	// SecurityControllerRemoveRolePolicy request
	SecurityControllerRemoveRolePolicy(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRolePolicyParams) (*http.Response, error)

	// SecurityControllerSetRolePolicy request
	SecurityControllerSetRolePolicy(ctx context.Context, roleId RoleId, params *SecurityControllerSetRolePolicyParams) (*http.Response, error)

	// SecurityControllerRemoveRoleRule request
	SecurityControllerRemoveRoleRule(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRoleRuleParams) (*http.Response, error)

	// SecurityControllerSetRoleRule request
	SecurityControllerSetRoleRule(ctx context.Context, roleId RoleId, params *SecurityControllerSetRoleRuleParams) (*http.Response, error)

	// SecurityControllerRemoveRules request
	SecurityControllerRemoveRules(ctx context.Context, params *SecurityControllerRemoveRulesParams) (*http.Response, error)

	// SecurityControllerGetRules request
	SecurityControllerGetRules(ctx context.Context, params *SecurityControllerGetRulesParams) (*http.Response, error)

	// SecurityControllerAddRule request  with any body
	SecurityControllerAddRuleWithBody(ctx context.Context, params *SecurityControllerAddRuleParams, contentType string, body io.Reader) (*http.Response, error)

	SecurityControllerAddRule(ctx context.Context, params *SecurityControllerAddRuleParams, body SecurityControllerAddRuleJSONRequestBody) (*http.Response, error)

	// SecurityControllerUpdateRule request  with any body
	SecurityControllerUpdateRuleWithBody(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, contentType string, body io.Reader) (*http.Response, error)

	SecurityControllerUpdateRule(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, body SecurityControllerUpdateRuleJSONRequestBody) (*http.Response, error)

	// SecurityControllerLogoutUser request
	SecurityControllerLogoutUser(ctx context.Context) (*http.Response, error)

	// SecurityControllerLoginUser request
	SecurityControllerLoginUser(ctx context.Context, params *SecurityControllerLoginUserParams) (*http.Response, error)

	// SecurityControllerLoginUserRunAs request  with any body
	SecurityControllerLoginUserRunAsWithBody(ctx context.Context, params *SecurityControllerLoginUserParams, contentType string, body io.Reader) (*http.Response, error)

	SecurityControllerLoginUserRunAs(ctx context.Context, params *SecurityControllerLoginUserParams, body SecurityControllerLoginUserJSONRequestBody) (*http.Response, error)

	// SecurityControllerRevokeAllTokens request
	SecurityControllerRevokeAllTokens(ctx context.Context) (*http.Response, error)

	// SecurityControllerDeleteUsers request
	SecurityControllerDeleteUsers(ctx context.Context, params *SecurityControllerDeleteUsersParams) (*http.Response, error)

	// SecurityControllerGetUsers request
	SecurityControllerGetUsers(ctx context.Context, params *SecurityControllerGetUsersParams) (*http.Response, error)

	// SecurityControllerCreateUser request  with any body
	SecurityControllerCreateUserWithBody(ctx context.Context, params *SecurityControllerCreateUserParams, contentType string, body io.Reader) (*http.Response, error)

	SecurityControllerCreateUser(ctx context.Context, params *SecurityControllerCreateUserParams, body SecurityControllerCreateUserJSONRequestBody) (*http.Response, error)

	// SecurityControllerGetUserMe request
	SecurityControllerGetUserMe(ctx context.Context, params *SecurityControllerGetUserMeParams) (*http.Response, error)

	// SecurityControllerGetUserMePolicies request
	SecurityControllerGetUserMePolicies(ctx context.Context, params *SecurityControllerGetUserMePoliciesParams) (*http.Response, error)

	// SecurityControllerUpdateUser request  with any body
	SecurityControllerUpdateUserWithBody(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, contentType string, body io.Reader) (*http.Response, error)

	SecurityControllerUpdateUser(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, body SecurityControllerUpdateUserJSONRequestBody) (*http.Response, error)

	// SecurityControllerRemoveUserRole request
	SecurityControllerRemoveUserRole(ctx context.Context, userId UserIdRequired, params *SecurityControllerRemoveUserRoleParams) (*http.Response, error)

	// SecurityControllerSetUserRole request
	SecurityControllerSetUserRole(ctx context.Context, userId UserIdRequired, params *SecurityControllerSetUserRoleParams) (*http.Response, error)

	// SyscheckControllerPutSyscheck request
	SyscheckControllerPutSyscheck(ctx context.Context, params *SyscheckControllerPutSyscheckParams) (*http.Response, error)

	// SyscheckControllerDeleteSyscheckAgent request
	SyscheckControllerDeleteSyscheckAgent(ctx context.Context, agentId AgentId, params *SyscheckControllerDeleteSyscheckAgentParams) (*http.Response, error)

	// SyscheckControllerGetSyscheckAgent request
	SyscheckControllerGetSyscheckAgent(ctx context.Context, agentId AgentId, params *SyscheckControllerGetSyscheckAgentParams) (*http.Response, error)

	// SyscheckControllerGetLastScanAgent request
	SyscheckControllerGetLastScanAgent(ctx context.Context, agentId AgentId, params *SyscheckControllerGetLastScanAgentParams) (*http.Response, error)

	// SyscollectorControllerGetHardwareInfo request
	SyscollectorControllerGetHardwareInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHardwareInfoParams) (*http.Response, error)

	// SyscollectorControllerGetHotfixInfo request
	SyscollectorControllerGetHotfixInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHotfixInfoParams) (*http.Response, error)

	// SyscollectorControllerGetNetworkAddressInfo request
	SyscollectorControllerGetNetworkAddressInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkAddressInfoParams) (*http.Response, error)

	// SyscollectorControllerGetNetworkInterfaceInfo request
	SyscollectorControllerGetNetworkInterfaceInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkInterfaceInfoParams) (*http.Response, error)

	// SyscollectorControllerGetNetworkProtocolInfo request
	SyscollectorControllerGetNetworkProtocolInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkProtocolInfoParams) (*http.Response, error)

	// SyscollectorControllerGetOsInfo request
	SyscollectorControllerGetOsInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetOsInfoParams) (*http.Response, error)

	// SyscollectorControllerGetPackagesInfo request
	SyscollectorControllerGetPackagesInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPackagesInfoParams) (*http.Response, error)

	// SyscollectorControllerGetPortsInfo request
	SyscollectorControllerGetPortsInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPortsInfoParams) (*http.Response, error)

	// SyscollectorControllerGetProcessesInfo request
	SyscollectorControllerGetProcessesInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetProcessesInfoParams) (*http.Response, error)
}

func (c *Client) DefaultControllerDefaultInfo(ctx context.Context, params *DefaultControllerDefaultInfoParams) (*http.Response, error) {
	req, err := NewDefaultControllerDefaultInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ActiveResponseControllerRunCommandWithBody(ctx context.Context, params *ActiveResponseControllerRunCommandParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewActiveResponseControllerRunCommandRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ActiveResponseControllerRunCommand(ctx context.Context, params *ActiveResponseControllerRunCommandParams, body ActiveResponseControllerRunCommandJSONRequestBody) (*http.Response, error) {
	req, err := NewActiveResponseControllerRunCommandRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerDeleteAgents(ctx context.Context, params *AgentsControllerDeleteAgentsParams) (*http.Response, error) {
	req, err := NewAgentsControllerDeleteAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetAgents(ctx context.Context, params *AgentsControllerGetAgentsParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerAddAgentWithBody(ctx context.Context, params *AgentsControllerAddAgentParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAgentsControllerAddAgentRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerAddAgent(ctx context.Context, params *AgentsControllerAddAgentParams, body AgentsControllerAddAgentJSONRequestBody) (*http.Response, error) {
	req, err := NewAgentsControllerAddAgentRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerDeleteMultipleAgentSingleGroup(ctx context.Context, params *AgentsControllerDeleteMultipleAgentSingleGroupParams) (*http.Response, error) {
	req, err := NewAgentsControllerDeleteMultipleAgentSingleGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerPutMultipleAgentSingleGroup(ctx context.Context, params *AgentsControllerPutMultipleAgentSingleGroupParams) (*http.Response, error) {
	req, err := NewAgentsControllerPutMultipleAgentSingleGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerRestartAgentsByGroup(ctx context.Context, groupId GroupId, params *AgentsControllerRestartAgentsByGroupParams) (*http.Response, error) {
	req, err := NewAgentsControllerRestartAgentsByGroupRequest(c.Server, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerInsertAgentWithBody(ctx context.Context, params *AgentsControllerInsertAgentParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAgentsControllerInsertAgentRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerInsertAgent(ctx context.Context, params *AgentsControllerInsertAgentParams, body AgentsControllerInsertAgentJSONRequestBody) (*http.Response, error) {
	req, err := NewAgentsControllerInsertAgentRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerPostNewAgent(ctx context.Context, params *AgentsControllerPostNewAgentParams) (*http.Response, error) {
	req, err := NewAgentsControllerPostNewAgentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetAgentNoGroup(ctx context.Context, params *AgentsControllerGetAgentNoGroupParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetAgentNoGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerRestartAgentsByNode(ctx context.Context, nodeId NodeId, params *AgentsControllerRestartAgentsByNodeParams) (*http.Response, error) {
	req, err := NewAgentsControllerRestartAgentsByNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetAgentOutdated(ctx context.Context, params *AgentsControllerGetAgentOutdatedParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetAgentOutdatedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerRestartAgents(ctx context.Context, params *AgentsControllerRestartAgentsParams) (*http.Response, error) {
	req, err := NewAgentsControllerRestartAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetAgentFields(ctx context.Context, params *AgentsControllerGetAgentFieldsParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetAgentFieldsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetAgentSummaryOs(ctx context.Context, params *AgentsControllerGetAgentSummaryOsParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetAgentSummaryOsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetAgentSummaryStatus(ctx context.Context, params *AgentsControllerGetAgentSummaryStatusParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetAgentSummaryStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetAgentConfig(ctx context.Context, agentId AgentId, component Component, configuration Configuration, params *AgentsControllerGetAgentConfigParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetAgentConfigRequest(c.Server, agentId, component, configuration, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerDeleteSingleAgentMultipleGroups(ctx context.Context, agentId AgentId, params *AgentsControllerDeleteSingleAgentMultipleGroupsParams) (*http.Response, error) {
	req, err := NewAgentsControllerDeleteSingleAgentMultipleGroupsRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetSyncAgent(ctx context.Context, agentId AgentId, params *AgentsControllerGetSyncAgentParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetSyncAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerDeleteSingleAgentSingleGroup(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentsControllerDeleteSingleAgentSingleGroupParams) (*http.Response, error) {
	req, err := NewAgentsControllerDeleteSingleAgentSingleGroupRequest(c.Server, agentId, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerPutAgentSingleGroup(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentsControllerPutAgentSingleGroupParams) (*http.Response, error) {
	req, err := NewAgentsControllerPutAgentSingleGroupRequest(c.Server, agentId, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetAgentKey(ctx context.Context, agentId AgentId, params *AgentsControllerGetAgentKeyParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetAgentKeyRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerRestartAgent(ctx context.Context, agentId AgentId, params *AgentsControllerRestartAgentParams) (*http.Response, error) {
	req, err := NewAgentsControllerRestartAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerPutUpgradeAgent(ctx context.Context, agentId AgentId, params *AgentsControllerPutUpgradeAgentParams) (*http.Response, error) {
	req, err := NewAgentsControllerPutUpgradeAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerPutUpgradeCustomAgent(ctx context.Context, agentId AgentId, params *AgentsControllerPutUpgradeCustomAgentParams) (*http.Response, error) {
	req, err := NewAgentsControllerPutUpgradeCustomAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetAgentUpgrade(ctx context.Context, agentId AgentId, params *AgentsControllerGetAgentUpgradeParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetAgentUpgradeRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CiscatControllerGetAgentsCiscatResults(ctx context.Context, agentId AgentId, params *CiscatControllerGetAgentsCiscatResultsParams) (*http.Response, error) {
	req, err := NewCiscatControllerGetAgentsCiscatResultsRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetApiConfig(ctx context.Context, params *ClusterControllerGetApiConfigParams) (*http.Response, error) {
	req, err := NewClusterControllerGetApiConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetConfValidation(ctx context.Context, params *ClusterControllerGetConfValidationParams) (*http.Response, error) {
	req, err := NewClusterControllerGetConfValidationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetHealthcheck(ctx context.Context, params *ClusterControllerGetHealthcheckParams) (*http.Response, error) {
	req, err := NewClusterControllerGetHealthcheckRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetConfig(ctx context.Context, params *ClusterControllerGetConfigParams) (*http.Response, error) {
	req, err := NewClusterControllerGetConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetClusterNode(ctx context.Context, params *ClusterControllerGetClusterNodeParams) (*http.Response, error) {
	req, err := NewClusterControllerGetClusterNodeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetClusterNodes(ctx context.Context, params *ClusterControllerGetClusterNodesParams) (*http.Response, error) {
	req, err := NewClusterControllerGetClusterNodesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerPutRestart(ctx context.Context, params *ClusterControllerPutRestartParams) (*http.Response, error) {
	req, err := NewClusterControllerPutRestartRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetStatus(ctx context.Context, params *ClusterControllerGetStatusParams) (*http.Response, error) {
	req, err := NewClusterControllerGetStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetConfigurationNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetConfigurationNodeParams) (*http.Response, error) {
	req, err := NewClusterControllerGetConfigurationNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetNodeConfig(ctx context.Context, nodeId NodeId, component Component, configuration Configuration, params *ClusterControllerGetNodeConfigParams) (*http.Response, error) {
	req, err := NewClusterControllerGetNodeConfigRequest(c.Server, nodeId, component, configuration, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerDeleteFilesNode(ctx context.Context, nodeId NodeId, params *ClusterControllerDeleteFilesNodeParams) (*http.Response, error) {
	req, err := NewClusterControllerDeleteFilesNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetFilesNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetFilesNodeParams) (*http.Response, error) {
	req, err := NewClusterControllerGetFilesNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerPutFilesNodeWithBody(ctx context.Context, nodeId NodeId, params *ClusterControllerPutFilesNodeParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewClusterControllerPutFilesNodeRequestWithBody(c.Server, nodeId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetInfoNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetInfoNodeParams) (*http.Response, error) {
	req, err := NewClusterControllerGetInfoNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetLogNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogNodeParams) (*http.Response, error) {
	req, err := NewClusterControllerGetLogNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetLogSummaryNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogSummaryNodeParams) (*http.Response, error) {
	req, err := NewClusterControllerGetLogSummaryNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetStatsNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsNodeParams) (*http.Response, error) {
	req, err := NewClusterControllerGetStatsNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetStatsAnalysisdNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsAnalysisdNodeParams) (*http.Response, error) {
	req, err := NewClusterControllerGetStatsAnalysisdNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetStatsHourlyNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsHourlyNodeParams) (*http.Response, error) {
	req, err := NewClusterControllerGetStatsHourlyNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetStatsRemotedNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsRemotedNodeParams) (*http.Response, error) {
	req, err := NewClusterControllerGetStatsRemotedNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetStatsWeeklyNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsWeeklyNodeParams) (*http.Response, error) {
	req, err := NewClusterControllerGetStatsWeeklyNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterControllerGetStatusNode(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatusNodeParams) (*http.Response, error) {
	req, err := NewClusterControllerGetStatusNodeRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DecodersControllerGetDecoders(ctx context.Context, params *DecodersControllerGetDecodersParams) (*http.Response, error) {
	req, err := NewDecodersControllerGetDecodersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DecodersControllerGetDecodersFiles(ctx context.Context, params *DecodersControllerGetDecodersFilesParams) (*http.Response, error) {
	req, err := NewDecodersControllerGetDecodersFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DecodersControllerGetDownloadFile(ctx context.Context, filename DownloadFile, params *DecodersControllerGetDownloadFileParams) (*http.Response, error) {
	req, err := NewDecodersControllerGetDownloadFileRequest(c.Server, filename, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DecodersControllerGetDecodersParents(ctx context.Context, params *DecodersControllerGetDecodersParentsParams) (*http.Response, error) {
	req, err := NewDecodersControllerGetDecodersParentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetCisCatResults(ctx context.Context, params *ExperimentalControllerGetCisCatResultsParams) (*http.Response, error) {
	req, err := NewExperimentalControllerGetCisCatResultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerClearSyscheckDatabase(ctx context.Context, params *ExperimentalControllerClearSyscheckDatabaseParams) (*http.Response, error) {
	req, err := NewExperimentalControllerClearSyscheckDatabaseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetHardwareInfo(ctx context.Context, params *ExperimentalControllerGetHardwareInfoParams) (*http.Response, error) {
	req, err := NewExperimentalControllerGetHardwareInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetHotfixesInfo(ctx context.Context, params *ExperimentalControllerGetHotfixesInfoParams) (*http.Response, error) {
	req, err := NewExperimentalControllerGetHotfixesInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetNetworkAddressInfo(ctx context.Context, params *ExperimentalControllerGetNetworkAddressInfoParams) (*http.Response, error) {
	req, err := NewExperimentalControllerGetNetworkAddressInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetNetworkInterfaceInfo(ctx context.Context, params *ExperimentalControllerGetNetworkInterfaceInfoParams) (*http.Response, error) {
	req, err := NewExperimentalControllerGetNetworkInterfaceInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetNetworkProtocolInfo(ctx context.Context, params *ExperimentalControllerGetNetworkProtocolInfoParams) (*http.Response, error) {
	req, err := NewExperimentalControllerGetNetworkProtocolInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetOsInfo(ctx context.Context, params *ExperimentalControllerGetOsInfoParams) (*http.Response, error) {
	req, err := NewExperimentalControllerGetOsInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetPackagesInfo(ctx context.Context, params *ExperimentalControllerGetPackagesInfoParams) (*http.Response, error) {
	req, err := NewExperimentalControllerGetPackagesInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetPortsInfo(ctx context.Context, params *ExperimentalControllerGetPortsInfoParams) (*http.Response, error) {
	req, err := NewExperimentalControllerGetPortsInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ExperimentalControllerGetProcessesInfo(ctx context.Context, params *ExperimentalControllerGetProcessesInfoParams) (*http.Response, error) {
	req, err := NewExperimentalControllerGetProcessesInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerDeleteGroups(ctx context.Context, params *AgentsControllerDeleteGroupsParams) (*http.Response, error) {
	req, err := NewAgentsControllerDeleteGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetListGroup(ctx context.Context, params *AgentsControllerGetListGroupParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetListGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerPostGroup(ctx context.Context, params *AgentsControllerPostGroupParams) (*http.Response, error) {
	req, err := NewAgentsControllerPostGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetAgentsInGroup(ctx context.Context, groupId GroupId, params *AgentsControllerGetAgentsInGroupParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetAgentsInGroupRequest(c.Server, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetGroupConfig(ctx context.Context, groupId GroupId, params *AgentsControllerGetGroupConfigParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetGroupConfigRequest(c.Server, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerPutGroupConfigWithBody(ctx context.Context, groupId GroupId, params *AgentsControllerPutGroupConfigParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAgentsControllerPutGroupConfigRequestWithBody(c.Server, groupId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetGroupFiles(ctx context.Context, groupId GroupId, params *AgentsControllerGetGroupFilesParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetGroupFilesRequest(c.Server, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetGroupFileJson(ctx context.Context, groupId GroupId, fileName FileName, params *AgentsControllerGetGroupFileJsonParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetGroupFileJsonRequest(c.Server, groupId, fileName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AgentsControllerGetGroupFileXml(ctx context.Context, groupId GroupId, fileName FileName, params *AgentsControllerGetGroupFileXmlParams) (*http.Response, error) {
	req, err := NewAgentsControllerGetGroupFileXmlRequest(c.Server, groupId, fileName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListsControllerGetLists(ctx context.Context, params *ListsControllerGetListsParams) (*http.Response, error) {
	req, err := NewListsControllerGetListsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListsControllerGetListsFiles(ctx context.Context, params *ListsControllerGetListsFilesParams) (*http.Response, error) {
	req, err := NewListsControllerGetListsFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetApiConfig(ctx context.Context, params *ManagerControllerGetApiConfigParams) (*http.Response, error) {
	req, err := NewManagerControllerGetApiConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetConfiguration(ctx context.Context, params *ManagerControllerGetConfigurationParams) (*http.Response, error) {
	req, err := NewManagerControllerGetConfigurationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetConfValidation(ctx context.Context, params *ManagerControllerGetConfValidationParams) (*http.Response, error) {
	req, err := NewManagerControllerGetConfValidationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetManagerConfigOndemand(ctx context.Context, component Component, configuration Configuration, params *ManagerControllerGetManagerConfigOndemandParams) (*http.Response, error) {
	req, err := NewManagerControllerGetManagerConfigOndemandRequest(c.Server, component, configuration, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerDeleteFiles(ctx context.Context, params *ManagerControllerDeleteFilesParams) (*http.Response, error) {
	req, err := NewManagerControllerDeleteFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetFiles(ctx context.Context, params *ManagerControllerGetFilesParams) (*http.Response, error) {
	req, err := NewManagerControllerGetFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerPutFilesWithBody(ctx context.Context, params *ManagerControllerPutFilesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewManagerControllerPutFilesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetInfo(ctx context.Context, params *ManagerControllerGetInfoParams) (*http.Response, error) {
	req, err := NewManagerControllerGetInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetLog(ctx context.Context, params *ManagerControllerGetLogParams) (*http.Response, error) {
	req, err := NewManagerControllerGetLogRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetLogSummary(ctx context.Context, params *ManagerControllerGetLogSummaryParams) (*http.Response, error) {
	req, err := NewManagerControllerGetLogSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerPutRestart(ctx context.Context, params *ManagerControllerPutRestartParams) (*http.Response, error) {
	req, err := NewManagerControllerPutRestartRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetStats(ctx context.Context, params *ManagerControllerGetStatsParams) (*http.Response, error) {
	req, err := NewManagerControllerGetStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetStatsAnalysisd(ctx context.Context, params *ManagerControllerGetStatsAnalysisdParams) (*http.Response, error) {
	req, err := NewManagerControllerGetStatsAnalysisdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetStatsHourly(ctx context.Context, params *ManagerControllerGetStatsHourlyParams) (*http.Response, error) {
	req, err := NewManagerControllerGetStatsHourlyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetStatsRemoted(ctx context.Context, params *ManagerControllerGetStatsRemotedParams) (*http.Response, error) {
	req, err := NewManagerControllerGetStatsRemotedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetStatsWeekly(ctx context.Context, params *ManagerControllerGetStatsWeeklyParams) (*http.Response, error) {
	req, err := NewManagerControllerGetStatsWeeklyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ManagerControllerGetStatus(ctx context.Context, params *ManagerControllerGetStatusParams) (*http.Response, error) {
	req, err := NewManagerControllerGetStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) MitreControllerGetAttack(ctx context.Context, params *MitreControllerGetAttackParams) (*http.Response, error) {
	req, err := NewMitreControllerGetAttackRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) OverviewControllerGetOverviewAgents(ctx context.Context, params *OverviewControllerGetOverviewAgentsParams) (*http.Response, error) {
	req, err := NewOverviewControllerGetOverviewAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RulesControllerGetRules(ctx context.Context, params *RulesControllerGetRulesParams) (*http.Response, error) {
	req, err := NewRulesControllerGetRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RulesControllerGetRulesFiles(ctx context.Context, params *RulesControllerGetRulesFilesParams) (*http.Response, error) {
	req, err := NewRulesControllerGetRulesFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RulesControllerGetDownloadFile(ctx context.Context, filename DownloadFile, params *RulesControllerGetDownloadFileParams) (*http.Response, error) {
	req, err := NewRulesControllerGetDownloadFileRequest(c.Server, filename, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RulesControllerGetRulesGroups(ctx context.Context, params *RulesControllerGetRulesGroupsParams) (*http.Response, error) {
	req, err := NewRulesControllerGetRulesGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RulesControllerGetRulesRequirement(ctx context.Context, requirement RuleRequirement, params *RulesControllerGetRulesRequirementParams) (*http.Response, error) {
	req, err := NewRulesControllerGetRulesRequirementRequest(c.Server, requirement, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ScaControllerGetScaAgent(ctx context.Context, agentId AgentId, params *ScaControllerGetScaAgentParams) (*http.Response, error) {
	req, err := NewScaControllerGetScaAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ScaControllerGetScaChecks(ctx context.Context, agentId AgentId, policyId PolicyId, params *ScaControllerGetScaChecksParams) (*http.Response, error) {
	req, err := NewScaControllerGetScaChecksRequest(c.Server, agentId, policyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetRbacActions(ctx context.Context, params *SecurityControllerGetRbacActionsParams) (*http.Response, error) {
	req, err := NewSecurityControllerGetRbacActionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerDeleteSecurityConfig(ctx context.Context, params *SecurityControllerDeleteSecurityConfigParams) (*http.Response, error) {
	req, err := NewSecurityControllerDeleteSecurityConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetSecurityConfig(ctx context.Context, params *SecurityControllerGetSecurityConfigParams) (*http.Response, error) {
	req, err := NewSecurityControllerGetSecurityConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerPutSecurityConfigWithBody(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSecurityControllerPutSecurityConfigRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerPutSecurityConfig(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, body SecurityControllerPutSecurityConfigJSONRequestBody) (*http.Response, error) {
	req, err := NewSecurityControllerPutSecurityConfigRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRemovePolicies(ctx context.Context, params *SecurityControllerRemovePoliciesParams) (*http.Response, error) {
	req, err := NewSecurityControllerRemovePoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetPolicies(ctx context.Context, params *SecurityControllerGetPoliciesParams) (*http.Response, error) {
	req, err := NewSecurityControllerGetPoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerAddPolicyWithBody(ctx context.Context, params *SecurityControllerAddPolicyParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSecurityControllerAddPolicyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerAddPolicy(ctx context.Context, params *SecurityControllerAddPolicyParams, body SecurityControllerAddPolicyJSONRequestBody) (*http.Response, error) {
	req, err := NewSecurityControllerAddPolicyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdatePolicyWithBody(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSecurityControllerUpdatePolicyRequestWithBody(c.Server, policyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdatePolicy(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, body SecurityControllerUpdatePolicyJSONRequestBody) (*http.Response, error) {
	req, err := NewSecurityControllerUpdatePolicyRequest(c.Server, policyId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetRbacResources(ctx context.Context, params *SecurityControllerGetRbacResourcesParams) (*http.Response, error) {
	req, err := NewSecurityControllerGetRbacResourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRemoveRoles(ctx context.Context, params *SecurityControllerRemoveRolesParams) (*http.Response, error) {
	req, err := NewSecurityControllerRemoveRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetRoles(ctx context.Context, params *SecurityControllerGetRolesParams) (*http.Response, error) {
	req, err := NewSecurityControllerGetRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerAddRoleWithBody(ctx context.Context, params *SecurityControllerAddRoleParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSecurityControllerAddRoleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerAddRole(ctx context.Context, params *SecurityControllerAddRoleParams, body SecurityControllerAddRoleJSONRequestBody) (*http.Response, error) {
	req, err := NewSecurityControllerAddRoleRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdateRoleWithBody(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSecurityControllerUpdateRoleRequestWithBody(c.Server, roleId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdateRole(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, body SecurityControllerUpdateRoleJSONRequestBody) (*http.Response, error) {
	req, err := NewSecurityControllerUpdateRoleRequest(c.Server, roleId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRemoveRolePolicy(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRolePolicyParams) (*http.Response, error) {
	req, err := NewSecurityControllerRemoveRolePolicyRequest(c.Server, roleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerSetRolePolicy(ctx context.Context, roleId RoleId, params *SecurityControllerSetRolePolicyParams) (*http.Response, error) {
	req, err := NewSecurityControllerSetRolePolicyRequest(c.Server, roleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRemoveRoleRule(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRoleRuleParams) (*http.Response, error) {
	req, err := NewSecurityControllerRemoveRoleRuleRequest(c.Server, roleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerSetRoleRule(ctx context.Context, roleId RoleId, params *SecurityControllerSetRoleRuleParams) (*http.Response, error) {
	req, err := NewSecurityControllerSetRoleRuleRequest(c.Server, roleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRemoveRules(ctx context.Context, params *SecurityControllerRemoveRulesParams) (*http.Response, error) {
	req, err := NewSecurityControllerRemoveRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetRules(ctx context.Context, params *SecurityControllerGetRulesParams) (*http.Response, error) {
	req, err := NewSecurityControllerGetRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerAddRuleWithBody(ctx context.Context, params *SecurityControllerAddRuleParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSecurityControllerAddRuleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerAddRule(ctx context.Context, params *SecurityControllerAddRuleParams, body SecurityControllerAddRuleJSONRequestBody) (*http.Response, error) {
	req, err := NewSecurityControllerAddRuleRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdateRuleWithBody(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSecurityControllerUpdateRuleRequestWithBody(c.Server, ruleId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdateRule(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, body SecurityControllerUpdateRuleJSONRequestBody) (*http.Response, error) {
	req, err := NewSecurityControllerUpdateRuleRequest(c.Server, ruleId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerLogoutUser(ctx context.Context) (*http.Response, error) {
	req, err := NewSecurityControllerLogoutUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerLoginUser(ctx context.Context, params *SecurityControllerLoginUserParams) (*http.Response, error) {
	req, err := NewSecurityControllerLoginUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerLoginUserRunAsWithBody(ctx context.Context, params *SecurityControllerLoginUserParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSecurityControllerLoginUserRunAsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerLoginUserRunAs(ctx context.Context, params *SecurityControllerLoginUserParams, body SecurityControllerLoginUserJSONRequestBody) (*http.Response, error) {
	req, err := NewSecurityControllerLoginUserRunAsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRevokeAllTokens(ctx context.Context) (*http.Response, error) {
	req, err := NewSecurityControllerRevokeAllTokensRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerDeleteUsers(ctx context.Context, params *SecurityControllerDeleteUsersParams) (*http.Response, error) {
	req, err := NewSecurityControllerDeleteUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetUsers(ctx context.Context, params *SecurityControllerGetUsersParams) (*http.Response, error) {
	req, err := NewSecurityControllerGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerCreateUserWithBody(ctx context.Context, params *SecurityControllerCreateUserParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSecurityControllerCreateUserRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerCreateUser(ctx context.Context, params *SecurityControllerCreateUserParams, body SecurityControllerCreateUserJSONRequestBody) (*http.Response, error) {
	req, err := NewSecurityControllerCreateUserRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetUserMe(ctx context.Context, params *SecurityControllerGetUserMeParams) (*http.Response, error) {
	req, err := NewSecurityControllerGetUserMeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerGetUserMePolicies(ctx context.Context, params *SecurityControllerGetUserMePoliciesParams) (*http.Response, error) {
	req, err := NewSecurityControllerGetUserMePoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdateUserWithBody(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSecurityControllerUpdateUserRequestWithBody(c.Server, userId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerUpdateUser(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, body SecurityControllerUpdateUserJSONRequestBody) (*http.Response, error) {
	req, err := NewSecurityControllerUpdateUserRequest(c.Server, userId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerRemoveUserRole(ctx context.Context, userId UserIdRequired, params *SecurityControllerRemoveUserRoleParams) (*http.Response, error) {
	req, err := NewSecurityControllerRemoveUserRoleRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SecurityControllerSetUserRole(ctx context.Context, userId UserIdRequired, params *SecurityControllerSetUserRoleParams) (*http.Response, error) {
	req, err := NewSecurityControllerSetUserRoleRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SyscheckControllerPutSyscheck(ctx context.Context, params *SyscheckControllerPutSyscheckParams) (*http.Response, error) {
	req, err := NewSyscheckControllerPutSyscheckRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SyscheckControllerDeleteSyscheckAgent(ctx context.Context, agentId AgentId, params *SyscheckControllerDeleteSyscheckAgentParams) (*http.Response, error) {
	req, err := NewSyscheckControllerDeleteSyscheckAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SyscheckControllerGetSyscheckAgent(ctx context.Context, agentId AgentId, params *SyscheckControllerGetSyscheckAgentParams) (*http.Response, error) {
	req, err := NewSyscheckControllerGetSyscheckAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SyscheckControllerGetLastScanAgent(ctx context.Context, agentId AgentId, params *SyscheckControllerGetLastScanAgentParams) (*http.Response, error) {
	req, err := NewSyscheckControllerGetLastScanAgentRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetHardwareInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHardwareInfoParams) (*http.Response, error) {
	req, err := NewSyscollectorControllerGetHardwareInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetHotfixInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHotfixInfoParams) (*http.Response, error) {
	req, err := NewSyscollectorControllerGetHotfixInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetNetworkAddressInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkAddressInfoParams) (*http.Response, error) {
	req, err := NewSyscollectorControllerGetNetworkAddressInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetNetworkInterfaceInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkInterfaceInfoParams) (*http.Response, error) {
	req, err := NewSyscollectorControllerGetNetworkInterfaceInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetNetworkProtocolInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkProtocolInfoParams) (*http.Response, error) {
	req, err := NewSyscollectorControllerGetNetworkProtocolInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetOsInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetOsInfoParams) (*http.Response, error) {
	req, err := NewSyscollectorControllerGetOsInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetPackagesInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPackagesInfoParams) (*http.Response, error) {
	req, err := NewSyscollectorControllerGetPackagesInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetPortsInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPortsInfoParams) (*http.Response, error) {
	req, err := NewSyscollectorControllerGetPortsInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SyscollectorControllerGetProcessesInfo(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetProcessesInfoParams) (*http.Response, error) {
	req, err := NewSyscollectorControllerGetProcessesInfoRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewDefaultControllerDefaultInfoRequest generates requests for DefaultControllerDefaultInfo
func NewDefaultControllerDefaultInfoRequest(server string, params *DefaultControllerDefaultInfoParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActiveResponseControllerRunCommandRequest calls the generic ActiveResponseControllerRunCommand builder with application/json body
func NewActiveResponseControllerRunCommandRequest(server string, params *ActiveResponseControllerRunCommandParams, body ActiveResponseControllerRunCommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActiveResponseControllerRunCommandRequestWithBody(server, params, "application/json", bodyReader)
}

// NewActiveResponseControllerRunCommandRequestWithBody generates requests for ActiveResponseControllerRunCommand with any type of body
func NewActiveResponseControllerRunCommandRequestWithBody(server string, params *ActiveResponseControllerRunCommandParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/active-response")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewAgentsControllerDeleteAgentsRequest generates requests for AgentsControllerDeleteAgents
func NewAgentsControllerDeleteAgentsRequest(server string, params *AgentsControllerDeleteAgentsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "agents_list", params.AgentsList); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Purge != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "purge", *params.Purge); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "status", *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OlderThan != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "older_than", *params.OlderThan); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetAgentsRequest generates requests for AgentsControllerGetAgents
func NewAgentsControllerGetAgentsRequest(server string, params *AgentsControllerGetAgentsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "status", *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OlderThan != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "older_than", *params.OlderThan); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsPlatform != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "os.platform", *params.OsPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsVersion != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "os.version", *params.OsVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsName != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "os.name", *params.OsName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Manager != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "manager", *params.Manager); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "version", *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Group != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "group", *params.Group); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeName != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "node_name", *params.NodeName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "name", *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ip != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ip", *params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisterIP != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "registerIP", *params.RegisterIP); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerAddAgentRequest calls the generic AgentsControllerAddAgent builder with application/json body
func NewAgentsControllerAddAgentRequest(server string, params *AgentsControllerAddAgentParams, body AgentsControllerAddAgentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAgentsControllerAddAgentRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAgentsControllerAddAgentRequestWithBody generates requests for AgentsControllerAddAgent with any type of body
func NewAgentsControllerAddAgentRequestWithBody(server string, params *AgentsControllerAddAgentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewAgentsControllerDeleteMultipleAgentSingleGroupRequest generates requests for AgentsControllerDeleteMultipleAgentSingleGroup
func NewAgentsControllerDeleteMultipleAgentSingleGroupRequest(server string, params *AgentsControllerDeleteMultipleAgentSingleGroupParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/group")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "agents_list", params.AgentsList); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "group_id", params.GroupId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerPutMultipleAgentSingleGroupRequest generates requests for AgentsControllerPutMultipleAgentSingleGroup
func NewAgentsControllerPutMultipleAgentSingleGroupRequest(server string, params *AgentsControllerPutMultipleAgentSingleGroupParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/group")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "group_id", params.GroupId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.ForceSingleGroup != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "force_single_group", *params.ForceSingleGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerRestartAgentsByGroupRequest generates requests for AgentsControllerRestartAgentsByGroup
func NewAgentsControllerRestartAgentsByGroupRequest(server string, groupId GroupId, params *AgentsControllerRestartAgentsByGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "group_id", groupId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/group/%s/restart", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerInsertAgentRequest calls the generic AgentsControllerInsertAgent builder with application/json body
func NewAgentsControllerInsertAgentRequest(server string, params *AgentsControllerInsertAgentParams, body AgentsControllerInsertAgentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAgentsControllerInsertAgentRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAgentsControllerInsertAgentRequestWithBody generates requests for AgentsControllerInsertAgent with any type of body
func NewAgentsControllerInsertAgentRequestWithBody(server string, params *AgentsControllerInsertAgentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/insert")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewAgentsControllerPostNewAgentRequest generates requests for AgentsControllerPostNewAgent
func NewAgentsControllerPostNewAgentRequest(server string, params *AgentsControllerPostNewAgentParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/insert/quick")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "agent_name", params.AgentName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetAgentNoGroupRequest generates requests for AgentsControllerGetAgentNoGroup
func NewAgentsControllerGetAgentNoGroupRequest(server string, params *AgentsControllerGetAgentNoGroupParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/no_group")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerRestartAgentsByNodeRequest generates requests for AgentsControllerRestartAgentsByNode
func NewAgentsControllerRestartAgentsByNodeRequest(server string, nodeId NodeId, params *AgentsControllerRestartAgentsByNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/node/%s/restart", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetAgentOutdatedRequest generates requests for AgentsControllerGetAgentOutdated
func NewAgentsControllerGetAgentOutdatedRequest(server string, params *AgentsControllerGetAgentOutdatedParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/outdated")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerRestartAgentsRequest generates requests for AgentsControllerRestartAgents
func NewAgentsControllerRestartAgentsRequest(server string, params *AgentsControllerRestartAgentsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/restart")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetAgentFieldsRequest generates requests for AgentsControllerGetAgentFields
func NewAgentsControllerGetAgentFieldsRequest(server string, params *AgentsControllerGetAgentFieldsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/stats/distinct")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "fields", *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetAgentSummaryOsRequest generates requests for AgentsControllerGetAgentSummaryOs
func NewAgentsControllerGetAgentSummaryOsRequest(server string, params *AgentsControllerGetAgentSummaryOsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/summary/os")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetAgentSummaryStatusRequest generates requests for AgentsControllerGetAgentSummaryStatus
func NewAgentsControllerGetAgentSummaryStatusRequest(server string, params *AgentsControllerGetAgentSummaryStatusParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/summary/status")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetAgentConfigRequest generates requests for AgentsControllerGetAgentConfig
func NewAgentsControllerGetAgentConfigRequest(server string, agentId AgentId, component Component, configuration Configuration, params *AgentsControllerGetAgentConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "component", component)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "configuration", configuration)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/%s/config/%s/%s", pathParam0, pathParam1, pathParam2)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerDeleteSingleAgentMultipleGroupsRequest generates requests for AgentsControllerDeleteSingleAgentMultipleGroups
func NewAgentsControllerDeleteSingleAgentMultipleGroupsRequest(server string, agentId AgentId, params *AgentsControllerDeleteSingleAgentMultipleGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/%s/group", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GroupsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "groups_list", *params.GroupsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetSyncAgentRequest generates requests for AgentsControllerGetSyncAgent
func NewAgentsControllerGetSyncAgentRequest(server string, agentId AgentId, params *AgentsControllerGetSyncAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/%s/group/is_sync", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerDeleteSingleAgentSingleGroupRequest generates requests for AgentsControllerDeleteSingleAgentSingleGroup
func NewAgentsControllerDeleteSingleAgentSingleGroupRequest(server string, agentId AgentId, groupId GroupId, params *AgentsControllerDeleteSingleAgentSingleGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "group_id", groupId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/%s/group/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerPutAgentSingleGroupRequest generates requests for AgentsControllerPutAgentSingleGroup
func NewAgentsControllerPutAgentSingleGroupRequest(server string, agentId AgentId, groupId GroupId, params *AgentsControllerPutAgentSingleGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "group_id", groupId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/%s/group/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ForceSingleGroup != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "force_single_group", *params.ForceSingleGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetAgentKeyRequest generates requests for AgentsControllerGetAgentKey
func NewAgentsControllerGetAgentKeyRequest(server string, agentId AgentId, params *AgentsControllerGetAgentKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/%s/key", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerRestartAgentRequest generates requests for AgentsControllerRestartAgent
func NewAgentsControllerRestartAgentRequest(server string, agentId AgentId, params *AgentsControllerRestartAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/%s/restart", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerPutUpgradeAgentRequest generates requests for AgentsControllerPutUpgradeAgent
func NewAgentsControllerPutUpgradeAgentRequest(server string, agentId AgentId, params *AgentsControllerPutUpgradeAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/%s/upgrade", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WpkRepo != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wpk_repo", *params.WpkRepo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "version", *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UseHttp != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "use_http", *params.UseHttp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Force != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "force", *params.Force); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerPutUpgradeCustomAgentRequest generates requests for AgentsControllerPutUpgradeCustomAgent
func NewAgentsControllerPutUpgradeCustomAgentRequest(server string, agentId AgentId, params *AgentsControllerPutUpgradeCustomAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/%s/upgrade_custom", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "file_path", params.FilePath); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Installer != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "installer", *params.Installer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetAgentUpgradeRequest generates requests for AgentsControllerGetAgentUpgrade
func NewAgentsControllerGetAgentUpgradeRequest(server string, agentId AgentId, params *AgentsControllerGetAgentUpgradeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/agents/%s/upgrade_result", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Timeout != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "timeout", *params.Timeout); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiscatControllerGetAgentsCiscatResultsRequest generates requests for CiscatControllerGetAgentsCiscatResults
func NewCiscatControllerGetAgentsCiscatResultsRequest(server string, agentId AgentId, params *CiscatControllerGetAgentsCiscatResultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ciscat/%s/results", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Benchmark != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "benchmark", *params.Benchmark); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Profile != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "profile", *params.Profile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pass != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pass", *params.Pass); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fail != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "fail", *params.Fail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Error != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "error", *params.Error); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Notchecked != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "notchecked", *params.Notchecked); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Unknown != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "unknown", *params.Unknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Score != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "score", *params.Score); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetApiConfigRequest generates requests for ClusterControllerGetApiConfig
func NewClusterControllerGetApiConfigRequest(server string, params *ClusterControllerGetApiConfigParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/api/config")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodesList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "nodes_list", *params.NodesList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetConfValidationRequest generates requests for ClusterControllerGetConfValidation
func NewClusterControllerGetConfValidationRequest(server string, params *ClusterControllerGetConfValidationParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/configuration/validation")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodesList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "nodes_list", *params.NodesList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetHealthcheckRequest generates requests for ClusterControllerGetHealthcheck
func NewClusterControllerGetHealthcheckRequest(server string, params *ClusterControllerGetHealthcheckParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/healthcheck")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodesList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "nodes_list", *params.NodesList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetConfigRequest generates requests for ClusterControllerGetConfig
func NewClusterControllerGetConfigRequest(server string, params *ClusterControllerGetConfigParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/local/config")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetClusterNodeRequest generates requests for ClusterControllerGetClusterNode
func NewClusterControllerGetClusterNodeRequest(server string, params *ClusterControllerGetClusterNodeParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/local/info")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetClusterNodesRequest generates requests for ClusterControllerGetClusterNodes
func NewClusterControllerGetClusterNodesRequest(server string, params *ClusterControllerGetClusterNodesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/nodes")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "type", *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodesList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "nodes_list", *params.NodesList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerPutRestartRequest generates requests for ClusterControllerPutRestart
func NewClusterControllerPutRestartRequest(server string, params *ClusterControllerPutRestartParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/restart")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodesList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "nodes_list", *params.NodesList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetStatusRequest generates requests for ClusterControllerGetStatus
func NewClusterControllerGetStatusRequest(server string, params *ClusterControllerGetStatusParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/status")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetConfigurationNodeRequest generates requests for ClusterControllerGetConfigurationNode
func NewClusterControllerGetConfigurationNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetConfigurationNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/%s/configuration", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Section != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "section", *params.Section); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Field != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "field", *params.Field); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetNodeConfigRequest generates requests for ClusterControllerGetNodeConfig
func NewClusterControllerGetNodeConfigRequest(server string, nodeId NodeId, component Component, configuration Configuration, params *ClusterControllerGetNodeConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "component", component)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "configuration", configuration)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/%s/configuration/%s/%s", pathParam0, pathParam1, pathParam2)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerDeleteFilesNodeRequest generates requests for ClusterControllerDeleteFilesNode
func NewClusterControllerDeleteFilesNodeRequest(server string, nodeId NodeId, params *ClusterControllerDeleteFilesNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/%s/files", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "path", params.Path); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetFilesNodeRequest generates requests for ClusterControllerGetFilesNode
func NewClusterControllerGetFilesNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetFilesNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/%s/files", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "path", params.Path); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerPutFilesNodeRequestWithBody generates requests for ClusterControllerPutFilesNode with any type of body
func NewClusterControllerPutFilesNodeRequestWithBody(server string, nodeId NodeId, params *ClusterControllerPutFilesNodeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/%s/files", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "path", params.Path); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Overwrite != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "overwrite", *params.Overwrite); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewClusterControllerGetInfoNodeRequest generates requests for ClusterControllerGetInfoNode
func NewClusterControllerGetInfoNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetInfoNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/%s/info", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetLogNodeRequest generates requests for ClusterControllerGetLogNode
func NewClusterControllerGetLogNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetLogNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/%s/logs", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tag", *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Level != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "level", *params.Level); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetLogSummaryNodeRequest generates requests for ClusterControllerGetLogSummaryNode
func NewClusterControllerGetLogSummaryNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetLogSummaryNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/%s/logs/summary", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetStatsNodeRequest generates requests for ClusterControllerGetStatsNode
func NewClusterControllerGetStatsNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetStatsNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/%s/stats", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Date != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "date", *params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetStatsAnalysisdNodeRequest generates requests for ClusterControllerGetStatsAnalysisdNode
func NewClusterControllerGetStatsAnalysisdNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetStatsAnalysisdNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/%s/stats/analysisd", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetStatsHourlyNodeRequest generates requests for ClusterControllerGetStatsHourlyNode
func NewClusterControllerGetStatsHourlyNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetStatsHourlyNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/%s/stats/hourly", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetStatsRemotedNodeRequest generates requests for ClusterControllerGetStatsRemotedNode
func NewClusterControllerGetStatsRemotedNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetStatsRemotedNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/%s/stats/remoted", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetStatsWeeklyNodeRequest generates requests for ClusterControllerGetStatsWeeklyNode
func NewClusterControllerGetStatsWeeklyNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetStatsWeeklyNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/%s/stats/weekly", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterControllerGetStatusNodeRequest generates requests for ClusterControllerGetStatusNode
func NewClusterControllerGetStatusNodeRequest(server string, nodeId NodeId, params *ClusterControllerGetStatusNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "node_id", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cluster/%s/status", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDecodersControllerGetDecodersRequest generates requests for DecodersControllerGetDecoders
func NewDecodersControllerGetDecodersRequest(server string, params *DecodersControllerGetDecodersParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/decoders")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.DecoderNames != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "decoder_names", *params.DecoderNames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filename != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "filename", *params.Filename); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "relative_dirname", *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "status", *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDecodersControllerGetDecodersFilesRequest generates requests for DecodersControllerGetDecodersFiles
func NewDecodersControllerGetDecodersFilesRequest(server string, params *DecodersControllerGetDecodersFilesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/decoders/files")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filename != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "filename", *params.Filename); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "relative_dirname", *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "status", *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDecodersControllerGetDownloadFileRequest generates requests for DecodersControllerGetDownloadFile
func NewDecodersControllerGetDownloadFileRequest(server string, filename DownloadFile, params *DecodersControllerGetDownloadFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "filename", filename)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/decoders/files/%s/download", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDecodersControllerGetDecodersParentsRequest generates requests for DecodersControllerGetDecodersParents
func NewDecodersControllerGetDecodersParentsRequest(server string, params *DecodersControllerGetDecodersParentsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/decoders/parents")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExperimentalControllerGetCisCatResultsRequest generates requests for ExperimentalControllerGetCisCatResults
func NewExperimentalControllerGetCisCatResultsRequest(server string, params *ExperimentalControllerGetCisCatResultsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/experimental/ciscat/results")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Benchmark != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "benchmark", *params.Benchmark); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Profile != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "profile", *params.Profile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pass != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pass", *params.Pass); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fail != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "fail", *params.Fail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Error != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "error", *params.Error); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Notchecked != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "notchecked", *params.Notchecked); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Unknown != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "unknown", *params.Unknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Score != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "score", *params.Score); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExperimentalControllerClearSyscheckDatabaseRequest generates requests for ExperimentalControllerClearSyscheckDatabase
func NewExperimentalControllerClearSyscheckDatabaseRequest(server string, params *ExperimentalControllerClearSyscheckDatabaseParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/experimental/syscheck")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "agents_list", params.AgentsList); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExperimentalControllerGetHardwareInfoRequest generates requests for ExperimentalControllerGetHardwareInfo
func NewExperimentalControllerGetHardwareInfoRequest(server string, params *ExperimentalControllerGetHardwareInfoParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/experimental/syscollector/hardware")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RamFree != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ram.free", *params.RamFree); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RamTotal != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ram.total", *params.RamTotal); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CpuCores != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "cpu.cores", *params.CpuCores); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CpuMhz != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "cpu.mhz", *params.CpuMhz); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CpuName != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "cpu.name", *params.CpuName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BoardSerial != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "board_serial", *params.BoardSerial); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExperimentalControllerGetHotfixesInfoRequest generates requests for ExperimentalControllerGetHotfixesInfo
func NewExperimentalControllerGetHotfixesInfoRequest(server string, params *ExperimentalControllerGetHotfixesInfoParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/experimental/syscollector/hotfixes")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hotfix != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "hotfix", *params.Hotfix); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExperimentalControllerGetNetworkAddressInfoRequest generates requests for ExperimentalControllerGetNetworkAddressInfo
func NewExperimentalControllerGetNetworkAddressInfoRequest(server string, params *ExperimentalControllerGetNetworkAddressInfoParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/experimental/syscollector/netaddr")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Proto != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "proto", *params.Proto); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Address != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "address", *params.Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Broadcast != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "broadcast", *params.Broadcast); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Netmask != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "netmask", *params.Netmask); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExperimentalControllerGetNetworkInterfaceInfoRequest generates requests for ExperimentalControllerGetNetworkInterfaceInfo
func NewExperimentalControllerGetNetworkInterfaceInfoRequest(server string, params *ExperimentalControllerGetNetworkInterfaceInfoParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/experimental/syscollector/netiface")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "name", *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Adapter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "adapter", *params.Adapter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "type", *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "state", *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Mtu != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "mtu", *params.Mtu); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxPackets != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tx.packets", *params.TxPackets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxPackets != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "rx.packets", *params.RxPackets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxBytes != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tx.bytes", *params.TxBytes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxBytes != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "rx.bytes", *params.RxBytes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxErrors != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tx.errors", *params.TxErrors); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxErrors != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "rx.errors", *params.RxErrors); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxDropped != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tx.dropped", *params.TxDropped); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxDropped != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "rx.dropped", *params.RxDropped); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExperimentalControllerGetNetworkProtocolInfoRequest generates requests for ExperimentalControllerGetNetworkProtocolInfo
func NewExperimentalControllerGetNetworkProtocolInfoRequest(server string, params *ExperimentalControllerGetNetworkProtocolInfoParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/experimental/syscollector/netproto")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Iface != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "iface", *params.Iface); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "type", *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Gateway != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "gateway", *params.Gateway); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Dhcp != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "dhcp", *params.Dhcp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExperimentalControllerGetOsInfoRequest generates requests for ExperimentalControllerGetOsInfo
func NewExperimentalControllerGetOsInfoRequest(server string, params *ExperimentalControllerGetOsInfoParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/experimental/syscollector/os")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsName != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "os.name", *params.OsName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Architecture != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "architecture", *params.Architecture); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OsVersion != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "os.version", *params.OsVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "version", *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Release != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "release", *params.Release); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExperimentalControllerGetPackagesInfoRequest generates requests for ExperimentalControllerGetPackagesInfo
func NewExperimentalControllerGetPackagesInfoRequest(server string, params *ExperimentalControllerGetPackagesInfoParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/experimental/syscollector/packages")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Vendor != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "vendor", *params.Vendor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "name", *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Architecture != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "architecture", *params.Architecture); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "format", *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "version", *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExperimentalControllerGetPortsInfoRequest generates requests for ExperimentalControllerGetPortsInfo
func NewExperimentalControllerGetPortsInfoRequest(server string, params *ExperimentalControllerGetPortsInfoParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/experimental/syscollector/ports")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pid != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pid", *params.Pid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Protocol != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "protocol", *params.Protocol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LocalIp != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "local.ip", *params.LocalIp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LocalPort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "local.port", *params.LocalPort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RemoteIp != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "remote.ip", *params.RemoteIp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxQueue != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tx_queue", *params.TxQueue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "state", *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Process != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "process", *params.Process); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExperimentalControllerGetProcessesInfoRequest generates requests for ExperimentalControllerGetProcessesInfo
func NewExperimentalControllerGetProcessesInfoRequest(server string, params *ExperimentalControllerGetProcessesInfoParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/experimental/syscollector/processes")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pid != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pid", *params.Pid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "state", *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ppid != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ppid", *params.Ppid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Egroup != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "egroup", *params.Egroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Euser != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "euser", *params.Euser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fgroup != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "fgroup", *params.Fgroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "name", *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Nlwp != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "nlwp", *params.Nlwp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pgrp != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pgrp", *params.Pgrp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Priority != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "priority", *params.Priority); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Rgroup != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "rgroup", *params.Rgroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ruser != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ruser", *params.Ruser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sgroup != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sgroup", *params.Sgroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Suser != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "suser", *params.Suser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerDeleteGroupsRequest generates requests for AgentsControllerDeleteGroups
func NewAgentsControllerDeleteGroupsRequest(server string, params *AgentsControllerDeleteGroupsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "groups_list", params.GroupsList); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetListGroupRequest generates requests for AgentsControllerGetListGroup
func NewAgentsControllerGetListGroupRequest(server string, params *AgentsControllerGetListGroupParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GroupsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "groups_list", *params.GroupsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hash != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "hash", *params.Hash); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerPostGroupRequest generates requests for AgentsControllerPostGroup
func NewAgentsControllerPostGroupRequest(server string, params *AgentsControllerPostGroupParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "group_id", params.GroupId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetAgentsInGroupRequest generates requests for AgentsControllerGetAgentsInGroup
func NewAgentsControllerGetAgentsInGroupRequest(server string, groupId GroupId, params *AgentsControllerGetAgentsInGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "group_id", groupId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s/agents", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "status", *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetGroupConfigRequest generates requests for AgentsControllerGetGroupConfig
func NewAgentsControllerGetGroupConfigRequest(server string, groupId GroupId, params *AgentsControllerGetGroupConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "group_id", groupId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s/configuration", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerPutGroupConfigRequestWithBody generates requests for AgentsControllerPutGroupConfig with any type of body
func NewAgentsControllerPutGroupConfigRequestWithBody(server string, groupId GroupId, params *AgentsControllerPutGroupConfigParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "group_id", groupId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s/configuration", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewAgentsControllerGetGroupFilesRequest generates requests for AgentsControllerGetGroupFiles
func NewAgentsControllerGetGroupFilesRequest(server string, groupId GroupId, params *AgentsControllerGetGroupFilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "group_id", groupId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s/files", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hash != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "hash", *params.Hash); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetGroupFileJsonRequest generates requests for AgentsControllerGetGroupFileJson
func NewAgentsControllerGetGroupFileJsonRequest(server string, groupId GroupId, fileName FileName, params *AgentsControllerGetGroupFileJsonParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "group_id", groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "file_name", fileName)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s/files/%s/json", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "type", *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentsControllerGetGroupFileXmlRequest generates requests for AgentsControllerGetGroupFileXml
func NewAgentsControllerGetGroupFileXmlRequest(server string, groupId GroupId, fileName FileName, params *AgentsControllerGetGroupFileXmlParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "group_id", groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "file_name", fileName)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s/files/%s/xml", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "type", *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListsControllerGetListsRequest generates requests for ListsControllerGetLists
func NewListsControllerGetListsRequest(server string, params *ListsControllerGetListsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lists")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "relative_dirname", *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filename != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "filename", *params.Filename); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListsControllerGetListsFilesRequest generates requests for ListsControllerGetListsFiles
func NewListsControllerGetListsFilesRequest(server string, params *ListsControllerGetListsFilesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lists/files")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "relative_dirname", *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filename != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "filename", *params.Filename); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerGetApiConfigRequest generates requests for ManagerControllerGetApiConfig
func NewManagerControllerGetApiConfigRequest(server string, params *ManagerControllerGetApiConfigParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/api/config")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerGetConfigurationRequest generates requests for ManagerControllerGetConfiguration
func NewManagerControllerGetConfigurationRequest(server string, params *ManagerControllerGetConfigurationParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/configuration")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Section != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "section", *params.Section); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Field != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "field", *params.Field); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerGetConfValidationRequest generates requests for ManagerControllerGetConfValidation
func NewManagerControllerGetConfValidationRequest(server string, params *ManagerControllerGetConfValidationParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/configuration/validation")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerGetManagerConfigOndemandRequest generates requests for ManagerControllerGetManagerConfigOndemand
func NewManagerControllerGetManagerConfigOndemandRequest(server string, component Component, configuration Configuration, params *ManagerControllerGetManagerConfigOndemandParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "component", component)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "configuration", configuration)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/configuration/%s/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerDeleteFilesRequest generates requests for ManagerControllerDeleteFiles
func NewManagerControllerDeleteFilesRequest(server string, params *ManagerControllerDeleteFilesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/files")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "path", params.Path); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerGetFilesRequest generates requests for ManagerControllerGetFiles
func NewManagerControllerGetFilesRequest(server string, params *ManagerControllerGetFilesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/files")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "path", params.Path); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerPutFilesRequestWithBody generates requests for ManagerControllerPutFiles with any type of body
func NewManagerControllerPutFilesRequestWithBody(server string, params *ManagerControllerPutFilesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/files")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "path", params.Path); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Overwrite != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "overwrite", *params.Overwrite); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewManagerControllerGetInfoRequest generates requests for ManagerControllerGetInfo
func NewManagerControllerGetInfoRequest(server string, params *ManagerControllerGetInfoParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/info")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerGetLogRequest generates requests for ManagerControllerGetLog
func NewManagerControllerGetLogRequest(server string, params *ManagerControllerGetLogParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/logs")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tag", *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Level != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "level", *params.Level); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerGetLogSummaryRequest generates requests for ManagerControllerGetLogSummary
func NewManagerControllerGetLogSummaryRequest(server string, params *ManagerControllerGetLogSummaryParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/logs/summary")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerPutRestartRequest generates requests for ManagerControllerPutRestart
func NewManagerControllerPutRestartRequest(server string, params *ManagerControllerPutRestartParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/restart")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerGetStatsRequest generates requests for ManagerControllerGetStats
func NewManagerControllerGetStatsRequest(server string, params *ManagerControllerGetStatsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/stats")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Date != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "date", *params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerGetStatsAnalysisdRequest generates requests for ManagerControllerGetStatsAnalysisd
func NewManagerControllerGetStatsAnalysisdRequest(server string, params *ManagerControllerGetStatsAnalysisdParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/stats/analysisd")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerGetStatsHourlyRequest generates requests for ManagerControllerGetStatsHourly
func NewManagerControllerGetStatsHourlyRequest(server string, params *ManagerControllerGetStatsHourlyParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/stats/hourly")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerGetStatsRemotedRequest generates requests for ManagerControllerGetStatsRemoted
func NewManagerControllerGetStatsRemotedRequest(server string, params *ManagerControllerGetStatsRemotedParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/stats/remoted")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerGetStatsWeeklyRequest generates requests for ManagerControllerGetStatsWeekly
func NewManagerControllerGetStatsWeeklyRequest(server string, params *ManagerControllerGetStatsWeeklyParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/stats/weekly")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManagerControllerGetStatusRequest generates requests for ManagerControllerGetStatus
func NewManagerControllerGetStatusRequest(server string, params *ManagerControllerGetStatusParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/manager/status")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMitreControllerGetAttackRequest generates requests for MitreControllerGetAttack
func NewMitreControllerGetAttackRequest(server string, params *MitreControllerGetAttackParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/mitre")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "id", *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PhaseName != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "phase_name", *params.PhaseName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PlatformName != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "platform_name", *params.PlatformName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOverviewControllerGetOverviewAgentsRequest generates requests for OverviewControllerGetOverviewAgents
func NewOverviewControllerGetOverviewAgentsRequest(server string, params *OverviewControllerGetOverviewAgentsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/overview/agents")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRulesControllerGetRulesRequest generates requests for RulesControllerGetRules
func NewRulesControllerGetRulesRequest(server string, params *RulesControllerGetRulesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rules")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.RuleIds != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "rule_ids", *params.RuleIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "status", *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Group != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "group", *params.Group); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Level != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "level", *params.Level); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filename != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "filename", *params.Filename); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "relative_dirname", *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PciDss != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pci_dss", *params.PciDss); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Gdpr != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "gdpr", *params.Gdpr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Gpg13 != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "gpg13", *params.Gpg13); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hipaa != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "hipaa", *params.Hipaa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Nist80053 != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "nist-800-53", *params.Nist80053); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tsc != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tsc", *params.Tsc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Mitre != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "mitre", *params.Mitre); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRulesControllerGetRulesFilesRequest generates requests for RulesControllerGetRulesFiles
func NewRulesControllerGetRulesFilesRequest(server string, params *RulesControllerGetRulesFilesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rules/files")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelativeDirname != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "relative_dirname", *params.RelativeDirname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filename != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "filename", *params.Filename); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "status", *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRulesControllerGetDownloadFileRequest generates requests for RulesControllerGetDownloadFile
func NewRulesControllerGetDownloadFileRequest(server string, filename DownloadFile, params *RulesControllerGetDownloadFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "filename", filename)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rules/files/%s/download", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRulesControllerGetRulesGroupsRequest generates requests for RulesControllerGetRulesGroups
func NewRulesControllerGetRulesGroupsRequest(server string, params *RulesControllerGetRulesGroupsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rules/groups")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRulesControllerGetRulesRequirementRequest generates requests for RulesControllerGetRulesRequirement
func NewRulesControllerGetRulesRequirementRequest(server string, requirement RuleRequirement, params *RulesControllerGetRulesRequirementParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "requirement", requirement)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rules/requirement/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScaControllerGetScaAgentRequest generates requests for ScaControllerGetScaAgent
func NewScaControllerGetScaAgentRequest(server string, agentId AgentId, params *ScaControllerGetScaAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sca/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "name", *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "description", *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.References != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "references", *params.References); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScaControllerGetScaChecksRequest generates requests for ScaControllerGetScaChecks
func NewScaControllerGetScaChecksRequest(server string, agentId AgentId, policyId PolicyId, params *ScaControllerGetScaChecksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "policy_id", policyId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sca/%s/checks/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Title != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "title", *params.Title); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "description", *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Rationale != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "rationale", *params.Rationale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Remediation != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "remediation", *params.Remediation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Command != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "command", *params.Command); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "status", *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Reason != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "reason", *params.Reason); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.File != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "file", *params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Process != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "process", *params.Process); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Directory != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "directory", *params.Directory); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Registry != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "registry", *params.Registry); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.References != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "references", *params.References); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Result != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "result", *params.Result); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Condition != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "condition", *params.Condition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerGetRbacActionsRequest generates requests for SecurityControllerGetRbacActions
func NewSecurityControllerGetRbacActionsRequest(server string, params *SecurityControllerGetRbacActionsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/actions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Endpoint != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "endpoint", *params.Endpoint); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerDeleteSecurityConfigRequest generates requests for SecurityControllerDeleteSecurityConfig
func NewSecurityControllerDeleteSecurityConfigRequest(server string, params *SecurityControllerDeleteSecurityConfigParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/config")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerGetSecurityConfigRequest generates requests for SecurityControllerGetSecurityConfig
func NewSecurityControllerGetSecurityConfigRequest(server string, params *SecurityControllerGetSecurityConfigParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/config")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerPutSecurityConfigRequest calls the generic SecurityControllerPutSecurityConfig builder with application/json body
func NewSecurityControllerPutSecurityConfigRequest(server string, params *SecurityControllerPutSecurityConfigParams, body SecurityControllerPutSecurityConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecurityControllerPutSecurityConfigRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSecurityControllerPutSecurityConfigRequestWithBody generates requests for SecurityControllerPutSecurityConfig with any type of body
func NewSecurityControllerPutSecurityConfigRequestWithBody(server string, params *SecurityControllerPutSecurityConfigParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/config")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewSecurityControllerRemovePoliciesRequest generates requests for SecurityControllerRemovePolicies
func NewSecurityControllerRemovePoliciesRequest(server string, params *SecurityControllerRemovePoliciesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/policies")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "policy_ids", params.PolicyIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerGetPoliciesRequest generates requests for SecurityControllerGetPolicies
func NewSecurityControllerGetPoliciesRequest(server string, params *SecurityControllerGetPoliciesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/policies")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PolicyIds != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "policy_ids", *params.PolicyIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerAddPolicyRequest calls the generic SecurityControllerAddPolicy builder with application/json body
func NewSecurityControllerAddPolicyRequest(server string, params *SecurityControllerAddPolicyParams, body SecurityControllerAddPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecurityControllerAddPolicyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSecurityControllerAddPolicyRequestWithBody generates requests for SecurityControllerAddPolicy with any type of body
func NewSecurityControllerAddPolicyRequestWithBody(server string, params *SecurityControllerAddPolicyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/policies")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewSecurityControllerUpdatePolicyRequest calls the generic SecurityControllerUpdatePolicy builder with application/json body
func NewSecurityControllerUpdatePolicyRequest(server string, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, body SecurityControllerUpdatePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecurityControllerUpdatePolicyRequestWithBody(server, policyId, params, "application/json", bodyReader)
}

// NewSecurityControllerUpdatePolicyRequestWithBody generates requests for SecurityControllerUpdatePolicy with any type of body
func NewSecurityControllerUpdatePolicyRequestWithBody(server string, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "policy_id", policyId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/policies/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewSecurityControllerGetRbacResourcesRequest generates requests for SecurityControllerGetRbacResources
func NewSecurityControllerGetRbacResourcesRequest(server string, params *SecurityControllerGetRbacResourcesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/resources")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Resource != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "resource", *params.Resource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerRemoveRolesRequest generates requests for SecurityControllerRemoveRoles
func NewSecurityControllerRemoveRolesRequest(server string, params *SecurityControllerRemoveRolesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/roles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "role_ids", params.RoleIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerGetRolesRequest generates requests for SecurityControllerGetRoles
func NewSecurityControllerGetRolesRequest(server string, params *SecurityControllerGetRolesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/roles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.RoleIds != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "role_ids", *params.RoleIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerAddRoleRequest calls the generic SecurityControllerAddRole builder with application/json body
func NewSecurityControllerAddRoleRequest(server string, params *SecurityControllerAddRoleParams, body SecurityControllerAddRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecurityControllerAddRoleRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSecurityControllerAddRoleRequestWithBody generates requests for SecurityControllerAddRole with any type of body
func NewSecurityControllerAddRoleRequestWithBody(server string, params *SecurityControllerAddRoleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/roles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewSecurityControllerUpdateRoleRequest calls the generic SecurityControllerUpdateRole builder with application/json body
func NewSecurityControllerUpdateRoleRequest(server string, roleId RoleId, params *SecurityControllerUpdateRoleParams, body SecurityControllerUpdateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecurityControllerUpdateRoleRequestWithBody(server, roleId, params, "application/json", bodyReader)
}

// NewSecurityControllerUpdateRoleRequestWithBody generates requests for SecurityControllerUpdateRole with any type of body
func NewSecurityControllerUpdateRoleRequestWithBody(server string, roleId RoleId, params *SecurityControllerUpdateRoleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "role_id", roleId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/roles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewSecurityControllerRemoveRolePolicyRequest generates requests for SecurityControllerRemoveRolePolicy
func NewSecurityControllerRemoveRolePolicyRequest(server string, roleId RoleId, params *SecurityControllerRemoveRolePolicyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "role_id", roleId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/roles/%s/policies", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "policy_ids", params.PolicyIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerSetRolePolicyRequest generates requests for SecurityControllerSetRolePolicy
func NewSecurityControllerSetRolePolicyRequest(server string, roleId RoleId, params *SecurityControllerSetRolePolicyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "role_id", roleId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/roles/%s/policies", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "policy_ids", params.PolicyIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Position != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "position", *params.Position); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerRemoveRoleRuleRequest generates requests for SecurityControllerRemoveRoleRule
func NewSecurityControllerRemoveRoleRuleRequest(server string, roleId RoleId, params *SecurityControllerRemoveRoleRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "role_id", roleId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/roles/%s/rules", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "rule_ids", params.RuleIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerSetRoleRuleRequest generates requests for SecurityControllerSetRoleRule
func NewSecurityControllerSetRoleRuleRequest(server string, roleId RoleId, params *SecurityControllerSetRoleRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "role_id", roleId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/roles/%s/rules", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "rule_ids", params.RuleIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerRemoveRulesRequest generates requests for SecurityControllerRemoveRules
func NewSecurityControllerRemoveRulesRequest(server string, params *SecurityControllerRemoveRulesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/rules")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "rule_ids", params.RuleIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerGetRulesRequest generates requests for SecurityControllerGetRules
func NewSecurityControllerGetRulesRequest(server string, params *SecurityControllerGetRulesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/rules")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.RuleIds != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "rule_ids", *params.RuleIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerAddRuleRequest calls the generic SecurityControllerAddRule builder with application/json body
func NewSecurityControllerAddRuleRequest(server string, params *SecurityControllerAddRuleParams, body SecurityControllerAddRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecurityControllerAddRuleRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSecurityControllerAddRuleRequestWithBody generates requests for SecurityControllerAddRule with any type of body
func NewSecurityControllerAddRuleRequestWithBody(server string, params *SecurityControllerAddRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/rules")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewSecurityControllerUpdateRuleRequest calls the generic SecurityControllerUpdateRule builder with application/json body
func NewSecurityControllerUpdateRuleRequest(server string, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, body SecurityControllerUpdateRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecurityControllerUpdateRuleRequestWithBody(server, ruleId, params, "application/json", bodyReader)
}

// NewSecurityControllerUpdateRuleRequestWithBody generates requests for SecurityControllerUpdateRule with any type of body
func NewSecurityControllerUpdateRuleRequestWithBody(server string, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "rule_id", ruleId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/rules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewSecurityControllerLogoutUserRequest generates requests for SecurityControllerLogoutUser
func NewSecurityControllerLogoutUserRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/user/authenticate")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerLoginUserRequest generates requests for SecurityControllerLoginUser
func NewSecurityControllerLoginUserRequest(server string, params *SecurityControllerLoginUserParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/user/authenticate")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Raw != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "raw", *params.Raw); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerLoginUserRunAsRequest calls the generic SecurityControllerLoginUserRunAs builder with application/json body
func NewSecurityControllerLoginUserRunAsRequest(server string, params *SecurityControllerLoginUserParams, body SecurityControllerLoginUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecurityControllerLoginUserRunAsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSecurityControllerLoginUserRunAsRequestWithBody generates requests for SecurityControllerLoginUserRunAs with any type of body
func NewSecurityControllerLoginUserRunAsRequestWithBody(server string, params *SecurityControllerLoginUserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/user/authenticate/run_as")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Raw != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "raw", *params.Raw); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewSecurityControllerRevokeAllTokensRequest generates requests for SecurityControllerRevokeAllTokens
func NewSecurityControllerRevokeAllTokensRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/user/revoke")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerDeleteUsersRequest generates requests for SecurityControllerDeleteUsers
func NewSecurityControllerDeleteUsersRequest(server string, params *SecurityControllerDeleteUsersParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/users")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "user_ids", params.UserIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerGetUsersRequest generates requests for SecurityControllerGetUsers
func NewSecurityControllerGetUsersRequest(server string, params *SecurityControllerGetUsersParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/users")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.UserIds != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "user_ids", *params.UserIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerCreateUserRequest calls the generic SecurityControllerCreateUser builder with application/json body
func NewSecurityControllerCreateUserRequest(server string, params *SecurityControllerCreateUserParams, body SecurityControllerCreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecurityControllerCreateUserRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSecurityControllerCreateUserRequestWithBody generates requests for SecurityControllerCreateUser with any type of body
func NewSecurityControllerCreateUserRequestWithBody(server string, params *SecurityControllerCreateUserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/users")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewSecurityControllerGetUserMeRequest generates requests for SecurityControllerGetUserMe
func NewSecurityControllerGetUserMeRequest(server string, params *SecurityControllerGetUserMeParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/users/me")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerGetUserMePoliciesRequest generates requests for SecurityControllerGetUserMePolicies
func NewSecurityControllerGetUserMePoliciesRequest(server string, params *SecurityControllerGetUserMePoliciesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/users/me/policies")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerUpdateUserRequest calls the generic SecurityControllerUpdateUser builder with application/json body
func NewSecurityControllerUpdateUserRequest(server string, userId UserIdRequired, params *SecurityControllerUpdateUserParams, body SecurityControllerUpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecurityControllerUpdateUserRequestWithBody(server, userId, params, "application/json", bodyReader)
}

// NewSecurityControllerUpdateUserRequestWithBody generates requests for SecurityControllerUpdateUser with any type of body
func NewSecurityControllerUpdateUserRequestWithBody(server string, userId UserIdRequired, params *SecurityControllerUpdateUserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "user_id", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/users/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewSecurityControllerRemoveUserRoleRequest generates requests for SecurityControllerRemoveUserRole
func NewSecurityControllerRemoveUserRoleRequest(server string, userId UserIdRequired, params *SecurityControllerRemoveUserRoleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "user_id", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/users/%s/roles", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "role_ids", params.RoleIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecurityControllerSetUserRoleRequest generates requests for SecurityControllerSetUserRole
func NewSecurityControllerSetUserRoleRequest(server string, userId UserIdRequired, params *SecurityControllerSetUserRoleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "user_id", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security/users/%s/roles", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "role_ids", params.RoleIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Position != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "position", *params.Position); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyscheckControllerPutSyscheckRequest generates requests for SyscheckControllerPutSyscheck
func NewSyscheckControllerPutSyscheckRequest(server string, params *SyscheckControllerPutSyscheckParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/syscheck")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.AgentsList != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "agents_list", *params.AgentsList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyscheckControllerDeleteSyscheckAgentRequest generates requests for SyscheckControllerDeleteSyscheckAgent
func NewSyscheckControllerDeleteSyscheckAgentRequest(server string, agentId AgentId, params *SyscheckControllerDeleteSyscheckAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/syscheck/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyscheckControllerGetSyscheckAgentRequest generates requests for SyscheckControllerGetSyscheckAgent
func NewSyscheckControllerGetSyscheckAgentRequest(server string, agentId AgentId, params *SyscheckControllerGetSyscheckAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/syscheck/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.File != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "file", *params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "type", *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Summary != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "summary", *params.Summary); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Md5 != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "md5", *params.Md5); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha1 != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sha1", *params.Sha1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sha256 != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sha256", *params.Sha256); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hash != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "hash", *params.Hash); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distinct != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "distinct", *params.Distinct); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyscheckControllerGetLastScanAgentRequest generates requests for SyscheckControllerGetLastScanAgent
func NewSyscheckControllerGetLastScanAgentRequest(server string, agentId AgentId, params *SyscheckControllerGetLastScanAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/syscheck/%s/last_scan", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyscollectorControllerGetHardwareInfoRequest generates requests for SyscollectorControllerGetHardwareInfo
func NewSyscollectorControllerGetHardwareInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetHardwareInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/syscollector/%s/hardware", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyscollectorControllerGetHotfixInfoRequest generates requests for SyscollectorControllerGetHotfixInfo
func NewSyscollectorControllerGetHotfixInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetHotfixInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/syscollector/%s/hotfixes", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hotfix != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "hotfix", *params.Hotfix); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyscollectorControllerGetNetworkAddressInfoRequest generates requests for SyscollectorControllerGetNetworkAddressInfo
func NewSyscollectorControllerGetNetworkAddressInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetNetworkAddressInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/syscollector/%s/netaddr", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Iface != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "iface", *params.Iface); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Proto != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "proto", *params.Proto); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Address != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "address", *params.Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Broadcast != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "broadcast", *params.Broadcast); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Netmask != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "netmask", *params.Netmask); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyscollectorControllerGetNetworkInterfaceInfoRequest generates requests for SyscollectorControllerGetNetworkInterfaceInfo
func NewSyscollectorControllerGetNetworkInterfaceInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetNetworkInterfaceInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/syscollector/%s/netiface", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "name", *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Adapter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "adapter", *params.Adapter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "type", *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "state", *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Mtu != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "mtu", *params.Mtu); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxPackets != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tx.packets", *params.TxPackets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxPackets != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "rx.packets", *params.RxPackets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxBytes != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tx.bytes", *params.TxBytes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxBytes != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "rx.bytes", *params.RxBytes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxErrors != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tx.errors", *params.TxErrors); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxErrors != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "rx.errors", *params.RxErrors); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxDropped != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tx.dropped", *params.TxDropped); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RxDropped != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "rx.dropped", *params.RxDropped); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyscollectorControllerGetNetworkProtocolInfoRequest generates requests for SyscollectorControllerGetNetworkProtocolInfo
func NewSyscollectorControllerGetNetworkProtocolInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetNetworkProtocolInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/syscollector/%s/netproto", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Iface != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "iface", *params.Iface); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "type", *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Gateway != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "gateway", *params.Gateway); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Dhcp != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "dhcp", *params.Dhcp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyscollectorControllerGetOsInfoRequest generates requests for SyscollectorControllerGetOsInfo
func NewSyscollectorControllerGetOsInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetOsInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/syscollector/%s/os", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyscollectorControllerGetPackagesInfoRequest generates requests for SyscollectorControllerGetPackagesInfo
func NewSyscollectorControllerGetPackagesInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetPackagesInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/syscollector/%s/packages", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Vendor != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "vendor", *params.Vendor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "name", *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Architecture != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "architecture", *params.Architecture); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "format", *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "version", *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyscollectorControllerGetPortsInfoRequest generates requests for SyscollectorControllerGetPortsInfo
func NewSyscollectorControllerGetPortsInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetPortsInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/syscollector/%s/ports", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pid != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pid", *params.Pid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Protocol != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "protocol", *params.Protocol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LocalIp != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "local.ip", *params.LocalIp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LocalPort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "local.port", *params.LocalPort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RemoteIp != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "remote.ip", *params.RemoteIp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TxQueue != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tx_queue", *params.TxQueue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "state", *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Process != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "process", *params.Process); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyscollectorControllerGetProcessesInfoRequest generates requests for SyscollectorControllerGetProcessesInfo
func NewSyscollectorControllerGetProcessesInfoRequest(server string, agentId AgentId, params *SyscollectorControllerGetProcessesInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "agent_id", agentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/syscollector/%s/processes", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Pretty != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pretty", *params.Pretty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WaitForComplete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "wait_for_complete", *params.WaitForComplete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "select", *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pid != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pid", *params.Pid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "state", *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ppid != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ppid", *params.Ppid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Egroup != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "egroup", *params.Egroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Euser != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "euser", *params.Euser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fgroup != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "fgroup", *params.Fgroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "name", *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Nlwp != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "nlwp", *params.Nlwp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pgrp != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pgrp", *params.Pgrp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Priority != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "priority", *params.Priority); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Rgroup != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "rgroup", *params.Rgroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ruser != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ruser", *params.Ruser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sgroup != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sgroup", *params.Sgroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Suser != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "suser", *params.Suser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "q", *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
	Lazy bool
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client, false}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DefaultControllerDefaultInfo request
	DefaultControllerDefaultInfoWithResponse(ctx context.Context, params *DefaultControllerDefaultInfoParams) (*DefaultControllerDefaultInfoResponse, error)

	// ActiveResponseControllerRunCommand request  with any body
	ActiveResponseControllerRunCommandWithBodyWithResponse(ctx context.Context, params *ActiveResponseControllerRunCommandParams, contentType string, body io.Reader) (*ActiveResponseControllerRunCommandResponse, error)

	ActiveResponseControllerRunCommandWithResponse(ctx context.Context, params *ActiveResponseControllerRunCommandParams, body ActiveResponseControllerRunCommandJSONRequestBody) (*ActiveResponseControllerRunCommandResponse, error)

	// AgentsControllerDeleteAgents request
	AgentsControllerDeleteAgentsWithResponse(ctx context.Context, params *AgentsControllerDeleteAgentsParams) (*AgentsControllerDeleteAgentsResponse, error)

	// AgentsControllerGetAgents request
	AgentsControllerGetAgentsWithResponse(ctx context.Context, params *AgentsControllerGetAgentsParams) (*AgentsControllerGetAgentsResponse, error)

	// AgentsControllerAddAgent request  with any body
	AgentsControllerAddAgentWithBodyWithResponse(ctx context.Context, params *AgentsControllerAddAgentParams, contentType string, body io.Reader) (*AgentsControllerAddAgentResponse, error)

	AgentsControllerAddAgentWithResponse(ctx context.Context, params *AgentsControllerAddAgentParams, body AgentsControllerAddAgentJSONRequestBody) (*AgentsControllerAddAgentResponse, error)

	// AgentsControllerDeleteMultipleAgentSingleGroup request
	AgentsControllerDeleteMultipleAgentSingleGroupWithResponse(ctx context.Context, params *AgentsControllerDeleteMultipleAgentSingleGroupParams) (*AgentsControllerDeleteMultipleAgentSingleGroupResponse, error)

	// AgentsControllerPutMultipleAgentSingleGroup request
	AgentsControllerPutMultipleAgentSingleGroupWithResponse(ctx context.Context, params *AgentsControllerPutMultipleAgentSingleGroupParams) (*AgentsControllerPutMultipleAgentSingleGroupResponse, error)

	// AgentsControllerRestartAgentsByGroup request
	AgentsControllerRestartAgentsByGroupWithResponse(ctx context.Context, groupId GroupId, params *AgentsControllerRestartAgentsByGroupParams) (*AgentsControllerRestartAgentsByGroupResponse, error)

	// AgentsControllerInsertAgent request  with any body
	AgentsControllerInsertAgentWithBodyWithResponse(ctx context.Context, params *AgentsControllerInsertAgentParams, contentType string, body io.Reader) (*AgentsControllerInsertAgentResponse, error)

	AgentsControllerInsertAgentWithResponse(ctx context.Context, params *AgentsControllerInsertAgentParams, body AgentsControllerInsertAgentJSONRequestBody) (*AgentsControllerInsertAgentResponse, error)

	// AgentsControllerPostNewAgent request
	AgentsControllerPostNewAgentWithResponse(ctx context.Context, params *AgentsControllerPostNewAgentParams) (*AgentsControllerPostNewAgentResponse, error)

	// AgentsControllerGetAgentNoGroup request
	AgentsControllerGetAgentNoGroupWithResponse(ctx context.Context, params *AgentsControllerGetAgentNoGroupParams) (*AgentsControllerGetAgentNoGroupResponse, error)

	// AgentsControllerRestartAgentsByNode request
	AgentsControllerRestartAgentsByNodeWithResponse(ctx context.Context, nodeId NodeId, params *AgentsControllerRestartAgentsByNodeParams) (*AgentsControllerRestartAgentsByNodeResponse, error)

	// AgentsControllerGetAgentOutdated request
	AgentsControllerGetAgentOutdatedWithResponse(ctx context.Context, params *AgentsControllerGetAgentOutdatedParams) (*AgentsControllerGetAgentOutdatedResponse, error)

	// AgentsControllerRestartAgents request
	AgentsControllerRestartAgentsWithResponse(ctx context.Context, params *AgentsControllerRestartAgentsParams) (*AgentsControllerRestartAgentsResponse, error)

	// AgentsControllerGetAgentFields request
	AgentsControllerGetAgentFieldsWithResponse(ctx context.Context, params *AgentsControllerGetAgentFieldsParams) (*AgentsControllerGetAgentFieldsResponse, error)

	// AgentsControllerGetAgentSummaryOs request
	AgentsControllerGetAgentSummaryOsWithResponse(ctx context.Context, params *AgentsControllerGetAgentSummaryOsParams) (*AgentsControllerGetAgentSummaryOsResponse, error)

	// AgentsControllerGetAgentSummaryStatus request
	AgentsControllerGetAgentSummaryStatusWithResponse(ctx context.Context, params *AgentsControllerGetAgentSummaryStatusParams) (*AgentsControllerGetAgentSummaryStatusResponse, error)

	// AgentsControllerGetAgentConfig request
	AgentsControllerGetAgentConfigWithResponse(ctx context.Context, agentId AgentId, component Component, configuration Configuration, params *AgentsControllerGetAgentConfigParams) (*AgentsControllerGetAgentConfigResponse, error)

	// AgentsControllerDeleteSingleAgentMultipleGroups request
	AgentsControllerDeleteSingleAgentMultipleGroupsWithResponse(ctx context.Context, agentId AgentId, params *AgentsControllerDeleteSingleAgentMultipleGroupsParams) (*AgentsControllerDeleteSingleAgentMultipleGroupsResponse, error)

	// AgentsControllerGetSyncAgent request
	AgentsControllerGetSyncAgentWithResponse(ctx context.Context, agentId AgentId, params *AgentsControllerGetSyncAgentParams) (*AgentsControllerGetSyncAgentResponse, error)

	// AgentsControllerDeleteSingleAgentSingleGroup request
	AgentsControllerDeleteSingleAgentSingleGroupWithResponse(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentsControllerDeleteSingleAgentSingleGroupParams) (*AgentsControllerDeleteSingleAgentSingleGroupResponse, error)

	// AgentsControllerPutAgentSingleGroup request
	AgentsControllerPutAgentSingleGroupWithResponse(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentsControllerPutAgentSingleGroupParams) (*AgentsControllerPutAgentSingleGroupResponse, error)

	// AgentsControllerGetAgentKey request
	AgentsControllerGetAgentKeyWithResponse(ctx context.Context, agentId AgentId, params *AgentsControllerGetAgentKeyParams) (*AgentsControllerGetAgentKeyResponse, error)

	// AgentsControllerRestartAgent request
	AgentsControllerRestartAgentWithResponse(ctx context.Context, agentId AgentId, params *AgentsControllerRestartAgentParams) (*AgentsControllerRestartAgentResponse, error)

	// AgentsControllerPutUpgradeAgent request
	AgentsControllerPutUpgradeAgentWithResponse(ctx context.Context, agentId AgentId, params *AgentsControllerPutUpgradeAgentParams) (*AgentsControllerPutUpgradeAgentResponse, error)

	// AgentsControllerPutUpgradeCustomAgent request
	AgentsControllerPutUpgradeCustomAgentWithResponse(ctx context.Context, agentId AgentId, params *AgentsControllerPutUpgradeCustomAgentParams) (*AgentsControllerPutUpgradeCustomAgentResponse, error)

	// AgentsControllerGetAgentUpgrade request
	AgentsControllerGetAgentUpgradeWithResponse(ctx context.Context, agentId AgentId, params *AgentsControllerGetAgentUpgradeParams) (*AgentsControllerGetAgentUpgradeResponse, error)

	// CiscatControllerGetAgentsCiscatResults request
	CiscatControllerGetAgentsCiscatResultsWithResponse(ctx context.Context, agentId AgentId, params *CiscatControllerGetAgentsCiscatResultsParams) (*CiscatControllerGetAgentsCiscatResultsResponse, error)

	// ClusterControllerGetApiConfig request
	ClusterControllerGetApiConfigWithResponse(ctx context.Context, params *ClusterControllerGetApiConfigParams) (*ClusterControllerGetApiConfigResponse, error)

	// ClusterControllerGetConfValidation request
	ClusterControllerGetConfValidationWithResponse(ctx context.Context, params *ClusterControllerGetConfValidationParams) (*ClusterControllerGetConfValidationResponse, error)

	// ClusterControllerGetHealthcheck request
	ClusterControllerGetHealthcheckWithResponse(ctx context.Context, params *ClusterControllerGetHealthcheckParams) (*ClusterControllerGetHealthcheckResponse, error)

	// ClusterControllerGetConfig request
	ClusterControllerGetConfigWithResponse(ctx context.Context, params *ClusterControllerGetConfigParams) (*ClusterControllerGetConfigResponse, error)

	// ClusterControllerGetClusterNode request
	ClusterControllerGetClusterNodeWithResponse(ctx context.Context, params *ClusterControllerGetClusterNodeParams) (*ClusterControllerGetClusterNodeResponse, error)

	// ClusterControllerGetClusterNodes request
	ClusterControllerGetClusterNodesWithResponse(ctx context.Context, params *ClusterControllerGetClusterNodesParams) (*ClusterControllerGetClusterNodesResponse, error)

	// ClusterControllerPutRestart request
	ClusterControllerPutRestartWithResponse(ctx context.Context, params *ClusterControllerPutRestartParams) (*ClusterControllerPutRestartResponse, error)

	// ClusterControllerGetStatus request
	ClusterControllerGetStatusWithResponse(ctx context.Context, params *ClusterControllerGetStatusParams) (*ClusterControllerGetStatusResponse, error)

	// ClusterControllerGetConfigurationNode request
	ClusterControllerGetConfigurationNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetConfigurationNodeParams) (*ClusterControllerGetConfigurationNodeResponse, error)

	// ClusterControllerGetNodeConfig request
	ClusterControllerGetNodeConfigWithResponse(ctx context.Context, nodeId NodeId, component Component, configuration Configuration, params *ClusterControllerGetNodeConfigParams) (*ClusterControllerGetNodeConfigResponse, error)

	// ClusterControllerDeleteFilesNode request
	ClusterControllerDeleteFilesNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerDeleteFilesNodeParams) (*ClusterControllerDeleteFilesNodeResponse, error)

	// ClusterControllerGetFilesNode request
	ClusterControllerGetFilesNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetFilesNodeParams) (*ClusterControllerGetFilesNodeResponse, error)

	// ClusterControllerPutFilesNode request  with any body
	ClusterControllerPutFilesNodeWithBodyWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerPutFilesNodeParams, contentType string, body io.Reader) (*ClusterControllerPutFilesNodeResponse, error)

	// ClusterControllerGetInfoNode request
	ClusterControllerGetInfoNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetInfoNodeParams) (*ClusterControllerGetInfoNodeResponse, error)

	// ClusterControllerGetLogNode request
	ClusterControllerGetLogNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogNodeParams) (*ClusterControllerGetLogNodeResponse, error)

	// ClusterControllerGetLogSummaryNode request
	ClusterControllerGetLogSummaryNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogSummaryNodeParams) (*ClusterControllerGetLogSummaryNodeResponse, error)

	// ClusterControllerGetStatsNode request
	ClusterControllerGetStatsNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsNodeParams) (*ClusterControllerGetStatsNodeResponse, error)

	// ClusterControllerGetStatsAnalysisdNode request
	ClusterControllerGetStatsAnalysisdNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsAnalysisdNodeParams) (*ClusterControllerGetStatsAnalysisdNodeResponse, error)

	// ClusterControllerGetStatsHourlyNode request
	ClusterControllerGetStatsHourlyNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsHourlyNodeParams) (*ClusterControllerGetStatsHourlyNodeResponse, error)

	// ClusterControllerGetStatsRemotedNode request
	ClusterControllerGetStatsRemotedNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsRemotedNodeParams) (*ClusterControllerGetStatsRemotedNodeResponse, error)

	// ClusterControllerGetStatsWeeklyNode request
	ClusterControllerGetStatsWeeklyNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsWeeklyNodeParams) (*ClusterControllerGetStatsWeeklyNodeResponse, error)

	// ClusterControllerGetStatusNode request
	ClusterControllerGetStatusNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatusNodeParams) (*ClusterControllerGetStatusNodeResponse, error)

	// DecodersControllerGetDecoders request
	DecodersControllerGetDecodersWithResponse(ctx context.Context, params *DecodersControllerGetDecodersParams) (*DecodersControllerGetDecodersResponse, error)

	// DecodersControllerGetDecodersFiles request
	DecodersControllerGetDecodersFilesWithResponse(ctx context.Context, params *DecodersControllerGetDecodersFilesParams) (*DecodersControllerGetDecodersFilesResponse, error)

	// DecodersControllerGetDownloadFile request
	DecodersControllerGetDownloadFileWithResponse(ctx context.Context, filename DownloadFile, params *DecodersControllerGetDownloadFileParams) (*DecodersControllerGetDownloadFileResponse, error)

	// DecodersControllerGetDecodersParents request
	DecodersControllerGetDecodersParentsWithResponse(ctx context.Context, params *DecodersControllerGetDecodersParentsParams) (*DecodersControllerGetDecodersParentsResponse, error)

	// ExperimentalControllerGetCisCatResults request
	ExperimentalControllerGetCisCatResultsWithResponse(ctx context.Context, params *ExperimentalControllerGetCisCatResultsParams) (*ExperimentalControllerGetCisCatResultsResponse, error)

	// ExperimentalControllerClearSyscheckDatabase request
	ExperimentalControllerClearSyscheckDatabaseWithResponse(ctx context.Context, params *ExperimentalControllerClearSyscheckDatabaseParams) (*ExperimentalControllerClearSyscheckDatabaseResponse, error)

	// ExperimentalControllerGetHardwareInfo request
	ExperimentalControllerGetHardwareInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetHardwareInfoParams) (*ExperimentalControllerGetHardwareInfoResponse, error)

	// ExperimentalControllerGetHotfixesInfo request
	ExperimentalControllerGetHotfixesInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetHotfixesInfoParams) (*ExperimentalControllerGetHotfixesInfoResponse, error)

	// ExperimentalControllerGetNetworkAddressInfo request
	ExperimentalControllerGetNetworkAddressInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetNetworkAddressInfoParams) (*ExperimentalControllerGetNetworkAddressInfoResponse, error)

	// ExperimentalControllerGetNetworkInterfaceInfo request
	ExperimentalControllerGetNetworkInterfaceInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetNetworkInterfaceInfoParams) (*ExperimentalControllerGetNetworkInterfaceInfoResponse, error)

	// ExperimentalControllerGetNetworkProtocolInfo request
	ExperimentalControllerGetNetworkProtocolInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetNetworkProtocolInfoParams) (*ExperimentalControllerGetNetworkProtocolInfoResponse, error)

	// ExperimentalControllerGetOsInfo request
	ExperimentalControllerGetOsInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetOsInfoParams) (*ExperimentalControllerGetOsInfoResponse, error)

	// ExperimentalControllerGetPackagesInfo request
	ExperimentalControllerGetPackagesInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetPackagesInfoParams) (*ExperimentalControllerGetPackagesInfoResponse, error)

	// ExperimentalControllerGetPortsInfo request
	ExperimentalControllerGetPortsInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetPortsInfoParams) (*ExperimentalControllerGetPortsInfoResponse, error)

	// ExperimentalControllerGetProcessesInfo request
	ExperimentalControllerGetProcessesInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetProcessesInfoParams) (*ExperimentalControllerGetProcessesInfoResponse, error)

	// AgentsControllerDeleteGroups request
	AgentsControllerDeleteGroupsWithResponse(ctx context.Context, params *AgentsControllerDeleteGroupsParams) (*AgentsControllerDeleteGroupsResponse, error)

	// AgentsControllerGetListGroup request
	AgentsControllerGetListGroupWithResponse(ctx context.Context, params *AgentsControllerGetListGroupParams) (*AgentsControllerGetListGroupResponse, error)

	// AgentsControllerPostGroup request
	AgentsControllerPostGroupWithResponse(ctx context.Context, params *AgentsControllerPostGroupParams) (*AgentsControllerPostGroupResponse, error)

	// AgentsControllerGetAgentsInGroup request
	AgentsControllerGetAgentsInGroupWithResponse(ctx context.Context, groupId GroupId, params *AgentsControllerGetAgentsInGroupParams) (*AgentsControllerGetAgentsInGroupResponse, error)

	// AgentsControllerGetGroupConfig request
	AgentsControllerGetGroupConfigWithResponse(ctx context.Context, groupId GroupId, params *AgentsControllerGetGroupConfigParams) (*AgentsControllerGetGroupConfigResponse, error)

	// AgentsControllerPutGroupConfig request  with any body
	AgentsControllerPutGroupConfigWithBodyWithResponse(ctx context.Context, groupId GroupId, params *AgentsControllerPutGroupConfigParams, contentType string, body io.Reader) (*AgentsControllerPutGroupConfigResponse, error)

	// AgentsControllerGetGroupFiles request
	AgentsControllerGetGroupFilesWithResponse(ctx context.Context, groupId GroupId, params *AgentsControllerGetGroupFilesParams) (*AgentsControllerGetGroupFilesResponse, error)

	// AgentsControllerGetGroupFileJson request
	AgentsControllerGetGroupFileJsonWithResponse(ctx context.Context, groupId GroupId, fileName FileName, params *AgentsControllerGetGroupFileJsonParams) (*AgentsControllerGetGroupFileJsonResponse, error)

	// AgentsControllerGetGroupFileXml request
	AgentsControllerGetGroupFileXmlWithResponse(ctx context.Context, groupId GroupId, fileName FileName, params *AgentsControllerGetGroupFileXmlParams) (*AgentsControllerGetGroupFileXmlResponse, error)

	// ListsControllerGetLists request
	ListsControllerGetListsWithResponse(ctx context.Context, params *ListsControllerGetListsParams) (*ListsControllerGetListsResponse, error)

	// ListsControllerGetListsFiles request
	ListsControllerGetListsFilesWithResponse(ctx context.Context, params *ListsControllerGetListsFilesParams) (*ListsControllerGetListsFilesResponse, error)

	// ManagerControllerGetApiConfig request
	ManagerControllerGetApiConfigWithResponse(ctx context.Context, params *ManagerControllerGetApiConfigParams) (*ManagerControllerGetApiConfigResponse, error)

	// ManagerControllerGetConfiguration request
	ManagerControllerGetConfigurationWithResponse(ctx context.Context, params *ManagerControllerGetConfigurationParams) (*ManagerControllerGetConfigurationResponse, error)

	// ManagerControllerGetConfValidation request
	ManagerControllerGetConfValidationWithResponse(ctx context.Context, params *ManagerControllerGetConfValidationParams) (*ManagerControllerGetConfValidationResponse, error)

	// ManagerControllerGetManagerConfigOndemand request
	ManagerControllerGetManagerConfigOndemandWithResponse(ctx context.Context, component Component, configuration Configuration, params *ManagerControllerGetManagerConfigOndemandParams) (*ManagerControllerGetManagerConfigOndemandResponse, error)

	// ManagerControllerDeleteFiles request
	ManagerControllerDeleteFilesWithResponse(ctx context.Context, params *ManagerControllerDeleteFilesParams) (*ManagerControllerDeleteFilesResponse, error)

	// ManagerControllerGetFiles request
	ManagerControllerGetFilesWithResponse(ctx context.Context, params *ManagerControllerGetFilesParams) (*ManagerControllerGetFilesResponse, error)

	// ManagerControllerPutFiles request  with any body
	ManagerControllerPutFilesWithBodyWithResponse(ctx context.Context, params *ManagerControllerPutFilesParams, contentType string, body io.Reader) (*ManagerControllerPutFilesResponse, error)

	// ManagerControllerGetInfo request
	ManagerControllerGetInfoWithResponse(ctx context.Context, params *ManagerControllerGetInfoParams) (*ManagerControllerGetInfoResponse, error)

	// ManagerControllerGetLog request
	ManagerControllerGetLogWithResponse(ctx context.Context, params *ManagerControllerGetLogParams) (*ManagerControllerGetLogResponse, error)

	// ManagerControllerGetLogSummary request
	ManagerControllerGetLogSummaryWithResponse(ctx context.Context, params *ManagerControllerGetLogSummaryParams) (*ManagerControllerGetLogSummaryResponse, error)

	// ManagerControllerPutRestart request
	ManagerControllerPutRestartWithResponse(ctx context.Context, params *ManagerControllerPutRestartParams) (*ManagerControllerPutRestartResponse, error)

	// ManagerControllerGetStats request
	ManagerControllerGetStatsWithResponse(ctx context.Context, params *ManagerControllerGetStatsParams) (*ManagerControllerGetStatsResponse, error)

	// ManagerControllerGetStatsAnalysisd request
	ManagerControllerGetStatsAnalysisdWithResponse(ctx context.Context, params *ManagerControllerGetStatsAnalysisdParams) (*ManagerControllerGetStatsAnalysisdResponse, error)

	// ManagerControllerGetStatsHourly request
	ManagerControllerGetStatsHourlyWithResponse(ctx context.Context, params *ManagerControllerGetStatsHourlyParams) (*ManagerControllerGetStatsHourlyResponse, error)

	// ManagerControllerGetStatsRemoted request
	ManagerControllerGetStatsRemotedWithResponse(ctx context.Context, params *ManagerControllerGetStatsRemotedParams) (*ManagerControllerGetStatsRemotedResponse, error)

	// ManagerControllerGetStatsWeekly request
	ManagerControllerGetStatsWeeklyWithResponse(ctx context.Context, params *ManagerControllerGetStatsWeeklyParams) (*ManagerControllerGetStatsWeeklyResponse, error)

	// ManagerControllerGetStatus request
	ManagerControllerGetStatusWithResponse(ctx context.Context, params *ManagerControllerGetStatusParams) (*ManagerControllerGetStatusResponse, error)

	// MitreControllerGetAttack request
	MitreControllerGetAttackWithResponse(ctx context.Context, params *MitreControllerGetAttackParams) (*MitreControllerGetAttackResponse, error)

	// OverviewControllerGetOverviewAgents request
	OverviewControllerGetOverviewAgentsWithResponse(ctx context.Context, params *OverviewControllerGetOverviewAgentsParams) (*OverviewControllerGetOverviewAgentsResponse, error)

	// RulesControllerGetRules request
	RulesControllerGetRulesWithResponse(ctx context.Context, params *RulesControllerGetRulesParams) (*RulesControllerGetRulesResponse, error)

	// RulesControllerGetRulesFiles request
	RulesControllerGetRulesFilesWithResponse(ctx context.Context, params *RulesControllerGetRulesFilesParams) (*RulesControllerGetRulesFilesResponse, error)

	// RulesControllerGetDownloadFile request
	RulesControllerGetDownloadFileWithResponse(ctx context.Context, filename DownloadFile, params *RulesControllerGetDownloadFileParams) (*RulesControllerGetDownloadFileResponse, error)

	// RulesControllerGetRulesGroups request
	RulesControllerGetRulesGroupsWithResponse(ctx context.Context, params *RulesControllerGetRulesGroupsParams) (*RulesControllerGetRulesGroupsResponse, error)

	// RulesControllerGetRulesRequirement request
	RulesControllerGetRulesRequirementWithResponse(ctx context.Context, requirement RuleRequirement, params *RulesControllerGetRulesRequirementParams) (*RulesControllerGetRulesRequirementResponse, error)

	// ScaControllerGetScaAgent request
	ScaControllerGetScaAgentWithResponse(ctx context.Context, agentId AgentId, params *ScaControllerGetScaAgentParams) (*ScaControllerGetScaAgentResponse, error)

	// ScaControllerGetScaChecks request
	ScaControllerGetScaChecksWithResponse(ctx context.Context, agentId AgentId, policyId PolicyId, params *ScaControllerGetScaChecksParams) (*ScaControllerGetScaChecksResponse, error)

	// SecurityControllerGetRbacActions request
	SecurityControllerGetRbacActionsWithResponse(ctx context.Context, params *SecurityControllerGetRbacActionsParams) (*SecurityControllerGetRbacActionsResponse, error)

	// SecurityControllerDeleteSecurityConfig request
	SecurityControllerDeleteSecurityConfigWithResponse(ctx context.Context, params *SecurityControllerDeleteSecurityConfigParams) (*SecurityControllerDeleteSecurityConfigResponse, error)

	// SecurityControllerGetSecurityConfig request
	SecurityControllerGetSecurityConfigWithResponse(ctx context.Context, params *SecurityControllerGetSecurityConfigParams) (*SecurityControllerGetSecurityConfigResponse, error)

	// SecurityControllerPutSecurityConfig request  with any body
	SecurityControllerPutSecurityConfigWithBodyWithResponse(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, contentType string, body io.Reader) (*SecurityControllerPutSecurityConfigResponse, error)

	SecurityControllerPutSecurityConfigWithResponse(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, body SecurityControllerPutSecurityConfigJSONRequestBody) (*SecurityControllerPutSecurityConfigResponse, error)

	// SecurityControllerRemovePolicies request
	SecurityControllerRemovePoliciesWithResponse(ctx context.Context, params *SecurityControllerRemovePoliciesParams) (*SecurityControllerRemovePoliciesResponse, error)

	// SecurityControllerGetPolicies request
	SecurityControllerGetPoliciesWithResponse(ctx context.Context, params *SecurityControllerGetPoliciesParams) (*SecurityControllerGetPoliciesResponse, error)

	// SecurityControllerAddPolicy request  with any body
	SecurityControllerAddPolicyWithBodyWithResponse(ctx context.Context, params *SecurityControllerAddPolicyParams, contentType string, body io.Reader) (*SecurityControllerAddPolicyResponse, error)

	SecurityControllerAddPolicyWithResponse(ctx context.Context, params *SecurityControllerAddPolicyParams, body SecurityControllerAddPolicyJSONRequestBody) (*SecurityControllerAddPolicyResponse, error)

	// SecurityControllerUpdatePolicy request  with any body
	SecurityControllerUpdatePolicyWithBodyWithResponse(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, contentType string, body io.Reader) (*SecurityControllerUpdatePolicyResponse, error)

	SecurityControllerUpdatePolicyWithResponse(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, body SecurityControllerUpdatePolicyJSONRequestBody) (*SecurityControllerUpdatePolicyResponse, error)

	// SecurityControllerGetRbacResources request
	SecurityControllerGetRbacResourcesWithResponse(ctx context.Context, params *SecurityControllerGetRbacResourcesParams) (*SecurityControllerGetRbacResourcesResponse, error)

	// SecurityControllerRemoveRoles request
	SecurityControllerRemoveRolesWithResponse(ctx context.Context, params *SecurityControllerRemoveRolesParams) (*SecurityControllerRemoveRolesResponse, error)

	// SecurityControllerGetRoles request
	SecurityControllerGetRolesWithResponse(ctx context.Context, params *SecurityControllerGetRolesParams) (*SecurityControllerGetRolesResponse, error)

	// SecurityControllerAddRole request  with any body
	SecurityControllerAddRoleWithBodyWithResponse(ctx context.Context, params *SecurityControllerAddRoleParams, contentType string, body io.Reader) (*SecurityControllerAddRoleResponse, error)

	SecurityControllerAddRoleWithResponse(ctx context.Context, params *SecurityControllerAddRoleParams, body SecurityControllerAddRoleJSONRequestBody) (*SecurityControllerAddRoleResponse, error)

	// SecurityControllerUpdateRole request  with any body
	SecurityControllerUpdateRoleWithBodyWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, contentType string, body io.Reader) (*SecurityControllerUpdateRoleResponse, error)

	SecurityControllerUpdateRoleWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, body SecurityControllerUpdateRoleJSONRequestBody) (*SecurityControllerUpdateRoleResponse, error)

	// SecurityControllerRemoveRolePolicy request
	SecurityControllerRemoveRolePolicyWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRolePolicyParams) (*SecurityControllerRemoveRolePolicyResponse, error)

	// SecurityControllerSetRolePolicy request
	SecurityControllerSetRolePolicyWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerSetRolePolicyParams) (*SecurityControllerSetRolePolicyResponse, error)

	// SecurityControllerRemoveRoleRule request
	SecurityControllerRemoveRoleRuleWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRoleRuleParams) (*SecurityControllerRemoveRoleRuleResponse, error)

	// SecurityControllerSetRoleRule request
	SecurityControllerSetRoleRuleWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerSetRoleRuleParams) (*SecurityControllerSetRoleRuleResponse, error)

	// SecurityControllerRemoveRules request
	SecurityControllerRemoveRulesWithResponse(ctx context.Context, params *SecurityControllerRemoveRulesParams) (*SecurityControllerRemoveRulesResponse, error)

	// SecurityControllerGetRules request
	SecurityControllerGetRulesWithResponse(ctx context.Context, params *SecurityControllerGetRulesParams) (*SecurityControllerGetRulesResponse, error)

	// SecurityControllerAddRule request  with any body
	SecurityControllerAddRuleWithBodyWithResponse(ctx context.Context, params *SecurityControllerAddRuleParams, contentType string, body io.Reader) (*SecurityControllerAddRuleResponse, error)

	SecurityControllerAddRuleWithResponse(ctx context.Context, params *SecurityControllerAddRuleParams, body SecurityControllerAddRuleJSONRequestBody) (*SecurityControllerAddRuleResponse, error)

	// SecurityControllerUpdateRule request  with any body
	SecurityControllerUpdateRuleWithBodyWithResponse(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, contentType string, body io.Reader) (*SecurityControllerUpdateRuleResponse, error)

	SecurityControllerUpdateRuleWithResponse(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, body SecurityControllerUpdateRuleJSONRequestBody) (*SecurityControllerUpdateRuleResponse, error)

	// SecurityControllerLogoutUser request
	SecurityControllerLogoutUserWithResponse(ctx context.Context) (*SecurityControllerLogoutUserResponse, error)

	// SecurityControllerLoginUser request
	SecurityControllerLoginUserWithResponse(ctx context.Context, params *SecurityControllerLoginUserParams) (*SecurityControllerLoginUserResponse, error)

	// SecurityControllerLoginUserRunAs request  with any body
	SecurityControllerLoginUserRunAsWithBodyWithResponse(ctx context.Context, params *SecurityControllerLoginUserParams, contentType string, body io.Reader) (*SecurityControllerLoginUserRunAsResponse, error)

	SecurityControllerLoginUserRunAsWithResponse(ctx context.Context, params *SecurityControllerLoginUserParams, body SecurityControllerLoginUserJSONRequestBody) (*SecurityControllerLoginUserRunAsResponse, error)

	// SecurityControllerRevokeAllTokens request
	SecurityControllerRevokeAllTokensWithResponse(ctx context.Context) (*SecurityControllerRevokeAllTokensResponse, error)

	// SecurityControllerDeleteUsers request
	SecurityControllerDeleteUsersWithResponse(ctx context.Context, params *SecurityControllerDeleteUsersParams) (*SecurityControllerDeleteUsersResponse, error)

	// SecurityControllerGetUsers request
	SecurityControllerGetUsersWithResponse(ctx context.Context, params *SecurityControllerGetUsersParams) (*SecurityControllerGetUsersResponse, error)

	// SecurityControllerCreateUser request  with any body
	SecurityControllerCreateUserWithBodyWithResponse(ctx context.Context, params *SecurityControllerCreateUserParams, contentType string, body io.Reader) (*SecurityControllerCreateUserResponse, error)

	SecurityControllerCreateUserWithResponse(ctx context.Context, params *SecurityControllerCreateUserParams, body SecurityControllerCreateUserJSONRequestBody) (*SecurityControllerCreateUserResponse, error)

	// SecurityControllerGetUserMe request
	SecurityControllerGetUserMeWithResponse(ctx context.Context, params *SecurityControllerGetUserMeParams) (*SecurityControllerGetUserMeResponse, error)

	// SecurityControllerGetUserMePolicies request
	SecurityControllerGetUserMePoliciesWithResponse(ctx context.Context, params *SecurityControllerGetUserMePoliciesParams) (*SecurityControllerGetUserMePoliciesResponse, error)

	// SecurityControllerUpdateUser request  with any body
	SecurityControllerUpdateUserWithBodyWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, contentType string, body io.Reader) (*SecurityControllerUpdateUserResponse, error)

	SecurityControllerUpdateUserWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, body SecurityControllerUpdateUserJSONRequestBody) (*SecurityControllerUpdateUserResponse, error)

	// SecurityControllerRemoveUserRole request
	SecurityControllerRemoveUserRoleWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerRemoveUserRoleParams) (*SecurityControllerRemoveUserRoleResponse, error)

	// SecurityControllerSetUserRole request
	SecurityControllerSetUserRoleWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerSetUserRoleParams) (*SecurityControllerSetUserRoleResponse, error)

	// SyscheckControllerPutSyscheck request
	SyscheckControllerPutSyscheckWithResponse(ctx context.Context, params *SyscheckControllerPutSyscheckParams) (*SyscheckControllerPutSyscheckResponse, error)

	// SyscheckControllerDeleteSyscheckAgent request
	SyscheckControllerDeleteSyscheckAgentWithResponse(ctx context.Context, agentId AgentId, params *SyscheckControllerDeleteSyscheckAgentParams) (*SyscheckControllerDeleteSyscheckAgentResponse, error)

	// SyscheckControllerGetSyscheckAgent request
	SyscheckControllerGetSyscheckAgentWithResponse(ctx context.Context, agentId AgentId, params *SyscheckControllerGetSyscheckAgentParams) (*SyscheckControllerGetSyscheckAgentResponse, error)

	// SyscheckControllerGetLastScanAgent request
	SyscheckControllerGetLastScanAgentWithResponse(ctx context.Context, agentId AgentId, params *SyscheckControllerGetLastScanAgentParams) (*SyscheckControllerGetLastScanAgentResponse, error)

	// SyscollectorControllerGetHardwareInfo request
	SyscollectorControllerGetHardwareInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHardwareInfoParams) (*SyscollectorControllerGetHardwareInfoResponse, error)

	// SyscollectorControllerGetHotfixInfo request
	SyscollectorControllerGetHotfixInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHotfixInfoParams) (*SyscollectorControllerGetHotfixInfoResponse, error)

	// SyscollectorControllerGetNetworkAddressInfo request
	SyscollectorControllerGetNetworkAddressInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkAddressInfoParams) (*SyscollectorControllerGetNetworkAddressInfoResponse, error)

	// SyscollectorControllerGetNetworkInterfaceInfo request
	SyscollectorControllerGetNetworkInterfaceInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkInterfaceInfoParams) (*SyscollectorControllerGetNetworkInterfaceInfoResponse, error)

	// SyscollectorControllerGetNetworkProtocolInfo request
	SyscollectorControllerGetNetworkProtocolInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkProtocolInfoParams) (*SyscollectorControllerGetNetworkProtocolInfoResponse, error)

	// SyscollectorControllerGetOsInfo request
	SyscollectorControllerGetOsInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetOsInfoParams) (*SyscollectorControllerGetOsInfoResponse, error)

	// SyscollectorControllerGetPackagesInfo request
	SyscollectorControllerGetPackagesInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPackagesInfoParams) (*SyscollectorControllerGetPackagesInfoResponse, error)

	// SyscollectorControllerGetPortsInfo request
	SyscollectorControllerGetPortsInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPortsInfoParams) (*SyscollectorControllerGetPortsInfoResponse, error)

	// SyscollectorControllerGetProcessesInfo request
	SyscollectorControllerGetProcessesInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetProcessesInfoParams) (*SyscollectorControllerGetProcessesInfoResponse, error)
}

type DefaultControllerDefaultInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *BasicInfo `json:"data,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DefaultControllerDefaultInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DefaultControllerDefaultInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActiveResponseControllerRunCommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON406      *RequestError
	JSON413      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r ActiveResponseControllerRunCommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActiveResponseControllerRunCommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerDeleteAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {
			// Embedded struct due to allOf(#/components/schemas/AllItemsResponseAgentIDs)
			AllItemsResponseAgentIDs `yaml:",inline"`
			// Embedded fields due to inline allOf schema

			// Return older than parameter used. It can be the default value or the parameter sent by the user
			OlderThan *string `json:"older_than,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerDeleteAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerDeleteAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgents `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerAddAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AgentIdKey `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerAddAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerAddAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerDeleteMultipleAgentSingleGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {
			// Embedded struct due to allOf(#/components/schemas/AllItemsResponseAgentIDs)
			AllItemsResponseAgentIDs `yaml:",inline"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerDeleteMultipleAgentSingleGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerDeleteMultipleAgentSingleGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerPutMultipleAgentSingleGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {
			// Embedded struct due to allOf(#/components/schemas/AllItemsResponseAgentIDs)
			AllItemsResponseAgentIDs `yaml:",inline"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerPutMultipleAgentSingleGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerPutMultipleAgentSingleGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerRestartAgentsByGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerRestartAgentsByGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerRestartAgentsByGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerInsertAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AgentIdKey `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerInsertAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerInsertAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerPostNewAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AgentIdKey `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerPostNewAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerPostNewAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetAgentNoGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgents `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetAgentNoGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetAgentNoGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerRestartAgentsByNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerRestartAgentsByNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerRestartAgentsByNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetAgentOutdatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentsSimple `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetAgentOutdatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetAgentOutdatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerRestartAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerRestartAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerRestartAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetAgentFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentsDistinct `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetAgentFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetAgentFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetAgentSummaryOsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetAgentSummaryOsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetAgentSummaryOsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetAgentSummaryStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AgentsSummaryStatus `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetAgentSummaryStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetAgentSummaryStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetAgentConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema

		// Current agent's configuration. The output varies with requested component and the agent configuration
		Data *AgentConfiguration `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetAgentConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetAgentConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerDeleteSingleAgentMultipleGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {
			// Embedded struct due to allOf(#/components/schemas/AllItemsResponseGroupIDs)
			AllItemsResponseGroupIDs `yaml:",inline"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerDeleteSingleAgentMultipleGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerDeleteSingleAgentMultipleGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetSyncAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentsSynced `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetSyncAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetSyncAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerDeleteSingleAgentSingleGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerDeleteSingleAgentSingleGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerDeleteSingleAgentSingleGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerPutAgentSingleGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerPutAgentSingleGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerPutAgentSingleGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetAgentKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentsKeys `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetAgentKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetAgentKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerRestartAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *ItemAffected `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerRestartAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerRestartAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerPutUpgradeAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerPutUpgradeAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerPutUpgradeAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerPutUpgradeCustomAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerPutUpgradeCustomAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerPutUpgradeCustomAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetAgentUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetAgentUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetAgentUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiscatControllerGetAgentsCiscatResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseCiscatResult `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r CiscatControllerGetAgentsCiscatResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiscatControllerGetAgentsCiscatResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetApiConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetApiConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetApiConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetConfValidationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseValidationStatus `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetConfValidationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetConfValidationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetHealthcheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseNodeHealthcheck `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetHealthcheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetHealthcheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {

			// Network interface used by the **master** to listen to incoming connections
			BindAddr *string `json:"bind_addr,omitempty"`

			// Whether the cluster is enabled or not
			Disabled *bool `json:"disabled,omitempty"`

			// Whether to hide the cluster information in the alerts
			Hidden *string `json:"hidden,omitempty"`

			// Cluster key used to encrypt messages
			Key *string `json:"key,omitempty"`

			// Cluster name
			Name *string `json:"name,omitempty"`

			// Node name
			NodeName *string `json:"node_name,omitempty"`

			// Node type
			NodeType *string `json:"node_type,omitempty"`

			// List of cluster master nodes. This list is used by **worker** nodes to connect to the master
			Nodes *[]string `json:"nodes,omitempty"`

			// Port used by the **master** node to communicate with workers
			Port *int `json:"port,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetClusterNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {

			// Cluster name the node belongs to
			Cluster *string `json:"cluster,omitempty"`

			// Node name
			Node *string `json:"node,omitempty"`

			// Node type
			Type *string `json:"type,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetClusterNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetClusterNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetClusterNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseClusterNodes `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetClusterNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetClusterNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerPutRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseNodeIDs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerPutRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerPutRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {

			// Whether the cluster is enabled in the Wazuh configuration
			Enabled *string `json:"enabled,omitempty"`

			// Whether the cluster daemon is running
			Running *string `json:"running,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetConfigurationNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhMangerConfiguration `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetConfigurationNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetConfigurationNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetNodeConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetNodeConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetNodeConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerDeleteFilesNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerDeleteFilesNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerDeleteFilesNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetFilesNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {

			// File contents
			Contents *string `json:"contents,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetFilesNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetFilesNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerPutFilesNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON406      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerPutFilesNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerPutFilesNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetInfoNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhInfo `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetInfoNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetInfoNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetLogNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhLogs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetLogNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetLogNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetLogSummaryNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhLogsSummary `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetLogSummaryNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetLogSummaryNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetStatsNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetStatsNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetStatsNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetStatsAnalysisdNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetStatsAnalysisdNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetStatsAnalysisdNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetStatsHourlyNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetStatsHourlyNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetStatsHourlyNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetStatsRemotedNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetStatsRemotedNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetStatsRemotedNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetStatsWeeklyNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetStatsWeeklyNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetStatsWeeklyNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterControllerGetStatusNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhDaemonsStatus `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ClusterControllerGetStatusNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterControllerGetStatusNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecodersControllerGetDecodersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseDecoders `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r DecodersControllerGetDecodersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecodersControllerGetDecodersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecodersControllerGetDecodersFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseDecodersFiles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r DecodersControllerGetDecodersFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecodersControllerGetDecodersFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecodersControllerGetDownloadFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	XML200       *string
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r DecodersControllerGetDownloadFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecodersControllerGetDownloadFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecodersControllerGetDecodersParentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r DecodersControllerGetDecodersParentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecodersControllerGetDecodersParentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetCisCatResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseCiscatResult `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetCisCatResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetCisCatResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerClearSyscheckDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerClearSyscheckDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerClearSyscheckDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetHardwareInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorHardware `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetHardwareInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetHardwareInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetHotfixesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorHotfixes `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetHotfixesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetHotfixesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetNetworkAddressInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorNetwork `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetNetworkAddressInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetNetworkAddressInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetNetworkInterfaceInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorInterface `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetNetworkInterfaceInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetNetworkInterfaceInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetNetworkProtocolInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorProtocol `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetNetworkProtocolInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetNetworkProtocolInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetOsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorOS `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetOsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetOsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetPackagesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorPackages `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetPackagesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetPackagesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetPortsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorPorts `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetPortsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetPortsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExperimentalControllerGetProcessesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorProcesses `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ExperimentalControllerGetProcessesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExperimentalControllerGetProcessesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerDeleteGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {
			// Embedded struct due to allOf(#/components/schemas/AllItemsResponseGroupIDs)
			AllItemsResponseGroupIDs `yaml:",inline"`
			// Embedded struct due to allOf(#/components/schemas/AgentGroupDeleted)
			AgentGroupDeleted `yaml:",inline"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerDeleteGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerDeleteGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetListGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseGroups `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetListGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetListGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerPostGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerPostGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerPostGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetAgentsInGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgents `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetAgentsInGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetAgentsInGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetGroupConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			AffectedItems      *[]GroupConfiguration `json:"affected_items,omitempty"`
			TotalAffectedItems *int32                `json:"total_affected_items,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetGroupConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetGroupConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerPutGroupConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON405      *RequestError
	JSON406      *RequestError
	JSON413      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerPutGroupConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerPutGroupConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetGroupFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetGroupFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetGroupFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetGroupFileJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *interface{} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON404 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetGroupFileJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetGroupFileJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentsControllerGetGroupFileXmlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	XML200       *string
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r AgentsControllerGetGroupFileXmlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentsControllerGetGroupFileXmlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListsControllerGetListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseLists `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ListsControllerGetListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListsControllerGetListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListsControllerGetListsFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseListsFiles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ListsControllerGetListsFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListsControllerGetListsFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetApiConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetApiConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetApiConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhMangerConfiguration `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetConfValidationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConfigurationValidation
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetConfValidationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetConfValidationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetManagerConfigOndemandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetManagerConfigOndemandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetManagerConfigOndemandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerDeleteFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded struct due to allOf(#/components/schemas/ConfirmationMessage)
		ConfirmationMessage `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerDeleteFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerDeleteFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *struct {

			// File contents
			Contents *string `json:"contents,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerPutFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded struct due to allOf(#/components/schemas/ConfirmationMessage)
		ConfirmationMessage `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerPutFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerPutFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhInfo `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhLogs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetLogSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhLogsSummary `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetLogSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetLogSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerPutRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerPutRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerPutRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetStatsAnalysisdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetStatsAnalysisdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetStatsAnalysisdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetStatsHourlyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetStatsHourlyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetStatsHourlyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetStatsRemotedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetStatsRemotedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetStatsRemotedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetStatsWeeklyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetStatsWeeklyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetStatsWeeklyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagerControllerGetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *WazuhDaemonsStatus `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ManagerControllerGetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagerControllerGetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitreControllerGetAttackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r MitreControllerGetAttackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitreControllerGetAttackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OverviewControllerGetOverviewAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *OverviewAgents `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r OverviewControllerGetOverviewAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OverviewControllerGetOverviewAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RulesControllerGetRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRules `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RulesControllerGetRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RulesControllerGetRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RulesControllerGetRulesFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRulesFiles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RulesControllerGetRulesFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RulesControllerGetRulesFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RulesControllerGetDownloadFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	XML200       *string
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r RulesControllerGetDownloadFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RulesControllerGetDownloadFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RulesControllerGetRulesGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RulesControllerGetRulesGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RulesControllerGetRulesGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RulesControllerGetRulesRequirementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r RulesControllerGetRulesRequirementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RulesControllerGetRulesRequirementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScaControllerGetScaAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSCADatabase `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ScaControllerGetScaAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScaControllerGetScaAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScaControllerGetScaChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSCAChecks `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r ScaControllerGetScaChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScaControllerGetScaChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetRbacActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetRbacActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetRbacActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerDeleteSecurityConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *RequestError
	JSON401      *RequestError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerDeleteSecurityConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerDeleteSecurityConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetSecurityConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetSecurityConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetSecurityConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerPutSecurityConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *RequestError
	JSON401      *RequestError
	JSON405      *RequestError
	JSON406      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerPutSecurityConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerPutSecurityConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRemovePoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponsePolicies `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRemovePoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRemovePoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponsePolicies `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerAddPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponsePolicies `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerAddPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerAddPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerUpdatePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponsePolicies `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerUpdatePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerUpdatePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetRbacResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetRbacResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetRbacResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRemoveRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRoles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRemoveRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRemoveRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRoles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerAddRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRoles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerAddRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerAddRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerUpdateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRoles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerUpdateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerUpdateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRemoveRolePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRemoveRolePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRemoveRolePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerSetRolePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerSetRolePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerSetRolePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRemoveRoleRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRemoveRoleRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRemoveRoleRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerSetRoleRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerSetRoleRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerSetRoleRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRemoveRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRoles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRemoveRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRemoveRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRoles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerAddRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseRoles `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON413 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerAddRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerAddRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerUpdateRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerUpdateRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerUpdateRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerLogoutUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerLogoutUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerLogoutUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerLoginUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *Token `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerLoginUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerLoginUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerLoginUserRunAsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Token *string `json:"token,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerLoginUserRunAsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerLoginUserRunAsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRevokeAllTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *RequestError
	JSON401      *RequestError
	JSON403      *ApiError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRevokeAllTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRevokeAllTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerDeleteUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerDeleteUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerDeleteUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerCreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerCreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerCreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetUserMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetUserMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetUserMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerGetUserMePoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
	JSON400      *RequestError
	JSON401      *RequestError
	JSON405      *RequestError
	JSON429      *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerGetUserMePoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerGetUserMePoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerUpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON405 *RequestError
	JSON406 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerUpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerUpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerRemoveUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerRemoveUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerRemoveUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecurityControllerSetUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseUsers `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SecurityControllerSetUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecurityControllerSetUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscheckControllerPutSyscheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscheckControllerPutSyscheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscheckControllerPutSyscheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscheckControllerDeleteSyscheckAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponse `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscheckControllerDeleteSyscheckAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscheckControllerDeleteSyscheckAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscheckControllerGetSyscheckAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscheckResult `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscheckControllerGetSyscheckAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscheckControllerGetSyscheckAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscheckControllerGetLastScanAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscheckLastScan `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscheckControllerGetLastScanAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscheckControllerGetLastScanAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetHardwareInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorHardware `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetHardwareInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetHardwareInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetHotfixInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorHotfixes `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetHotfixInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetHotfixInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetNetworkAddressInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorNetwork `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetNetworkAddressInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetNetworkAddressInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetNetworkInterfaceInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorInterface `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetNetworkInterfaceInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetNetworkInterfaceInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetNetworkProtocolInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorProtocol `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetNetworkProtocolInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetNetworkProtocolInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetOsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorOS `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetOsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetOsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetPackagesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorPackages `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetPackagesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetPackagesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetPortsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorPorts `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetPortsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetPortsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyscollectorControllerGetProcessesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiResponse)
		ApiResponse `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Data *AllItemsResponseSyscollectorProcesses `json:"data,omitempty"`
	}
	JSON400 *RequestError
	JSON401 *RequestError
	JSON403 *ApiError
	JSON405 *RequestError
	JSON429 *RequestError
}

// Status returns HTTPResponse.Status
func (r SyscollectorControllerGetProcessesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyscollectorControllerGetProcessesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DefaultControllerDefaultInfoWithResponse request returning *DefaultControllerDefaultInfoResponse
func (c *ClientWithResponses) DefaultControllerDefaultInfoWithResponse(ctx context.Context, params *DefaultControllerDefaultInfoParams) (*DefaultControllerDefaultInfoResponse, error) {
	rsp, err := c.DefaultControllerDefaultInfo(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseDefaultControllerDefaultInfoResponse(rsp)
}

// ActiveResponseControllerRunCommandWithBodyWithResponse request with arbitrary body returning *ActiveResponseControllerRunCommandResponse
func (c *ClientWithResponses) ActiveResponseControllerRunCommandWithBodyWithResponse(ctx context.Context, params *ActiveResponseControllerRunCommandParams, contentType string, body io.Reader) (*ActiveResponseControllerRunCommandResponse, error) {
	rsp, err := c.ActiveResponseControllerRunCommandWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseActiveResponseControllerRunCommandResponse(rsp)
}

func (c *ClientWithResponses) ActiveResponseControllerRunCommandWithResponse(ctx context.Context, params *ActiveResponseControllerRunCommandParams, body ActiveResponseControllerRunCommandJSONRequestBody) (*ActiveResponseControllerRunCommandResponse, error) {
	rsp, err := c.ActiveResponseControllerRunCommand(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseActiveResponseControllerRunCommandResponse(rsp)
}

// AgentsControllerDeleteAgentsWithResponse request returning *AgentsControllerDeleteAgentsResponse
func (c *ClientWithResponses) AgentsControllerDeleteAgentsWithResponse(ctx context.Context, params *AgentsControllerDeleteAgentsParams) (*AgentsControllerDeleteAgentsResponse, error) {
	rsp, err := c.AgentsControllerDeleteAgents(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerDeleteAgentsResponse(rsp)
}

// AgentsControllerGetAgentsWithResponse request returning *AgentsControllerGetAgentsResponse
func (c *ClientWithResponses) AgentsControllerGetAgentsWithResponse(ctx context.Context, params *AgentsControllerGetAgentsParams) (*AgentsControllerGetAgentsResponse, error) {
	rsp, err := c.AgentsControllerGetAgents(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetAgentsResponse(rsp)
}

// AgentsControllerAddAgentWithBodyWithResponse request with arbitrary body returning *AgentsControllerAddAgentResponse
func (c *ClientWithResponses) AgentsControllerAddAgentWithBodyWithResponse(ctx context.Context, params *AgentsControllerAddAgentParams, contentType string, body io.Reader) (*AgentsControllerAddAgentResponse, error) {
	rsp, err := c.AgentsControllerAddAgentWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerAddAgentResponse(rsp)
}

func (c *ClientWithResponses) AgentsControllerAddAgentWithResponse(ctx context.Context, params *AgentsControllerAddAgentParams, body AgentsControllerAddAgentJSONRequestBody) (*AgentsControllerAddAgentResponse, error) {
	rsp, err := c.AgentsControllerAddAgent(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerAddAgentResponse(rsp)
}

// AgentsControllerDeleteMultipleAgentSingleGroupWithResponse request returning *AgentsControllerDeleteMultipleAgentSingleGroupResponse
func (c *ClientWithResponses) AgentsControllerDeleteMultipleAgentSingleGroupWithResponse(ctx context.Context, params *AgentsControllerDeleteMultipleAgentSingleGroupParams) (*AgentsControllerDeleteMultipleAgentSingleGroupResponse, error) {
	rsp, err := c.AgentsControllerDeleteMultipleAgentSingleGroup(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerDeleteMultipleAgentSingleGroupResponse(rsp)
}

// AgentsControllerPutMultipleAgentSingleGroupWithResponse request returning *AgentsControllerPutMultipleAgentSingleGroupResponse
func (c *ClientWithResponses) AgentsControllerPutMultipleAgentSingleGroupWithResponse(ctx context.Context, params *AgentsControllerPutMultipleAgentSingleGroupParams) (*AgentsControllerPutMultipleAgentSingleGroupResponse, error) {
	rsp, err := c.AgentsControllerPutMultipleAgentSingleGroup(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerPutMultipleAgentSingleGroupResponse(rsp)
}

// AgentsControllerRestartAgentsByGroupWithResponse request returning *AgentsControllerRestartAgentsByGroupResponse
func (c *ClientWithResponses) AgentsControllerRestartAgentsByGroupWithResponse(ctx context.Context, groupId GroupId, params *AgentsControllerRestartAgentsByGroupParams) (*AgentsControllerRestartAgentsByGroupResponse, error) {
	rsp, err := c.AgentsControllerRestartAgentsByGroup(ctx, groupId, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerRestartAgentsByGroupResponse(rsp)
}

// AgentsControllerInsertAgentWithBodyWithResponse request with arbitrary body returning *AgentsControllerInsertAgentResponse
func (c *ClientWithResponses) AgentsControllerInsertAgentWithBodyWithResponse(ctx context.Context, params *AgentsControllerInsertAgentParams, contentType string, body io.Reader) (*AgentsControllerInsertAgentResponse, error) {
	rsp, err := c.AgentsControllerInsertAgentWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerInsertAgentResponse(rsp)
}

func (c *ClientWithResponses) AgentsControllerInsertAgentWithResponse(ctx context.Context, params *AgentsControllerInsertAgentParams, body AgentsControllerInsertAgentJSONRequestBody) (*AgentsControllerInsertAgentResponse, error) {
	rsp, err := c.AgentsControllerInsertAgent(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerInsertAgentResponse(rsp)
}

// AgentsControllerPostNewAgentWithResponse request returning *AgentsControllerPostNewAgentResponse
func (c *ClientWithResponses) AgentsControllerPostNewAgentWithResponse(ctx context.Context, params *AgentsControllerPostNewAgentParams) (*AgentsControllerPostNewAgentResponse, error) {
	rsp, err := c.AgentsControllerPostNewAgent(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerPostNewAgentResponse(rsp)
}

// AgentsControllerGetAgentNoGroupWithResponse request returning *AgentsControllerGetAgentNoGroupResponse
func (c *ClientWithResponses) AgentsControllerGetAgentNoGroupWithResponse(ctx context.Context, params *AgentsControllerGetAgentNoGroupParams) (*AgentsControllerGetAgentNoGroupResponse, error) {
	rsp, err := c.AgentsControllerGetAgentNoGroup(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetAgentNoGroupResponse(rsp)
}

// AgentsControllerRestartAgentsByNodeWithResponse request returning *AgentsControllerRestartAgentsByNodeResponse
func (c *ClientWithResponses) AgentsControllerRestartAgentsByNodeWithResponse(ctx context.Context, nodeId NodeId, params *AgentsControllerRestartAgentsByNodeParams) (*AgentsControllerRestartAgentsByNodeResponse, error) {
	rsp, err := c.AgentsControllerRestartAgentsByNode(ctx, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerRestartAgentsByNodeResponse(rsp)
}

// AgentsControllerGetAgentOutdatedWithResponse request returning *AgentsControllerGetAgentOutdatedResponse
func (c *ClientWithResponses) AgentsControllerGetAgentOutdatedWithResponse(ctx context.Context, params *AgentsControllerGetAgentOutdatedParams) (*AgentsControllerGetAgentOutdatedResponse, error) {
	rsp, err := c.AgentsControllerGetAgentOutdated(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetAgentOutdatedResponse(rsp)
}

// AgentsControllerRestartAgentsWithResponse request returning *AgentsControllerRestartAgentsResponse
func (c *ClientWithResponses) AgentsControllerRestartAgentsWithResponse(ctx context.Context, params *AgentsControllerRestartAgentsParams) (*AgentsControllerRestartAgentsResponse, error) {
	rsp, err := c.AgentsControllerRestartAgents(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerRestartAgentsResponse(rsp)
}

// AgentsControllerGetAgentFieldsWithResponse request returning *AgentsControllerGetAgentFieldsResponse
func (c *ClientWithResponses) AgentsControllerGetAgentFieldsWithResponse(ctx context.Context, params *AgentsControllerGetAgentFieldsParams) (*AgentsControllerGetAgentFieldsResponse, error) {
	rsp, err := c.AgentsControllerGetAgentFields(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetAgentFieldsResponse(rsp)
}

// AgentsControllerGetAgentSummaryOsWithResponse request returning *AgentsControllerGetAgentSummaryOsResponse
func (c *ClientWithResponses) AgentsControllerGetAgentSummaryOsWithResponse(ctx context.Context, params *AgentsControllerGetAgentSummaryOsParams) (*AgentsControllerGetAgentSummaryOsResponse, error) {
	rsp, err := c.AgentsControllerGetAgentSummaryOs(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetAgentSummaryOsResponse(rsp)
}

// AgentsControllerGetAgentSummaryStatusWithResponse request returning *AgentsControllerGetAgentSummaryStatusResponse
func (c *ClientWithResponses) AgentsControllerGetAgentSummaryStatusWithResponse(ctx context.Context, params *AgentsControllerGetAgentSummaryStatusParams) (*AgentsControllerGetAgentSummaryStatusResponse, error) {
	rsp, err := c.AgentsControllerGetAgentSummaryStatus(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetAgentSummaryStatusResponse(rsp)
}

// AgentsControllerGetAgentConfigWithResponse request returning *AgentsControllerGetAgentConfigResponse
func (c *ClientWithResponses) AgentsControllerGetAgentConfigWithResponse(ctx context.Context, agentId AgentId, component Component, configuration Configuration, params *AgentsControllerGetAgentConfigParams) (*AgentsControllerGetAgentConfigResponse, error) {
	rsp, err := c.AgentsControllerGetAgentConfig(ctx, agentId, component, configuration, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetAgentConfigResponse(rsp)
}

// AgentsControllerDeleteSingleAgentMultipleGroupsWithResponse request returning *AgentsControllerDeleteSingleAgentMultipleGroupsResponse
func (c *ClientWithResponses) AgentsControllerDeleteSingleAgentMultipleGroupsWithResponse(ctx context.Context, agentId AgentId, params *AgentsControllerDeleteSingleAgentMultipleGroupsParams) (*AgentsControllerDeleteSingleAgentMultipleGroupsResponse, error) {
	rsp, err := c.AgentsControllerDeleteSingleAgentMultipleGroups(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerDeleteSingleAgentMultipleGroupsResponse(rsp)
}

// AgentsControllerGetSyncAgentWithResponse request returning *AgentsControllerGetSyncAgentResponse
func (c *ClientWithResponses) AgentsControllerGetSyncAgentWithResponse(ctx context.Context, agentId AgentId, params *AgentsControllerGetSyncAgentParams) (*AgentsControllerGetSyncAgentResponse, error) {
	rsp, err := c.AgentsControllerGetSyncAgent(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetSyncAgentResponse(rsp)
}

// AgentsControllerDeleteSingleAgentSingleGroupWithResponse request returning *AgentsControllerDeleteSingleAgentSingleGroupResponse
func (c *ClientWithResponses) AgentsControllerDeleteSingleAgentSingleGroupWithResponse(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentsControllerDeleteSingleAgentSingleGroupParams) (*AgentsControllerDeleteSingleAgentSingleGroupResponse, error) {
	rsp, err := c.AgentsControllerDeleteSingleAgentSingleGroup(ctx, agentId, groupId, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerDeleteSingleAgentSingleGroupResponse(rsp)
}

// AgentsControllerPutAgentSingleGroupWithResponse request returning *AgentsControllerPutAgentSingleGroupResponse
func (c *ClientWithResponses) AgentsControllerPutAgentSingleGroupWithResponse(ctx context.Context, agentId AgentId, groupId GroupId, params *AgentsControllerPutAgentSingleGroupParams) (*AgentsControllerPutAgentSingleGroupResponse, error) {
	rsp, err := c.AgentsControllerPutAgentSingleGroup(ctx, agentId, groupId, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerPutAgentSingleGroupResponse(rsp)
}

// AgentsControllerGetAgentKeyWithResponse request returning *AgentsControllerGetAgentKeyResponse
func (c *ClientWithResponses) AgentsControllerGetAgentKeyWithResponse(ctx context.Context, agentId AgentId, params *AgentsControllerGetAgentKeyParams) (*AgentsControllerGetAgentKeyResponse, error) {
	rsp, err := c.AgentsControllerGetAgentKey(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetAgentKeyResponse(rsp)
}

// AgentsControllerRestartAgentWithResponse request returning *AgentsControllerRestartAgentResponse
func (c *ClientWithResponses) AgentsControllerRestartAgentWithResponse(ctx context.Context, agentId AgentId, params *AgentsControllerRestartAgentParams) (*AgentsControllerRestartAgentResponse, error) {
	rsp, err := c.AgentsControllerRestartAgent(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerRestartAgentResponse(rsp)
}

// AgentsControllerPutUpgradeAgentWithResponse request returning *AgentsControllerPutUpgradeAgentResponse
func (c *ClientWithResponses) AgentsControllerPutUpgradeAgentWithResponse(ctx context.Context, agentId AgentId, params *AgentsControllerPutUpgradeAgentParams) (*AgentsControllerPutUpgradeAgentResponse, error) {
	rsp, err := c.AgentsControllerPutUpgradeAgent(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerPutUpgradeAgentResponse(rsp)
}

// AgentsControllerPutUpgradeCustomAgentWithResponse request returning *AgentsControllerPutUpgradeCustomAgentResponse
func (c *ClientWithResponses) AgentsControllerPutUpgradeCustomAgentWithResponse(ctx context.Context, agentId AgentId, params *AgentsControllerPutUpgradeCustomAgentParams) (*AgentsControllerPutUpgradeCustomAgentResponse, error) {
	rsp, err := c.AgentsControllerPutUpgradeCustomAgent(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerPutUpgradeCustomAgentResponse(rsp)
}

// AgentsControllerGetAgentUpgradeWithResponse request returning *AgentsControllerGetAgentUpgradeResponse
func (c *ClientWithResponses) AgentsControllerGetAgentUpgradeWithResponse(ctx context.Context, agentId AgentId, params *AgentsControllerGetAgentUpgradeParams) (*AgentsControllerGetAgentUpgradeResponse, error) {
	rsp, err := c.AgentsControllerGetAgentUpgrade(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetAgentUpgradeResponse(rsp)
}

// CiscatControllerGetAgentsCiscatResultsWithResponse request returning *CiscatControllerGetAgentsCiscatResultsResponse
func (c *ClientWithResponses) CiscatControllerGetAgentsCiscatResultsWithResponse(ctx context.Context, agentId AgentId, params *CiscatControllerGetAgentsCiscatResultsParams) (*CiscatControllerGetAgentsCiscatResultsResponse, error) {
	rsp, err := c.CiscatControllerGetAgentsCiscatResults(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseCiscatControllerGetAgentsCiscatResultsResponse(rsp)
}

// ClusterControllerGetApiConfigWithResponse request returning *ClusterControllerGetApiConfigResponse
func (c *ClientWithResponses) ClusterControllerGetApiConfigWithResponse(ctx context.Context, params *ClusterControllerGetApiConfigParams) (*ClusterControllerGetApiConfigResponse, error) {
	rsp, err := c.ClusterControllerGetApiConfig(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetApiConfigResponse(rsp)
}

// ClusterControllerGetConfValidationWithResponse request returning *ClusterControllerGetConfValidationResponse
func (c *ClientWithResponses) ClusterControllerGetConfValidationWithResponse(ctx context.Context, params *ClusterControllerGetConfValidationParams) (*ClusterControllerGetConfValidationResponse, error) {
	rsp, err := c.ClusterControllerGetConfValidation(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetConfValidationResponse(rsp)
}

// ClusterControllerGetHealthcheckWithResponse request returning *ClusterControllerGetHealthcheckResponse
func (c *ClientWithResponses) ClusterControllerGetHealthcheckWithResponse(ctx context.Context, params *ClusterControllerGetHealthcheckParams) (*ClusterControllerGetHealthcheckResponse, error) {
	rsp, err := c.ClusterControllerGetHealthcheck(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetHealthcheckResponse(rsp)
}

// ClusterControllerGetConfigWithResponse request returning *ClusterControllerGetConfigResponse
func (c *ClientWithResponses) ClusterControllerGetConfigWithResponse(ctx context.Context, params *ClusterControllerGetConfigParams) (*ClusterControllerGetConfigResponse, error) {
	rsp, err := c.ClusterControllerGetConfig(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetConfigResponse(rsp)
}

// ClusterControllerGetClusterNodeWithResponse request returning *ClusterControllerGetClusterNodeResponse
func (c *ClientWithResponses) ClusterControllerGetClusterNodeWithResponse(ctx context.Context, params *ClusterControllerGetClusterNodeParams) (*ClusterControllerGetClusterNodeResponse, error) {
	rsp, err := c.ClusterControllerGetClusterNode(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetClusterNodeResponse(rsp)
}

// ClusterControllerGetClusterNodesWithResponse request returning *ClusterControllerGetClusterNodesResponse
func (c *ClientWithResponses) ClusterControllerGetClusterNodesWithResponse(ctx context.Context, params *ClusterControllerGetClusterNodesParams) (*ClusterControllerGetClusterNodesResponse, error) {
	rsp, err := c.ClusterControllerGetClusterNodes(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetClusterNodesResponse(rsp)
}

// ClusterControllerPutRestartWithResponse request returning *ClusterControllerPutRestartResponse
func (c *ClientWithResponses) ClusterControllerPutRestartWithResponse(ctx context.Context, params *ClusterControllerPutRestartParams) (*ClusterControllerPutRestartResponse, error) {
	rsp, err := c.ClusterControllerPutRestart(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerPutRestartResponse(rsp)
}

// ClusterControllerGetStatusWithResponse request returning *ClusterControllerGetStatusResponse
func (c *ClientWithResponses) ClusterControllerGetStatusWithResponse(ctx context.Context, params *ClusterControllerGetStatusParams) (*ClusterControllerGetStatusResponse, error) {
	rsp, err := c.ClusterControllerGetStatus(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetStatusResponse(rsp)
}

// ClusterControllerGetConfigurationNodeWithResponse request returning *ClusterControllerGetConfigurationNodeResponse
func (c *ClientWithResponses) ClusterControllerGetConfigurationNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetConfigurationNodeParams) (*ClusterControllerGetConfigurationNodeResponse, error) {
	rsp, err := c.ClusterControllerGetConfigurationNode(ctx, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetConfigurationNodeResponse(rsp)
}

// ClusterControllerGetNodeConfigWithResponse request returning *ClusterControllerGetNodeConfigResponse
func (c *ClientWithResponses) ClusterControllerGetNodeConfigWithResponse(ctx context.Context, nodeId NodeId, component Component, configuration Configuration, params *ClusterControllerGetNodeConfigParams) (*ClusterControllerGetNodeConfigResponse, error) {
	rsp, err := c.ClusterControllerGetNodeConfig(ctx, nodeId, component, configuration, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetNodeConfigResponse(rsp)
}

// ClusterControllerDeleteFilesNodeWithResponse request returning *ClusterControllerDeleteFilesNodeResponse
func (c *ClientWithResponses) ClusterControllerDeleteFilesNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerDeleteFilesNodeParams) (*ClusterControllerDeleteFilesNodeResponse, error) {
	rsp, err := c.ClusterControllerDeleteFilesNode(ctx, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerDeleteFilesNodeResponse(rsp)
}

// ClusterControllerGetFilesNodeWithResponse request returning *ClusterControllerGetFilesNodeResponse
func (c *ClientWithResponses) ClusterControllerGetFilesNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetFilesNodeParams) (*ClusterControllerGetFilesNodeResponse, error) {
	rsp, err := c.ClusterControllerGetFilesNode(ctx, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetFilesNodeResponse(rsp)
}

// ClusterControllerPutFilesNodeWithBodyWithResponse request with arbitrary body returning *ClusterControllerPutFilesNodeResponse
func (c *ClientWithResponses) ClusterControllerPutFilesNodeWithBodyWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerPutFilesNodeParams, contentType string, body io.Reader) (*ClusterControllerPutFilesNodeResponse, error) {
	rsp, err := c.ClusterControllerPutFilesNodeWithBody(ctx, nodeId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerPutFilesNodeResponse(rsp)
}

// ClusterControllerGetInfoNodeWithResponse request returning *ClusterControllerGetInfoNodeResponse
func (c *ClientWithResponses) ClusterControllerGetInfoNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetInfoNodeParams) (*ClusterControllerGetInfoNodeResponse, error) {
	rsp, err := c.ClusterControllerGetInfoNode(ctx, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetInfoNodeResponse(rsp)
}

// ClusterControllerGetLogNodeWithResponse request returning *ClusterControllerGetLogNodeResponse
func (c *ClientWithResponses) ClusterControllerGetLogNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogNodeParams) (*ClusterControllerGetLogNodeResponse, error) {
	rsp, err := c.ClusterControllerGetLogNode(ctx, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetLogNodeResponse(rsp)
}

// ClusterControllerGetLogSummaryNodeWithResponse request returning *ClusterControllerGetLogSummaryNodeResponse
func (c *ClientWithResponses) ClusterControllerGetLogSummaryNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetLogSummaryNodeParams) (*ClusterControllerGetLogSummaryNodeResponse, error) {
	rsp, err := c.ClusterControllerGetLogSummaryNode(ctx, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetLogSummaryNodeResponse(rsp)
}

// ClusterControllerGetStatsNodeWithResponse request returning *ClusterControllerGetStatsNodeResponse
func (c *ClientWithResponses) ClusterControllerGetStatsNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsNodeParams) (*ClusterControllerGetStatsNodeResponse, error) {
	rsp, err := c.ClusterControllerGetStatsNode(ctx, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetStatsNodeResponse(rsp)
}

// ClusterControllerGetStatsAnalysisdNodeWithResponse request returning *ClusterControllerGetStatsAnalysisdNodeResponse
func (c *ClientWithResponses) ClusterControllerGetStatsAnalysisdNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsAnalysisdNodeParams) (*ClusterControllerGetStatsAnalysisdNodeResponse, error) {
	rsp, err := c.ClusterControllerGetStatsAnalysisdNode(ctx, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetStatsAnalysisdNodeResponse(rsp)
}

// ClusterControllerGetStatsHourlyNodeWithResponse request returning *ClusterControllerGetStatsHourlyNodeResponse
func (c *ClientWithResponses) ClusterControllerGetStatsHourlyNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsHourlyNodeParams) (*ClusterControllerGetStatsHourlyNodeResponse, error) {
	rsp, err := c.ClusterControllerGetStatsHourlyNode(ctx, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetStatsHourlyNodeResponse(rsp)
}

// ClusterControllerGetStatsRemotedNodeWithResponse request returning *ClusterControllerGetStatsRemotedNodeResponse
func (c *ClientWithResponses) ClusterControllerGetStatsRemotedNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsRemotedNodeParams) (*ClusterControllerGetStatsRemotedNodeResponse, error) {
	rsp, err := c.ClusterControllerGetStatsRemotedNode(ctx, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetStatsRemotedNodeResponse(rsp)
}

// ClusterControllerGetStatsWeeklyNodeWithResponse request returning *ClusterControllerGetStatsWeeklyNodeResponse
func (c *ClientWithResponses) ClusterControllerGetStatsWeeklyNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatsWeeklyNodeParams) (*ClusterControllerGetStatsWeeklyNodeResponse, error) {
	rsp, err := c.ClusterControllerGetStatsWeeklyNode(ctx, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetStatsWeeklyNodeResponse(rsp)
}

// ClusterControllerGetStatusNodeWithResponse request returning *ClusterControllerGetStatusNodeResponse
func (c *ClientWithResponses) ClusterControllerGetStatusNodeWithResponse(ctx context.Context, nodeId NodeId, params *ClusterControllerGetStatusNodeParams) (*ClusterControllerGetStatusNodeResponse, error) {
	rsp, err := c.ClusterControllerGetStatusNode(ctx, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseClusterControllerGetStatusNodeResponse(rsp)
}

// DecodersControllerGetDecodersWithResponse request returning *DecodersControllerGetDecodersResponse
func (c *ClientWithResponses) DecodersControllerGetDecodersWithResponse(ctx context.Context, params *DecodersControllerGetDecodersParams) (*DecodersControllerGetDecodersResponse, error) {
	rsp, err := c.DecodersControllerGetDecoders(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseDecodersControllerGetDecodersResponse(rsp)
}

// DecodersControllerGetDecodersFilesWithResponse request returning *DecodersControllerGetDecodersFilesResponse
func (c *ClientWithResponses) DecodersControllerGetDecodersFilesWithResponse(ctx context.Context, params *DecodersControllerGetDecodersFilesParams) (*DecodersControllerGetDecodersFilesResponse, error) {
	rsp, err := c.DecodersControllerGetDecodersFiles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseDecodersControllerGetDecodersFilesResponse(rsp)
}

// DecodersControllerGetDownloadFileWithResponse request returning *DecodersControllerGetDownloadFileResponse
func (c *ClientWithResponses) DecodersControllerGetDownloadFileWithResponse(ctx context.Context, filename DownloadFile, params *DecodersControllerGetDownloadFileParams) (*DecodersControllerGetDownloadFileResponse, error) {
	rsp, err := c.DecodersControllerGetDownloadFile(ctx, filename, params)
	if err != nil {
		return nil, err
	}
	return ParseDecodersControllerGetDownloadFileResponse(rsp)
}

// DecodersControllerGetDecodersParentsWithResponse request returning *DecodersControllerGetDecodersParentsResponse
func (c *ClientWithResponses) DecodersControllerGetDecodersParentsWithResponse(ctx context.Context, params *DecodersControllerGetDecodersParentsParams) (*DecodersControllerGetDecodersParentsResponse, error) {
	rsp, err := c.DecodersControllerGetDecodersParents(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseDecodersControllerGetDecodersParentsResponse(rsp)
}

// ExperimentalControllerGetCisCatResultsWithResponse request returning *ExperimentalControllerGetCisCatResultsResponse
func (c *ClientWithResponses) ExperimentalControllerGetCisCatResultsWithResponse(ctx context.Context, params *ExperimentalControllerGetCisCatResultsParams) (*ExperimentalControllerGetCisCatResultsResponse, error) {
	rsp, err := c.ExperimentalControllerGetCisCatResults(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseExperimentalControllerGetCisCatResultsResponse(rsp)
}

// ExperimentalControllerClearSyscheckDatabaseWithResponse request returning *ExperimentalControllerClearSyscheckDatabaseResponse
func (c *ClientWithResponses) ExperimentalControllerClearSyscheckDatabaseWithResponse(ctx context.Context, params *ExperimentalControllerClearSyscheckDatabaseParams) (*ExperimentalControllerClearSyscheckDatabaseResponse, error) {
	rsp, err := c.ExperimentalControllerClearSyscheckDatabase(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseExperimentalControllerClearSyscheckDatabaseResponse(rsp)
}

// ExperimentalControllerGetHardwareInfoWithResponse request returning *ExperimentalControllerGetHardwareInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetHardwareInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetHardwareInfoParams) (*ExperimentalControllerGetHardwareInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetHardwareInfo(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseExperimentalControllerGetHardwareInfoResponse(rsp)
}

// ExperimentalControllerGetHotfixesInfoWithResponse request returning *ExperimentalControllerGetHotfixesInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetHotfixesInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetHotfixesInfoParams) (*ExperimentalControllerGetHotfixesInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetHotfixesInfo(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseExperimentalControllerGetHotfixesInfoResponse(rsp)
}

// ExperimentalControllerGetNetworkAddressInfoWithResponse request returning *ExperimentalControllerGetNetworkAddressInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetNetworkAddressInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetNetworkAddressInfoParams) (*ExperimentalControllerGetNetworkAddressInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetNetworkAddressInfo(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseExperimentalControllerGetNetworkAddressInfoResponse(rsp)
}

// ExperimentalControllerGetNetworkInterfaceInfoWithResponse request returning *ExperimentalControllerGetNetworkInterfaceInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetNetworkInterfaceInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetNetworkInterfaceInfoParams) (*ExperimentalControllerGetNetworkInterfaceInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetNetworkInterfaceInfo(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseExperimentalControllerGetNetworkInterfaceInfoResponse(rsp)
}

// ExperimentalControllerGetNetworkProtocolInfoWithResponse request returning *ExperimentalControllerGetNetworkProtocolInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetNetworkProtocolInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetNetworkProtocolInfoParams) (*ExperimentalControllerGetNetworkProtocolInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetNetworkProtocolInfo(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseExperimentalControllerGetNetworkProtocolInfoResponse(rsp)
}

// ExperimentalControllerGetOsInfoWithResponse request returning *ExperimentalControllerGetOsInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetOsInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetOsInfoParams) (*ExperimentalControllerGetOsInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetOsInfo(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseExperimentalControllerGetOsInfoResponse(rsp)
}

// ExperimentalControllerGetPackagesInfoWithResponse request returning *ExperimentalControllerGetPackagesInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetPackagesInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetPackagesInfoParams) (*ExperimentalControllerGetPackagesInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetPackagesInfo(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseExperimentalControllerGetPackagesInfoResponse(rsp)
}

// ExperimentalControllerGetPortsInfoWithResponse request returning *ExperimentalControllerGetPortsInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetPortsInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetPortsInfoParams) (*ExperimentalControllerGetPortsInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetPortsInfo(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseExperimentalControllerGetPortsInfoResponse(rsp)
}

// ExperimentalControllerGetProcessesInfoWithResponse request returning *ExperimentalControllerGetProcessesInfoResponse
func (c *ClientWithResponses) ExperimentalControllerGetProcessesInfoWithResponse(ctx context.Context, params *ExperimentalControllerGetProcessesInfoParams) (*ExperimentalControllerGetProcessesInfoResponse, error) {
	rsp, err := c.ExperimentalControllerGetProcessesInfo(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseExperimentalControllerGetProcessesInfoResponse(rsp)
}

// AgentsControllerDeleteGroupsWithResponse request returning *AgentsControllerDeleteGroupsResponse
func (c *ClientWithResponses) AgentsControllerDeleteGroupsWithResponse(ctx context.Context, params *AgentsControllerDeleteGroupsParams) (*AgentsControllerDeleteGroupsResponse, error) {
	rsp, err := c.AgentsControllerDeleteGroups(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerDeleteGroupsResponse(rsp)
}

// AgentsControllerGetListGroupWithResponse request returning *AgentsControllerGetListGroupResponse
func (c *ClientWithResponses) AgentsControllerGetListGroupWithResponse(ctx context.Context, params *AgentsControllerGetListGroupParams) (*AgentsControllerGetListGroupResponse, error) {
	rsp, err := c.AgentsControllerGetListGroup(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetListGroupResponse(rsp)
}

// AgentsControllerPostGroupWithResponse request returning *AgentsControllerPostGroupResponse
func (c *ClientWithResponses) AgentsControllerPostGroupWithResponse(ctx context.Context, params *AgentsControllerPostGroupParams) (*AgentsControllerPostGroupResponse, error) {
	rsp, err := c.AgentsControllerPostGroup(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerPostGroupResponse(rsp)
}

// AgentsControllerGetAgentsInGroupWithResponse request returning *AgentsControllerGetAgentsInGroupResponse
func (c *ClientWithResponses) AgentsControllerGetAgentsInGroupWithResponse(ctx context.Context, groupId GroupId, params *AgentsControllerGetAgentsInGroupParams) (*AgentsControllerGetAgentsInGroupResponse, error) {
	rsp, err := c.AgentsControllerGetAgentsInGroup(ctx, groupId, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetAgentsInGroupResponse(rsp)
}

// AgentsControllerGetGroupConfigWithResponse request returning *AgentsControllerGetGroupConfigResponse
func (c *ClientWithResponses) AgentsControllerGetGroupConfigWithResponse(ctx context.Context, groupId GroupId, params *AgentsControllerGetGroupConfigParams) (*AgentsControllerGetGroupConfigResponse, error) {
	rsp, err := c.AgentsControllerGetGroupConfig(ctx, groupId, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetGroupConfigResponse(rsp)
}

// AgentsControllerPutGroupConfigWithBodyWithResponse request with arbitrary body returning *AgentsControllerPutGroupConfigResponse
func (c *ClientWithResponses) AgentsControllerPutGroupConfigWithBodyWithResponse(ctx context.Context, groupId GroupId, params *AgentsControllerPutGroupConfigParams, contentType string, body io.Reader) (*AgentsControllerPutGroupConfigResponse, error) {
	rsp, err := c.AgentsControllerPutGroupConfigWithBody(ctx, groupId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerPutGroupConfigResponse(rsp)
}

// AgentsControllerGetGroupFilesWithResponse request returning *AgentsControllerGetGroupFilesResponse
func (c *ClientWithResponses) AgentsControllerGetGroupFilesWithResponse(ctx context.Context, groupId GroupId, params *AgentsControllerGetGroupFilesParams) (*AgentsControllerGetGroupFilesResponse, error) {
	rsp, err := c.AgentsControllerGetGroupFiles(ctx, groupId, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetGroupFilesResponse(rsp)
}

// AgentsControllerGetGroupFileJsonWithResponse request returning *AgentsControllerGetGroupFileJsonResponse
func (c *ClientWithResponses) AgentsControllerGetGroupFileJsonWithResponse(ctx context.Context, groupId GroupId, fileName FileName, params *AgentsControllerGetGroupFileJsonParams) (*AgentsControllerGetGroupFileJsonResponse, error) {
	rsp, err := c.AgentsControllerGetGroupFileJson(ctx, groupId, fileName, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetGroupFileJsonResponse(rsp)
}

// AgentsControllerGetGroupFileXmlWithResponse request returning *AgentsControllerGetGroupFileXmlResponse
func (c *ClientWithResponses) AgentsControllerGetGroupFileXmlWithResponse(ctx context.Context, groupId GroupId, fileName FileName, params *AgentsControllerGetGroupFileXmlParams) (*AgentsControllerGetGroupFileXmlResponse, error) {
	rsp, err := c.AgentsControllerGetGroupFileXml(ctx, groupId, fileName, params)
	if err != nil {
		return nil, err
	}
	return ParseAgentsControllerGetGroupFileXmlResponse(rsp)
}

// ListsControllerGetListsWithResponse request returning *ListsControllerGetListsResponse
func (c *ClientWithResponses) ListsControllerGetListsWithResponse(ctx context.Context, params *ListsControllerGetListsParams) (*ListsControllerGetListsResponse, error) {
	rsp, err := c.ListsControllerGetLists(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListsControllerGetListsResponse(rsp)
}

// ListsControllerGetListsFilesWithResponse request returning *ListsControllerGetListsFilesResponse
func (c *ClientWithResponses) ListsControllerGetListsFilesWithResponse(ctx context.Context, params *ListsControllerGetListsFilesParams) (*ListsControllerGetListsFilesResponse, error) {
	rsp, err := c.ListsControllerGetListsFiles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListsControllerGetListsFilesResponse(rsp)
}

// ManagerControllerGetApiConfigWithResponse request returning *ManagerControllerGetApiConfigResponse
func (c *ClientWithResponses) ManagerControllerGetApiConfigWithResponse(ctx context.Context, params *ManagerControllerGetApiConfigParams) (*ManagerControllerGetApiConfigResponse, error) {
	rsp, err := c.ManagerControllerGetApiConfig(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerGetApiConfigResponse(rsp)
}

// ManagerControllerGetConfigurationWithResponse request returning *ManagerControllerGetConfigurationResponse
func (c *ClientWithResponses) ManagerControllerGetConfigurationWithResponse(ctx context.Context, params *ManagerControllerGetConfigurationParams) (*ManagerControllerGetConfigurationResponse, error) {
	rsp, err := c.ManagerControllerGetConfiguration(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerGetConfigurationResponse(rsp)
}

// ManagerControllerGetConfValidationWithResponse request returning *ManagerControllerGetConfValidationResponse
func (c *ClientWithResponses) ManagerControllerGetConfValidationWithResponse(ctx context.Context, params *ManagerControllerGetConfValidationParams) (*ManagerControllerGetConfValidationResponse, error) {
	rsp, err := c.ManagerControllerGetConfValidation(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerGetConfValidationResponse(rsp)
}

// ManagerControllerGetManagerConfigOndemandWithResponse request returning *ManagerControllerGetManagerConfigOndemandResponse
func (c *ClientWithResponses) ManagerControllerGetManagerConfigOndemandWithResponse(ctx context.Context, component Component, configuration Configuration, params *ManagerControllerGetManagerConfigOndemandParams) (*ManagerControllerGetManagerConfigOndemandResponse, error) {
	rsp, err := c.ManagerControllerGetManagerConfigOndemand(ctx, component, configuration, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerGetManagerConfigOndemandResponse(rsp)
}

// ManagerControllerDeleteFilesWithResponse request returning *ManagerControllerDeleteFilesResponse
func (c *ClientWithResponses) ManagerControllerDeleteFilesWithResponse(ctx context.Context, params *ManagerControllerDeleteFilesParams) (*ManagerControllerDeleteFilesResponse, error) {
	rsp, err := c.ManagerControllerDeleteFiles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerDeleteFilesResponse(rsp)
}

// ManagerControllerGetFilesWithResponse request returning *ManagerControllerGetFilesResponse
func (c *ClientWithResponses) ManagerControllerGetFilesWithResponse(ctx context.Context, params *ManagerControllerGetFilesParams) (*ManagerControllerGetFilesResponse, error) {
	rsp, err := c.ManagerControllerGetFiles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerGetFilesResponse(rsp)
}

// ManagerControllerPutFilesWithBodyWithResponse request with arbitrary body returning *ManagerControllerPutFilesResponse
func (c *ClientWithResponses) ManagerControllerPutFilesWithBodyWithResponse(ctx context.Context, params *ManagerControllerPutFilesParams, contentType string, body io.Reader) (*ManagerControllerPutFilesResponse, error) {
	rsp, err := c.ManagerControllerPutFilesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerPutFilesResponse(rsp)
}

// ManagerControllerGetInfoWithResponse request returning *ManagerControllerGetInfoResponse
func (c *ClientWithResponses) ManagerControllerGetInfoWithResponse(ctx context.Context, params *ManagerControllerGetInfoParams) (*ManagerControllerGetInfoResponse, error) {
	rsp, err := c.ManagerControllerGetInfo(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerGetInfoResponse(rsp)
}

// ManagerControllerGetLogWithResponse request returning *ManagerControllerGetLogResponse
func (c *ClientWithResponses) ManagerControllerGetLogWithResponse(ctx context.Context, params *ManagerControllerGetLogParams) (*ManagerControllerGetLogResponse, error) {
	rsp, err := c.ManagerControllerGetLog(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerGetLogResponse(rsp)
}

// ManagerControllerGetLogSummaryWithResponse request returning *ManagerControllerGetLogSummaryResponse
func (c *ClientWithResponses) ManagerControllerGetLogSummaryWithResponse(ctx context.Context, params *ManagerControllerGetLogSummaryParams) (*ManagerControllerGetLogSummaryResponse, error) {
	rsp, err := c.ManagerControllerGetLogSummary(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerGetLogSummaryResponse(rsp)
}

// ManagerControllerPutRestartWithResponse request returning *ManagerControllerPutRestartResponse
func (c *ClientWithResponses) ManagerControllerPutRestartWithResponse(ctx context.Context, params *ManagerControllerPutRestartParams) (*ManagerControllerPutRestartResponse, error) {
	rsp, err := c.ManagerControllerPutRestart(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerPutRestartResponse(rsp)
}

// ManagerControllerGetStatsWithResponse request returning *ManagerControllerGetStatsResponse
func (c *ClientWithResponses) ManagerControllerGetStatsWithResponse(ctx context.Context, params *ManagerControllerGetStatsParams) (*ManagerControllerGetStatsResponse, error) {
	rsp, err := c.ManagerControllerGetStats(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerGetStatsResponse(rsp)
}

// ManagerControllerGetStatsAnalysisdWithResponse request returning *ManagerControllerGetStatsAnalysisdResponse
func (c *ClientWithResponses) ManagerControllerGetStatsAnalysisdWithResponse(ctx context.Context, params *ManagerControllerGetStatsAnalysisdParams) (*ManagerControllerGetStatsAnalysisdResponse, error) {
	rsp, err := c.ManagerControllerGetStatsAnalysisd(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerGetStatsAnalysisdResponse(rsp)
}

// ManagerControllerGetStatsHourlyWithResponse request returning *ManagerControllerGetStatsHourlyResponse
func (c *ClientWithResponses) ManagerControllerGetStatsHourlyWithResponse(ctx context.Context, params *ManagerControllerGetStatsHourlyParams) (*ManagerControllerGetStatsHourlyResponse, error) {
	rsp, err := c.ManagerControllerGetStatsHourly(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerGetStatsHourlyResponse(rsp)
}

// ManagerControllerGetStatsRemotedWithResponse request returning *ManagerControllerGetStatsRemotedResponse
func (c *ClientWithResponses) ManagerControllerGetStatsRemotedWithResponse(ctx context.Context, params *ManagerControllerGetStatsRemotedParams) (*ManagerControllerGetStatsRemotedResponse, error) {
	rsp, err := c.ManagerControllerGetStatsRemoted(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerGetStatsRemotedResponse(rsp)
}

// ManagerControllerGetStatsWeeklyWithResponse request returning *ManagerControllerGetStatsWeeklyResponse
func (c *ClientWithResponses) ManagerControllerGetStatsWeeklyWithResponse(ctx context.Context, params *ManagerControllerGetStatsWeeklyParams) (*ManagerControllerGetStatsWeeklyResponse, error) {
	rsp, err := c.ManagerControllerGetStatsWeekly(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerGetStatsWeeklyResponse(rsp)
}

// ManagerControllerGetStatusWithResponse request returning *ManagerControllerGetStatusResponse
func (c *ClientWithResponses) ManagerControllerGetStatusWithResponse(ctx context.Context, params *ManagerControllerGetStatusParams) (*ManagerControllerGetStatusResponse, error) {
	rsp, err := c.ManagerControllerGetStatus(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseManagerControllerGetStatusResponse(rsp)
}

// MitreControllerGetAttackWithResponse request returning *MitreControllerGetAttackResponse
func (c *ClientWithResponses) MitreControllerGetAttackWithResponse(ctx context.Context, params *MitreControllerGetAttackParams) (*MitreControllerGetAttackResponse, error) {
	rsp, err := c.MitreControllerGetAttack(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseMitreControllerGetAttackResponse(rsp)
}

// OverviewControllerGetOverviewAgentsWithResponse request returning *OverviewControllerGetOverviewAgentsResponse
func (c *ClientWithResponses) OverviewControllerGetOverviewAgentsWithResponse(ctx context.Context, params *OverviewControllerGetOverviewAgentsParams) (*OverviewControllerGetOverviewAgentsResponse, error) {
	rsp, err := c.OverviewControllerGetOverviewAgents(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseOverviewControllerGetOverviewAgentsResponse(rsp)
}

// RulesControllerGetRulesWithResponse request returning *RulesControllerGetRulesResponse
func (c *ClientWithResponses) RulesControllerGetRulesWithResponse(ctx context.Context, params *RulesControllerGetRulesParams) (*RulesControllerGetRulesResponse, error) {
	rsp, err := c.RulesControllerGetRules(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseRulesControllerGetRulesResponse(rsp)
}

// RulesControllerGetRulesFilesWithResponse request returning *RulesControllerGetRulesFilesResponse
func (c *ClientWithResponses) RulesControllerGetRulesFilesWithResponse(ctx context.Context, params *RulesControllerGetRulesFilesParams) (*RulesControllerGetRulesFilesResponse, error) {
	rsp, err := c.RulesControllerGetRulesFiles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseRulesControllerGetRulesFilesResponse(rsp)
}

// RulesControllerGetDownloadFileWithResponse request returning *RulesControllerGetDownloadFileResponse
func (c *ClientWithResponses) RulesControllerGetDownloadFileWithResponse(ctx context.Context, filename DownloadFile, params *RulesControllerGetDownloadFileParams) (*RulesControllerGetDownloadFileResponse, error) {
	rsp, err := c.RulesControllerGetDownloadFile(ctx, filename, params)
	if err != nil {
		return nil, err
	}
	return ParseRulesControllerGetDownloadFileResponse(rsp)
}

// RulesControllerGetRulesGroupsWithResponse request returning *RulesControllerGetRulesGroupsResponse
func (c *ClientWithResponses) RulesControllerGetRulesGroupsWithResponse(ctx context.Context, params *RulesControllerGetRulesGroupsParams) (*RulesControllerGetRulesGroupsResponse, error) {
	rsp, err := c.RulesControllerGetRulesGroups(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseRulesControllerGetRulesGroupsResponse(rsp)
}

// RulesControllerGetRulesRequirementWithResponse request returning *RulesControllerGetRulesRequirementResponse
func (c *ClientWithResponses) RulesControllerGetRulesRequirementWithResponse(ctx context.Context, requirement RuleRequirement, params *RulesControllerGetRulesRequirementParams) (*RulesControllerGetRulesRequirementResponse, error) {
	rsp, err := c.RulesControllerGetRulesRequirement(ctx, requirement, params)
	if err != nil {
		return nil, err
	}
	return ParseRulesControllerGetRulesRequirementResponse(rsp)
}

// ScaControllerGetScaAgentWithResponse request returning *ScaControllerGetScaAgentResponse
func (c *ClientWithResponses) ScaControllerGetScaAgentWithResponse(ctx context.Context, agentId AgentId, params *ScaControllerGetScaAgentParams) (*ScaControllerGetScaAgentResponse, error) {
	rsp, err := c.ScaControllerGetScaAgent(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseScaControllerGetScaAgentResponse(rsp)
}

// ScaControllerGetScaChecksWithResponse request returning *ScaControllerGetScaChecksResponse
func (c *ClientWithResponses) ScaControllerGetScaChecksWithResponse(ctx context.Context, agentId AgentId, policyId PolicyId, params *ScaControllerGetScaChecksParams) (*ScaControllerGetScaChecksResponse, error) {
	rsp, err := c.ScaControllerGetScaChecks(ctx, agentId, policyId, params)
	if err != nil {
		return nil, err
	}
	return ParseScaControllerGetScaChecksResponse(rsp)
}

// SecurityControllerGetRbacActionsWithResponse request returning *SecurityControllerGetRbacActionsResponse
func (c *ClientWithResponses) SecurityControllerGetRbacActionsWithResponse(ctx context.Context, params *SecurityControllerGetRbacActionsParams) (*SecurityControllerGetRbacActionsResponse, error) {
	rsp, err := c.SecurityControllerGetRbacActions(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerGetRbacActionsResponse(rsp)
}

// SecurityControllerDeleteSecurityConfigWithResponse request returning *SecurityControllerDeleteSecurityConfigResponse
func (c *ClientWithResponses) SecurityControllerDeleteSecurityConfigWithResponse(ctx context.Context, params *SecurityControllerDeleteSecurityConfigParams) (*SecurityControllerDeleteSecurityConfigResponse, error) {
	rsp, err := c.SecurityControllerDeleteSecurityConfig(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerDeleteSecurityConfigResponse(rsp)
}

// SecurityControllerGetSecurityConfigWithResponse request returning *SecurityControllerGetSecurityConfigResponse
func (c *ClientWithResponses) SecurityControllerGetSecurityConfigWithResponse(ctx context.Context, params *SecurityControllerGetSecurityConfigParams) (*SecurityControllerGetSecurityConfigResponse, error) {
	rsp, err := c.SecurityControllerGetSecurityConfig(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerGetSecurityConfigResponse(rsp)
}

// SecurityControllerPutSecurityConfigWithBodyWithResponse request with arbitrary body returning *SecurityControllerPutSecurityConfigResponse
func (c *ClientWithResponses) SecurityControllerPutSecurityConfigWithBodyWithResponse(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, contentType string, body io.Reader) (*SecurityControllerPutSecurityConfigResponse, error) {
	rsp, err := c.SecurityControllerPutSecurityConfigWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerPutSecurityConfigResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerPutSecurityConfigWithResponse(ctx context.Context, params *SecurityControllerPutSecurityConfigParams, body SecurityControllerPutSecurityConfigJSONRequestBody) (*SecurityControllerPutSecurityConfigResponse, error) {
	rsp, err := c.SecurityControllerPutSecurityConfig(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerPutSecurityConfigResponse(rsp)
}

// SecurityControllerRemovePoliciesWithResponse request returning *SecurityControllerRemovePoliciesResponse
func (c *ClientWithResponses) SecurityControllerRemovePoliciesWithResponse(ctx context.Context, params *SecurityControllerRemovePoliciesParams) (*SecurityControllerRemovePoliciesResponse, error) {
	rsp, err := c.SecurityControllerRemovePolicies(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerRemovePoliciesResponse(rsp)
}

// SecurityControllerGetPoliciesWithResponse request returning *SecurityControllerGetPoliciesResponse
func (c *ClientWithResponses) SecurityControllerGetPoliciesWithResponse(ctx context.Context, params *SecurityControllerGetPoliciesParams) (*SecurityControllerGetPoliciesResponse, error) {
	rsp, err := c.SecurityControllerGetPolicies(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerGetPoliciesResponse(rsp)
}

// SecurityControllerAddPolicyWithBodyWithResponse request with arbitrary body returning *SecurityControllerAddPolicyResponse
func (c *ClientWithResponses) SecurityControllerAddPolicyWithBodyWithResponse(ctx context.Context, params *SecurityControllerAddPolicyParams, contentType string, body io.Reader) (*SecurityControllerAddPolicyResponse, error) {
	rsp, err := c.SecurityControllerAddPolicyWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerAddPolicyResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerAddPolicyWithResponse(ctx context.Context, params *SecurityControllerAddPolicyParams, body SecurityControllerAddPolicyJSONRequestBody) (*SecurityControllerAddPolicyResponse, error) {
	rsp, err := c.SecurityControllerAddPolicy(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerAddPolicyResponse(rsp)
}

// SecurityControllerUpdatePolicyWithBodyWithResponse request with arbitrary body returning *SecurityControllerUpdatePolicyResponse
func (c *ClientWithResponses) SecurityControllerUpdatePolicyWithBodyWithResponse(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, contentType string, body io.Reader) (*SecurityControllerUpdatePolicyResponse, error) {
	rsp, err := c.SecurityControllerUpdatePolicyWithBody(ctx, policyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerUpdatePolicyResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerUpdatePolicyWithResponse(ctx context.Context, policyId PolicyIdRbac, params *SecurityControllerUpdatePolicyParams, body SecurityControllerUpdatePolicyJSONRequestBody) (*SecurityControllerUpdatePolicyResponse, error) {
	rsp, err := c.SecurityControllerUpdatePolicy(ctx, policyId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerUpdatePolicyResponse(rsp)
}

// SecurityControllerGetRbacResourcesWithResponse request returning *SecurityControllerGetRbacResourcesResponse
func (c *ClientWithResponses) SecurityControllerGetRbacResourcesWithResponse(ctx context.Context, params *SecurityControllerGetRbacResourcesParams) (*SecurityControllerGetRbacResourcesResponse, error) {
	rsp, err := c.SecurityControllerGetRbacResources(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerGetRbacResourcesResponse(rsp)
}

// SecurityControllerRemoveRolesWithResponse request returning *SecurityControllerRemoveRolesResponse
func (c *ClientWithResponses) SecurityControllerRemoveRolesWithResponse(ctx context.Context, params *SecurityControllerRemoveRolesParams) (*SecurityControllerRemoveRolesResponse, error) {
	rsp, err := c.SecurityControllerRemoveRoles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerRemoveRolesResponse(rsp)
}

// SecurityControllerGetRolesWithResponse request returning *SecurityControllerGetRolesResponse
func (c *ClientWithResponses) SecurityControllerGetRolesWithResponse(ctx context.Context, params *SecurityControllerGetRolesParams) (*SecurityControllerGetRolesResponse, error) {
	rsp, err := c.SecurityControllerGetRoles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerGetRolesResponse(rsp)
}

// SecurityControllerAddRoleWithBodyWithResponse request with arbitrary body returning *SecurityControllerAddRoleResponse
func (c *ClientWithResponses) SecurityControllerAddRoleWithBodyWithResponse(ctx context.Context, params *SecurityControllerAddRoleParams, contentType string, body io.Reader) (*SecurityControllerAddRoleResponse, error) {
	rsp, err := c.SecurityControllerAddRoleWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerAddRoleResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerAddRoleWithResponse(ctx context.Context, params *SecurityControllerAddRoleParams, body SecurityControllerAddRoleJSONRequestBody) (*SecurityControllerAddRoleResponse, error) {
	rsp, err := c.SecurityControllerAddRole(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerAddRoleResponse(rsp)
}

// SecurityControllerUpdateRoleWithBodyWithResponse request with arbitrary body returning *SecurityControllerUpdateRoleResponse
func (c *ClientWithResponses) SecurityControllerUpdateRoleWithBodyWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, contentType string, body io.Reader) (*SecurityControllerUpdateRoleResponse, error) {
	rsp, err := c.SecurityControllerUpdateRoleWithBody(ctx, roleId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerUpdateRoleResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerUpdateRoleWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerUpdateRoleParams, body SecurityControllerUpdateRoleJSONRequestBody) (*SecurityControllerUpdateRoleResponse, error) {
	rsp, err := c.SecurityControllerUpdateRole(ctx, roleId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerUpdateRoleResponse(rsp)
}

// SecurityControllerRemoveRolePolicyWithResponse request returning *SecurityControllerRemoveRolePolicyResponse
func (c *ClientWithResponses) SecurityControllerRemoveRolePolicyWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRolePolicyParams) (*SecurityControllerRemoveRolePolicyResponse, error) {
	rsp, err := c.SecurityControllerRemoveRolePolicy(ctx, roleId, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerRemoveRolePolicyResponse(rsp)
}

// SecurityControllerSetRolePolicyWithResponse request returning *SecurityControllerSetRolePolicyResponse
func (c *ClientWithResponses) SecurityControllerSetRolePolicyWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerSetRolePolicyParams) (*SecurityControllerSetRolePolicyResponse, error) {
	rsp, err := c.SecurityControllerSetRolePolicy(ctx, roleId, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerSetRolePolicyResponse(rsp)
}

// SecurityControllerRemoveRoleRuleWithResponse request returning *SecurityControllerRemoveRoleRuleResponse
func (c *ClientWithResponses) SecurityControllerRemoveRoleRuleWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerRemoveRoleRuleParams) (*SecurityControllerRemoveRoleRuleResponse, error) {
	rsp, err := c.SecurityControllerRemoveRoleRule(ctx, roleId, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerRemoveRoleRuleResponse(rsp)
}

// SecurityControllerSetRoleRuleWithResponse request returning *SecurityControllerSetRoleRuleResponse
func (c *ClientWithResponses) SecurityControllerSetRoleRuleWithResponse(ctx context.Context, roleId RoleId, params *SecurityControllerSetRoleRuleParams) (*SecurityControllerSetRoleRuleResponse, error) {
	rsp, err := c.SecurityControllerSetRoleRule(ctx, roleId, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerSetRoleRuleResponse(rsp)
}

// SecurityControllerRemoveRulesWithResponse request returning *SecurityControllerRemoveRulesResponse
func (c *ClientWithResponses) SecurityControllerRemoveRulesWithResponse(ctx context.Context, params *SecurityControllerRemoveRulesParams) (*SecurityControllerRemoveRulesResponse, error) {
	rsp, err := c.SecurityControllerRemoveRules(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerRemoveRulesResponse(rsp)
}

// SecurityControllerGetRulesWithResponse request returning *SecurityControllerGetRulesResponse
func (c *ClientWithResponses) SecurityControllerGetRulesWithResponse(ctx context.Context, params *SecurityControllerGetRulesParams) (*SecurityControllerGetRulesResponse, error) {
	rsp, err := c.SecurityControllerGetRules(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerGetRulesResponse(rsp)
}

// SecurityControllerAddRuleWithBodyWithResponse request with arbitrary body returning *SecurityControllerAddRuleResponse
func (c *ClientWithResponses) SecurityControllerAddRuleWithBodyWithResponse(ctx context.Context, params *SecurityControllerAddRuleParams, contentType string, body io.Reader) (*SecurityControllerAddRuleResponse, error) {
	rsp, err := c.SecurityControllerAddRuleWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerAddRuleResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerAddRuleWithResponse(ctx context.Context, params *SecurityControllerAddRuleParams, body SecurityControllerAddRuleJSONRequestBody) (*SecurityControllerAddRuleResponse, error) {
	rsp, err := c.SecurityControllerAddRule(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerAddRuleResponse(rsp)
}

// SecurityControllerUpdateRuleWithBodyWithResponse request with arbitrary body returning *SecurityControllerUpdateRuleResponse
func (c *ClientWithResponses) SecurityControllerUpdateRuleWithBodyWithResponse(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, contentType string, body io.Reader) (*SecurityControllerUpdateRuleResponse, error) {
	rsp, err := c.SecurityControllerUpdateRuleWithBody(ctx, ruleId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerUpdateRuleResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerUpdateRuleWithResponse(ctx context.Context, ruleId SecurityRuleId, params *SecurityControllerUpdateRuleParams, body SecurityControllerUpdateRuleJSONRequestBody) (*SecurityControllerUpdateRuleResponse, error) {
	rsp, err := c.SecurityControllerUpdateRule(ctx, ruleId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerUpdateRuleResponse(rsp)
}

// SecurityControllerLogoutUserWithResponse request returning *SecurityControllerLogoutUserResponse
func (c *ClientWithResponses) SecurityControllerLogoutUserWithResponse(ctx context.Context) (*SecurityControllerLogoutUserResponse, error) {
	rsp, err := c.SecurityControllerLogoutUser(ctx)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerLogoutUserResponse(rsp)
}

// SecurityControllerLoginUserWithResponse request returning *SecurityControllerLoginUserResponse
func (c *ClientWithResponses) SecurityControllerLoginUserWithResponse(ctx context.Context, params *SecurityControllerLoginUserParams) (*SecurityControllerLoginUserResponse, error) {
	rsp, err := c.SecurityControllerLoginUser(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerLoginUserResponse(rsp)
}

// SecurityControllerLoginUserRunAsWithBodyWithResponse request with arbitrary body returning *SecurityControllerLoginUserRunAsResponse
func (c *ClientWithResponses) SecurityControllerLoginUserRunAsWithBodyWithResponse(ctx context.Context, params *SecurityControllerLoginUserParams, contentType string, body io.Reader) (*SecurityControllerLoginUserRunAsResponse, error) {
	rsp, err := c.SecurityControllerLoginUserRunAsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerLoginUserRunAsResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerLoginUserRunAsWithResponse(ctx context.Context, params *SecurityControllerLoginUserParams, body SecurityControllerLoginUserJSONRequestBody) (*SecurityControllerLoginUserRunAsResponse, error) {
	rsp, err := c.SecurityControllerLoginUserRunAs(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerLoginUserRunAsResponse(rsp)
}

// SecurityControllerRevokeAllTokensWithResponse request returning *SecurityControllerRevokeAllTokensResponse
func (c *ClientWithResponses) SecurityControllerRevokeAllTokensWithResponse(ctx context.Context) (*SecurityControllerRevokeAllTokensResponse, error) {
	rsp, err := c.SecurityControllerRevokeAllTokens(ctx)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerRevokeAllTokensResponse(rsp)
}

// SecurityControllerDeleteUsersWithResponse request returning *SecurityControllerDeleteUsersResponse
func (c *ClientWithResponses) SecurityControllerDeleteUsersWithResponse(ctx context.Context, params *SecurityControllerDeleteUsersParams) (*SecurityControllerDeleteUsersResponse, error) {
	rsp, err := c.SecurityControllerDeleteUsers(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerDeleteUsersResponse(rsp)
}

// SecurityControllerGetUsersWithResponse request returning *SecurityControllerGetUsersResponse
func (c *ClientWithResponses) SecurityControllerGetUsersWithResponse(ctx context.Context, params *SecurityControllerGetUsersParams) (*SecurityControllerGetUsersResponse, error) {
	rsp, err := c.SecurityControllerGetUsers(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerGetUsersResponse(rsp)
}

// SecurityControllerCreateUserWithBodyWithResponse request with arbitrary body returning *SecurityControllerCreateUserResponse
func (c *ClientWithResponses) SecurityControllerCreateUserWithBodyWithResponse(ctx context.Context, params *SecurityControllerCreateUserParams, contentType string, body io.Reader) (*SecurityControllerCreateUserResponse, error) {
	rsp, err := c.SecurityControllerCreateUserWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerCreateUserResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerCreateUserWithResponse(ctx context.Context, params *SecurityControllerCreateUserParams, body SecurityControllerCreateUserJSONRequestBody) (*SecurityControllerCreateUserResponse, error) {
	rsp, err := c.SecurityControllerCreateUser(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerCreateUserResponse(rsp)
}

// SecurityControllerGetUserMeWithResponse request returning *SecurityControllerGetUserMeResponse
func (c *ClientWithResponses) SecurityControllerGetUserMeWithResponse(ctx context.Context, params *SecurityControllerGetUserMeParams) (*SecurityControllerGetUserMeResponse, error) {
	rsp, err := c.SecurityControllerGetUserMe(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerGetUserMeResponse(rsp)
}

// SecurityControllerGetUserMePoliciesWithResponse request returning *SecurityControllerGetUserMePoliciesResponse
func (c *ClientWithResponses) SecurityControllerGetUserMePoliciesWithResponse(ctx context.Context, params *SecurityControllerGetUserMePoliciesParams) (*SecurityControllerGetUserMePoliciesResponse, error) {
	rsp, err := c.SecurityControllerGetUserMePolicies(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerGetUserMePoliciesResponse(rsp)
}

// SecurityControllerUpdateUserWithBodyWithResponse request with arbitrary body returning *SecurityControllerUpdateUserResponse
func (c *ClientWithResponses) SecurityControllerUpdateUserWithBodyWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, contentType string, body io.Reader) (*SecurityControllerUpdateUserResponse, error) {
	rsp, err := c.SecurityControllerUpdateUserWithBody(ctx, userId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) SecurityControllerUpdateUserWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerUpdateUserParams, body SecurityControllerUpdateUserJSONRequestBody) (*SecurityControllerUpdateUserResponse, error) {
	rsp, err := c.SecurityControllerUpdateUser(ctx, userId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerUpdateUserResponse(rsp)
}

// SecurityControllerRemoveUserRoleWithResponse request returning *SecurityControllerRemoveUserRoleResponse
func (c *ClientWithResponses) SecurityControllerRemoveUserRoleWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerRemoveUserRoleParams) (*SecurityControllerRemoveUserRoleResponse, error) {
	rsp, err := c.SecurityControllerRemoveUserRole(ctx, userId, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerRemoveUserRoleResponse(rsp)
}

// SecurityControllerSetUserRoleWithResponse request returning *SecurityControllerSetUserRoleResponse
func (c *ClientWithResponses) SecurityControllerSetUserRoleWithResponse(ctx context.Context, userId UserIdRequired, params *SecurityControllerSetUserRoleParams) (*SecurityControllerSetUserRoleResponse, error) {
	rsp, err := c.SecurityControllerSetUserRole(ctx, userId, params)
	if err != nil {
		return nil, err
	}
	return ParseSecurityControllerSetUserRoleResponse(rsp)
}

// SyscheckControllerPutSyscheckWithResponse request returning *SyscheckControllerPutSyscheckResponse
func (c *ClientWithResponses) SyscheckControllerPutSyscheckWithResponse(ctx context.Context, params *SyscheckControllerPutSyscheckParams) (*SyscheckControllerPutSyscheckResponse, error) {
	rsp, err := c.SyscheckControllerPutSyscheck(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSyscheckControllerPutSyscheckResponse(rsp)
}

// SyscheckControllerDeleteSyscheckAgentWithResponse request returning *SyscheckControllerDeleteSyscheckAgentResponse
func (c *ClientWithResponses) SyscheckControllerDeleteSyscheckAgentWithResponse(ctx context.Context, agentId AgentId, params *SyscheckControllerDeleteSyscheckAgentParams) (*SyscheckControllerDeleteSyscheckAgentResponse, error) {
	rsp, err := c.SyscheckControllerDeleteSyscheckAgent(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseSyscheckControllerDeleteSyscheckAgentResponse(rsp)
}

// SyscheckControllerGetSyscheckAgentWithResponse request returning *SyscheckControllerGetSyscheckAgentResponse
func (c *ClientWithResponses) SyscheckControllerGetSyscheckAgentWithResponse(ctx context.Context, agentId AgentId, params *SyscheckControllerGetSyscheckAgentParams) (*SyscheckControllerGetSyscheckAgentResponse, error) {
	rsp, err := c.SyscheckControllerGetSyscheckAgent(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseSyscheckControllerGetSyscheckAgentResponse(rsp)
}

// SyscheckControllerGetLastScanAgentWithResponse request returning *SyscheckControllerGetLastScanAgentResponse
func (c *ClientWithResponses) SyscheckControllerGetLastScanAgentWithResponse(ctx context.Context, agentId AgentId, params *SyscheckControllerGetLastScanAgentParams) (*SyscheckControllerGetLastScanAgentResponse, error) {
	rsp, err := c.SyscheckControllerGetLastScanAgent(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseSyscheckControllerGetLastScanAgentResponse(rsp)
}

// SyscollectorControllerGetHardwareInfoWithResponse request returning *SyscollectorControllerGetHardwareInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetHardwareInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHardwareInfoParams) (*SyscollectorControllerGetHardwareInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetHardwareInfo(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseSyscollectorControllerGetHardwareInfoResponse(rsp)
}

// SyscollectorControllerGetHotfixInfoWithResponse request returning *SyscollectorControllerGetHotfixInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetHotfixInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetHotfixInfoParams) (*SyscollectorControllerGetHotfixInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetHotfixInfo(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseSyscollectorControllerGetHotfixInfoResponse(rsp)
}

// SyscollectorControllerGetNetworkAddressInfoWithResponse request returning *SyscollectorControllerGetNetworkAddressInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetNetworkAddressInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkAddressInfoParams) (*SyscollectorControllerGetNetworkAddressInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetNetworkAddressInfo(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseSyscollectorControllerGetNetworkAddressInfoResponse(rsp)
}

// SyscollectorControllerGetNetworkInterfaceInfoWithResponse request returning *SyscollectorControllerGetNetworkInterfaceInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetNetworkInterfaceInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkInterfaceInfoParams) (*SyscollectorControllerGetNetworkInterfaceInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetNetworkInterfaceInfo(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseSyscollectorControllerGetNetworkInterfaceInfoResponse(rsp)
}

// SyscollectorControllerGetNetworkProtocolInfoWithResponse request returning *SyscollectorControllerGetNetworkProtocolInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetNetworkProtocolInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetNetworkProtocolInfoParams) (*SyscollectorControllerGetNetworkProtocolInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetNetworkProtocolInfo(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseSyscollectorControllerGetNetworkProtocolInfoResponse(rsp)
}

// SyscollectorControllerGetOsInfoWithResponse request returning *SyscollectorControllerGetOsInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetOsInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetOsInfoParams) (*SyscollectorControllerGetOsInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetOsInfo(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseSyscollectorControllerGetOsInfoResponse(rsp)
}

// SyscollectorControllerGetPackagesInfoWithResponse request returning *SyscollectorControllerGetPackagesInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetPackagesInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPackagesInfoParams) (*SyscollectorControllerGetPackagesInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetPackagesInfo(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseSyscollectorControllerGetPackagesInfoResponse(rsp)
}

// SyscollectorControllerGetPortsInfoWithResponse request returning *SyscollectorControllerGetPortsInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetPortsInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetPortsInfoParams) (*SyscollectorControllerGetPortsInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetPortsInfo(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseSyscollectorControllerGetPortsInfoResponse(rsp)
}

// SyscollectorControllerGetProcessesInfoWithResponse request returning *SyscollectorControllerGetProcessesInfoResponse
func (c *ClientWithResponses) SyscollectorControllerGetProcessesInfoWithResponse(ctx context.Context, agentId AgentId, params *SyscollectorControllerGetProcessesInfoParams) (*SyscollectorControllerGetProcessesInfoResponse, error) {
	rsp, err := c.SyscollectorControllerGetProcessesInfo(ctx, agentId, params)
	if err != nil {
		return nil, err
	}
	return ParseSyscollectorControllerGetProcessesInfoResponse(rsp)
}

// ParseDefaultControllerDefaultInfoResponse parses an HTTP response from a DefaultControllerDefaultInfoWithResponse call
func ParseDefaultControllerDefaultInfoResponse(rsp *http.Response) (*DefaultControllerDefaultInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DefaultControllerDefaultInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *BasicInfo `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActiveResponseControllerRunCommandResponse parses an HTTP response from a ActiveResponseControllerRunCommandWithResponse call
func ParseActiveResponseControllerRunCommandResponse(rsp *http.Response) (*ActiveResponseControllerRunCommandResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ActiveResponseControllerRunCommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerDeleteAgentsResponse parses an HTTP response from a AgentsControllerDeleteAgentsWithResponse call
func ParseAgentsControllerDeleteAgentsResponse(rsp *http.Response) (*AgentsControllerDeleteAgentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerDeleteAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {
				// Embedded struct due to allOf(#/components/schemas/AllItemsResponseAgentIDs)
				AllItemsResponseAgentIDs `yaml:",inline"`
				// Embedded fields due to inline allOf schema

				// Return older than parameter used. It can be the default value or the parameter sent by the user
				OlderThan *string `json:"older_than,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetAgentsResponse parses an HTTP response from a AgentsControllerGetAgentsWithResponse call
func ParseAgentsControllerGetAgentsResponse(rsp *http.Response) (*AgentsControllerGetAgentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgents `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerAddAgentResponse parses an HTTP response from a AgentsControllerAddAgentWithResponse call
func ParseAgentsControllerAddAgentResponse(rsp *http.Response) (*AgentsControllerAddAgentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerAddAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AgentIdKey `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerDeleteMultipleAgentSingleGroupResponse parses an HTTP response from a AgentsControllerDeleteMultipleAgentSingleGroupWithResponse call
func ParseAgentsControllerDeleteMultipleAgentSingleGroupResponse(rsp *http.Response) (*AgentsControllerDeleteMultipleAgentSingleGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerDeleteMultipleAgentSingleGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {
				// Embedded struct due to allOf(#/components/schemas/AllItemsResponseAgentIDs)
				AllItemsResponseAgentIDs `yaml:",inline"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerPutMultipleAgentSingleGroupResponse parses an HTTP response from a AgentsControllerPutMultipleAgentSingleGroupWithResponse call
func ParseAgentsControllerPutMultipleAgentSingleGroupResponse(rsp *http.Response) (*AgentsControllerPutMultipleAgentSingleGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerPutMultipleAgentSingleGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {
				// Embedded struct due to allOf(#/components/schemas/AllItemsResponseAgentIDs)
				AllItemsResponseAgentIDs `yaml:",inline"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerRestartAgentsByGroupResponse parses an HTTP response from a AgentsControllerRestartAgentsByGroupWithResponse call
func ParseAgentsControllerRestartAgentsByGroupResponse(rsp *http.Response) (*AgentsControllerRestartAgentsByGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerRestartAgentsByGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerInsertAgentResponse parses an HTTP response from a AgentsControllerInsertAgentWithResponse call
func ParseAgentsControllerInsertAgentResponse(rsp *http.Response) (*AgentsControllerInsertAgentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerInsertAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AgentIdKey `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerPostNewAgentResponse parses an HTTP response from a AgentsControllerPostNewAgentWithResponse call
func ParseAgentsControllerPostNewAgentResponse(rsp *http.Response) (*AgentsControllerPostNewAgentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerPostNewAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AgentIdKey `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetAgentNoGroupResponse parses an HTTP response from a AgentsControllerGetAgentNoGroupWithResponse call
func ParseAgentsControllerGetAgentNoGroupResponse(rsp *http.Response) (*AgentsControllerGetAgentNoGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetAgentNoGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgents `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerRestartAgentsByNodeResponse parses an HTTP response from a AgentsControllerRestartAgentsByNodeWithResponse call
func ParseAgentsControllerRestartAgentsByNodeResponse(rsp *http.Response) (*AgentsControllerRestartAgentsByNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerRestartAgentsByNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetAgentOutdatedResponse parses an HTTP response from a AgentsControllerGetAgentOutdatedWithResponse call
func ParseAgentsControllerGetAgentOutdatedResponse(rsp *http.Response) (*AgentsControllerGetAgentOutdatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetAgentOutdatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentsSimple `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerRestartAgentsResponse parses an HTTP response from a AgentsControllerRestartAgentsWithResponse call
func ParseAgentsControllerRestartAgentsResponse(rsp *http.Response) (*AgentsControllerRestartAgentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerRestartAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetAgentFieldsResponse parses an HTTP response from a AgentsControllerGetAgentFieldsWithResponse call
func ParseAgentsControllerGetAgentFieldsResponse(rsp *http.Response) (*AgentsControllerGetAgentFieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetAgentFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentsDistinct `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetAgentSummaryOsResponse parses an HTTP response from a AgentsControllerGetAgentSummaryOsWithResponse call
func ParseAgentsControllerGetAgentSummaryOsResponse(rsp *http.Response) (*AgentsControllerGetAgentSummaryOsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetAgentSummaryOsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetAgentSummaryStatusResponse parses an HTTP response from a AgentsControllerGetAgentSummaryStatusWithResponse call
func ParseAgentsControllerGetAgentSummaryStatusResponse(rsp *http.Response) (*AgentsControllerGetAgentSummaryStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetAgentSummaryStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AgentsSummaryStatus `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetAgentConfigResponse parses an HTTP response from a AgentsControllerGetAgentConfigWithResponse call
func ParseAgentsControllerGetAgentConfigResponse(rsp *http.Response) (*AgentsControllerGetAgentConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetAgentConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema

			// Current agent's configuration. The output varies with requested component and the agent configuration
			Data *AgentConfiguration `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerDeleteSingleAgentMultipleGroupsResponse parses an HTTP response from a AgentsControllerDeleteSingleAgentMultipleGroupsWithResponse call
func ParseAgentsControllerDeleteSingleAgentMultipleGroupsResponse(rsp *http.Response) (*AgentsControllerDeleteSingleAgentMultipleGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerDeleteSingleAgentMultipleGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {
				// Embedded struct due to allOf(#/components/schemas/AllItemsResponseGroupIDs)
				AllItemsResponseGroupIDs `yaml:",inline"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetSyncAgentResponse parses an HTTP response from a AgentsControllerGetSyncAgentWithResponse call
func ParseAgentsControllerGetSyncAgentResponse(rsp *http.Response) (*AgentsControllerGetSyncAgentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetSyncAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentsSynced `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerDeleteSingleAgentSingleGroupResponse parses an HTTP response from a AgentsControllerDeleteSingleAgentSingleGroupWithResponse call
func ParseAgentsControllerDeleteSingleAgentSingleGroupResponse(rsp *http.Response) (*AgentsControllerDeleteSingleAgentSingleGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerDeleteSingleAgentSingleGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerPutAgentSingleGroupResponse parses an HTTP response from a AgentsControllerPutAgentSingleGroupWithResponse call
func ParseAgentsControllerPutAgentSingleGroupResponse(rsp *http.Response) (*AgentsControllerPutAgentSingleGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerPutAgentSingleGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse "yaml:\",inline\""
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse "json:\"data,omitempty\""
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetAgentKeyResponse parses an HTTP response from a AgentsControllerGetAgentKeyWithResponse call
func ParseAgentsControllerGetAgentKeyResponse(rsp *http.Response) (*AgentsControllerGetAgentKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetAgentKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentsKeys `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerRestartAgentResponse parses an HTTP response from a AgentsControllerRestartAgentWithResponse call
func ParseAgentsControllerRestartAgentResponse(rsp *http.Response) (*AgentsControllerRestartAgentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerRestartAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *ItemAffected `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerPutUpgradeAgentResponse parses an HTTP response from a AgentsControllerPutUpgradeAgentWithResponse call
func ParseAgentsControllerPutUpgradeAgentResponse(rsp *http.Response) (*AgentsControllerPutUpgradeAgentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerPutUpgradeAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerPutUpgradeCustomAgentResponse parses an HTTP response from a AgentsControllerPutUpgradeCustomAgentWithResponse call
func ParseAgentsControllerPutUpgradeCustomAgentResponse(rsp *http.Response) (*AgentsControllerPutUpgradeCustomAgentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerPutUpgradeCustomAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetAgentUpgradeResponse parses an HTTP response from a AgentsControllerGetAgentUpgradeWithResponse call
func ParseAgentsControllerGetAgentUpgradeResponse(rsp *http.Response) (*AgentsControllerGetAgentUpgradeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetAgentUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseCiscatControllerGetAgentsCiscatResultsResponse parses an HTTP response from a CiscatControllerGetAgentsCiscatResultsWithResponse call
func ParseCiscatControllerGetAgentsCiscatResultsResponse(rsp *http.Response) (*CiscatControllerGetAgentsCiscatResultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CiscatControllerGetAgentsCiscatResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseCiscatResult `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetApiConfigResponse parses an HTTP response from a ClusterControllerGetApiConfigWithResponse call
func ParseClusterControllerGetApiConfigResponse(rsp *http.Response) (*ClusterControllerGetApiConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetApiConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetConfValidationResponse parses an HTTP response from a ClusterControllerGetConfValidationWithResponse call
func ParseClusterControllerGetConfValidationResponse(rsp *http.Response) (*ClusterControllerGetConfValidationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetConfValidationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseValidationStatus `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetHealthcheckResponse parses an HTTP response from a ClusterControllerGetHealthcheckWithResponse call
func ParseClusterControllerGetHealthcheckResponse(rsp *http.Response) (*ClusterControllerGetHealthcheckResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetHealthcheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseNodeHealthcheck `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetConfigResponse parses an HTTP response from a ClusterControllerGetConfigWithResponse call
func ParseClusterControllerGetConfigResponse(rsp *http.Response) (*ClusterControllerGetConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {

				// Network interface used by the **master** to listen to incoming connections
				BindAddr *string `json:"bind_addr,omitempty"`

				// Whether the cluster is enabled or not
				Disabled *bool `json:"disabled,omitempty"`

				// Whether to hide the cluster information in the alerts
				Hidden *string `json:"hidden,omitempty"`

				// Cluster key used to encrypt messages
				Key *string `json:"key,omitempty"`

				// Cluster name
				Name *string `json:"name,omitempty"`

				// Node name
				NodeName *string `json:"node_name,omitempty"`

				// Node type
				NodeType *string `json:"node_type,omitempty"`

				// List of cluster master nodes. This list is used by **worker** nodes to connect to the master
				Nodes *[]string `json:"nodes,omitempty"`

				// Port used by the **master** node to communicate with workers
				Port *int `json:"port,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetClusterNodeResponse parses an HTTP response from a ClusterControllerGetClusterNodeWithResponse call
func ParseClusterControllerGetClusterNodeResponse(rsp *http.Response) (*ClusterControllerGetClusterNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetClusterNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {

				// Cluster name the node belongs to
				Cluster *string `json:"cluster,omitempty"`

				// Node name
				Node *string `json:"node,omitempty"`

				// Node type
				Type *string `json:"type,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetClusterNodesResponse parses an HTTP response from a ClusterControllerGetClusterNodesWithResponse call
func ParseClusterControllerGetClusterNodesResponse(rsp *http.Response) (*ClusterControllerGetClusterNodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetClusterNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseClusterNodes `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerPutRestartResponse parses an HTTP response from a ClusterControllerPutRestartWithResponse call
func ParseClusterControllerPutRestartResponse(rsp *http.Response) (*ClusterControllerPutRestartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerPutRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseNodeIDs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetStatusResponse parses an HTTP response from a ClusterControllerGetStatusWithResponse call
func ParseClusterControllerGetStatusResponse(rsp *http.Response) (*ClusterControllerGetStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {

				// Whether the cluster is enabled in the Wazuh configuration
				Enabled *string `json:"enabled,omitempty"`

				// Whether the cluster daemon is running
				Running *string `json:"running,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetConfigurationNodeResponse parses an HTTP response from a ClusterControllerGetConfigurationNodeWithResponse call
func ParseClusterControllerGetConfigurationNodeResponse(rsp *http.Response) (*ClusterControllerGetConfigurationNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetConfigurationNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhMangerConfiguration `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetNodeConfigResponse parses an HTTP response from a ClusterControllerGetNodeConfigWithResponse call
func ParseClusterControllerGetNodeConfigResponse(rsp *http.Response) (*ClusterControllerGetNodeConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetNodeConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerDeleteFilesNodeResponse parses an HTTP response from a ClusterControllerDeleteFilesNodeWithResponse call
func ParseClusterControllerDeleteFilesNodeResponse(rsp *http.Response) (*ClusterControllerDeleteFilesNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerDeleteFilesNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetFilesNodeResponse parses an HTTP response from a ClusterControllerGetFilesNodeWithResponse call
func ParseClusterControllerGetFilesNodeResponse(rsp *http.Response) (*ClusterControllerGetFilesNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetFilesNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {

				// File contents
				Contents *string `json:"contents,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerPutFilesNodeResponse parses an HTTP response from a ClusterControllerPutFilesNodeWithResponse call
func ParseClusterControllerPutFilesNodeResponse(rsp *http.Response) (*ClusterControllerPutFilesNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerPutFilesNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetInfoNodeResponse parses an HTTP response from a ClusterControllerGetInfoNodeWithResponse call
func ParseClusterControllerGetInfoNodeResponse(rsp *http.Response) (*ClusterControllerGetInfoNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetInfoNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhInfo `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetLogNodeResponse parses an HTTP response from a ClusterControllerGetLogNodeWithResponse call
func ParseClusterControllerGetLogNodeResponse(rsp *http.Response) (*ClusterControllerGetLogNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetLogNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhLogs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetLogSummaryNodeResponse parses an HTTP response from a ClusterControllerGetLogSummaryNodeWithResponse call
func ParseClusterControllerGetLogSummaryNodeResponse(rsp *http.Response) (*ClusterControllerGetLogSummaryNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetLogSummaryNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhLogsSummary `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetStatsNodeResponse parses an HTTP response from a ClusterControllerGetStatsNodeWithResponse call
func ParseClusterControllerGetStatsNodeResponse(rsp *http.Response) (*ClusterControllerGetStatsNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetStatsNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetStatsAnalysisdNodeResponse parses an HTTP response from a ClusterControllerGetStatsAnalysisdNodeWithResponse call
func ParseClusterControllerGetStatsAnalysisdNodeResponse(rsp *http.Response) (*ClusterControllerGetStatsAnalysisdNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetStatsAnalysisdNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetStatsHourlyNodeResponse parses an HTTP response from a ClusterControllerGetStatsHourlyNodeWithResponse call
func ParseClusterControllerGetStatsHourlyNodeResponse(rsp *http.Response) (*ClusterControllerGetStatsHourlyNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetStatsHourlyNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetStatsRemotedNodeResponse parses an HTTP response from a ClusterControllerGetStatsRemotedNodeWithResponse call
func ParseClusterControllerGetStatsRemotedNodeResponse(rsp *http.Response) (*ClusterControllerGetStatsRemotedNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetStatsRemotedNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetStatsWeeklyNodeResponse parses an HTTP response from a ClusterControllerGetStatsWeeklyNodeWithResponse call
func ParseClusterControllerGetStatsWeeklyNodeResponse(rsp *http.Response) (*ClusterControllerGetStatsWeeklyNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetStatsWeeklyNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseClusterControllerGetStatusNodeResponse parses an HTTP response from a ClusterControllerGetStatusNodeWithResponse call
func ParseClusterControllerGetStatusNodeResponse(rsp *http.Response) (*ClusterControllerGetStatusNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterControllerGetStatusNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhDaemonsStatus `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseDecodersControllerGetDecodersResponse parses an HTTP response from a DecodersControllerGetDecodersWithResponse call
func ParseDecodersControllerGetDecodersResponse(rsp *http.Response) (*DecodersControllerGetDecodersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DecodersControllerGetDecodersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseDecoders `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseDecodersControllerGetDecodersFilesResponse parses an HTTP response from a DecodersControllerGetDecodersFilesWithResponse call
func ParseDecodersControllerGetDecodersFilesResponse(rsp *http.Response) (*DecodersControllerGetDecodersFilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DecodersControllerGetDecodersFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseDecodersFiles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseDecodersControllerGetDownloadFileResponse parses an HTTP response from a DecodersControllerGetDownloadFileWithResponse call
func ParseDecodersControllerGetDownloadFileResponse(rsp *http.Response) (*DecodersControllerGetDownloadFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DecodersControllerGetDownloadFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseDecodersControllerGetDecodersParentsResponse parses an HTTP response from a DecodersControllerGetDecodersParentsWithResponse call
func ParseDecodersControllerGetDecodersParentsResponse(rsp *http.Response) (*DecodersControllerGetDecodersParentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DecodersControllerGetDecodersParentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseExperimentalControllerGetCisCatResultsResponse parses an HTTP response from a ExperimentalControllerGetCisCatResultsWithResponse call
func ParseExperimentalControllerGetCisCatResultsResponse(rsp *http.Response) (*ExperimentalControllerGetCisCatResultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetCisCatResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseCiscatResult `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseExperimentalControllerClearSyscheckDatabaseResponse parses an HTTP response from a ExperimentalControllerClearSyscheckDatabaseWithResponse call
func ParseExperimentalControllerClearSyscheckDatabaseResponse(rsp *http.Response) (*ExperimentalControllerClearSyscheckDatabaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerClearSyscheckDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseExperimentalControllerGetHardwareInfoResponse parses an HTTP response from a ExperimentalControllerGetHardwareInfoWithResponse call
func ParseExperimentalControllerGetHardwareInfoResponse(rsp *http.Response) (*ExperimentalControllerGetHardwareInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetHardwareInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorHardware `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseExperimentalControllerGetHotfixesInfoResponse parses an HTTP response from a ExperimentalControllerGetHotfixesInfoWithResponse call
func ParseExperimentalControllerGetHotfixesInfoResponse(rsp *http.Response) (*ExperimentalControllerGetHotfixesInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetHotfixesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorHotfixes `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseExperimentalControllerGetNetworkAddressInfoResponse parses an HTTP response from a ExperimentalControllerGetNetworkAddressInfoWithResponse call
func ParseExperimentalControllerGetNetworkAddressInfoResponse(rsp *http.Response) (*ExperimentalControllerGetNetworkAddressInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetNetworkAddressInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorNetwork `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseExperimentalControllerGetNetworkInterfaceInfoResponse parses an HTTP response from a ExperimentalControllerGetNetworkInterfaceInfoWithResponse call
func ParseExperimentalControllerGetNetworkInterfaceInfoResponse(rsp *http.Response) (*ExperimentalControllerGetNetworkInterfaceInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetNetworkInterfaceInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorInterface `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseExperimentalControllerGetNetworkProtocolInfoResponse parses an HTTP response from a ExperimentalControllerGetNetworkProtocolInfoWithResponse call
func ParseExperimentalControllerGetNetworkProtocolInfoResponse(rsp *http.Response) (*ExperimentalControllerGetNetworkProtocolInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetNetworkProtocolInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorProtocol `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseExperimentalControllerGetOsInfoResponse parses an HTTP response from a ExperimentalControllerGetOsInfoWithResponse call
func ParseExperimentalControllerGetOsInfoResponse(rsp *http.Response) (*ExperimentalControllerGetOsInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetOsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorOS `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseExperimentalControllerGetPackagesInfoResponse parses an HTTP response from a ExperimentalControllerGetPackagesInfoWithResponse call
func ParseExperimentalControllerGetPackagesInfoResponse(rsp *http.Response) (*ExperimentalControllerGetPackagesInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetPackagesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorPackages `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseExperimentalControllerGetPortsInfoResponse parses an HTTP response from a ExperimentalControllerGetPortsInfoWithResponse call
func ParseExperimentalControllerGetPortsInfoResponse(rsp *http.Response) (*ExperimentalControllerGetPortsInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetPortsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorPorts `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseExperimentalControllerGetProcessesInfoResponse parses an HTTP response from a ExperimentalControllerGetProcessesInfoWithResponse call
func ParseExperimentalControllerGetProcessesInfoResponse(rsp *http.Response) (*ExperimentalControllerGetProcessesInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExperimentalControllerGetProcessesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorProcesses `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerDeleteGroupsResponse parses an HTTP response from a AgentsControllerDeleteGroupsWithResponse call
func ParseAgentsControllerDeleteGroupsResponse(rsp *http.Response) (*AgentsControllerDeleteGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerDeleteGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {
				// Embedded struct due to allOf(#/components/schemas/AllItemsResponseGroupIDs)
				AllItemsResponseGroupIDs `yaml:",inline"`
				// Embedded struct due to allOf(#/components/schemas/AgentGroupDeleted)
				AgentGroupDeleted `yaml:",inline"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetListGroupResponse parses an HTTP response from a AgentsControllerGetListGroupWithResponse call
func ParseAgentsControllerGetListGroupResponse(rsp *http.Response) (*AgentsControllerGetListGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetListGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseGroups `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerPostGroupResponse parses an HTTP response from a AgentsControllerPostGroupWithResponse call
func ParseAgentsControllerPostGroupResponse(rsp *http.Response) (*AgentsControllerPostGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerPostGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetAgentsInGroupResponse parses an HTTP response from a AgentsControllerGetAgentsInGroupWithResponse call
func ParseAgentsControllerGetAgentsInGroupResponse(rsp *http.Response) (*AgentsControllerGetAgentsInGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetAgentsInGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgents `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetGroupConfigResponse parses an HTTP response from a AgentsControllerGetGroupConfigWithResponse call
func ParseAgentsControllerGetGroupConfigResponse(rsp *http.Response) (*AgentsControllerGetGroupConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetGroupConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				AffectedItems      *[]GroupConfiguration `json:"affected_items,omitempty"`
				TotalAffectedItems *int32                `json:"total_affected_items,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerPutGroupConfigResponse parses an HTTP response from a AgentsControllerPutGroupConfigWithResponse call
func ParseAgentsControllerPutGroupConfigResponse(rsp *http.Response) (*AgentsControllerPutGroupConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerPutGroupConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetGroupFilesResponse parses an HTTP response from a AgentsControllerGetGroupFilesWithResponse call
func ParseAgentsControllerGetGroupFilesResponse(rsp *http.Response) (*AgentsControllerGetGroupFilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetGroupFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetGroupFileJsonResponse parses an HTTP response from a AgentsControllerGetGroupFileJsonWithResponse call
func ParseAgentsControllerGetGroupFileJsonResponse(rsp *http.Response) (*AgentsControllerGetGroupFileJsonResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetGroupFileJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *interface{} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseAgentsControllerGetGroupFileXmlResponse parses an HTTP response from a AgentsControllerGetGroupFileXmlWithResponse call
func ParseAgentsControllerGetGroupFileXmlResponse(rsp *http.Response) (*AgentsControllerGetGroupFileXmlResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AgentsControllerGetGroupFileXmlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseListsControllerGetListsResponse parses an HTTP response from a ListsControllerGetListsWithResponse call
func ParseListsControllerGetListsResponse(rsp *http.Response) (*ListsControllerGetListsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListsControllerGetListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseLists `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseListsControllerGetListsFilesResponse parses an HTTP response from a ListsControllerGetListsFilesWithResponse call
func ParseListsControllerGetListsFilesResponse(rsp *http.Response) (*ListsControllerGetListsFilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListsControllerGetListsFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseListsFiles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerGetApiConfigResponse parses an HTTP response from a ManagerControllerGetApiConfigWithResponse call
func ParseManagerControllerGetApiConfigResponse(rsp *http.Response) (*ManagerControllerGetApiConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetApiConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerGetConfigurationResponse parses an HTTP response from a ManagerControllerGetConfigurationWithResponse call
func ParseManagerControllerGetConfigurationResponse(rsp *http.Response) (*ManagerControllerGetConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhMangerConfiguration `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerGetConfValidationResponse parses an HTTP response from a ManagerControllerGetConfValidationWithResponse call
func ParseManagerControllerGetConfValidationResponse(rsp *http.Response) (*ManagerControllerGetConfValidationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetConfValidationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfigurationValidation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerGetManagerConfigOndemandResponse parses an HTTP response from a ManagerControllerGetManagerConfigOndemandWithResponse call
func ParseManagerControllerGetManagerConfigOndemandResponse(rsp *http.Response) (*ManagerControllerGetManagerConfigOndemandResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetManagerConfigOndemandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerDeleteFilesResponse parses an HTTP response from a ManagerControllerDeleteFilesWithResponse call
func ParseManagerControllerDeleteFilesResponse(rsp *http.Response) (*ManagerControllerDeleteFilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerDeleteFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded struct due to allOf(#/components/schemas/ConfirmationMessage)
			ConfirmationMessage `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerGetFilesResponse parses an HTTP response from a ManagerControllerGetFilesWithResponse call
func ParseManagerControllerGetFilesResponse(rsp *http.Response) (*ManagerControllerGetFilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *struct {

				// File contents
				Contents *string `json:"contents,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerPutFilesResponse parses an HTTP response from a ManagerControllerPutFilesWithResponse call
func ParseManagerControllerPutFilesResponse(rsp *http.Response) (*ManagerControllerPutFilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerPutFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded struct due to allOf(#/components/schemas/ConfirmationMessage)
			ConfirmationMessage `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerGetInfoResponse parses an HTTP response from a ManagerControllerGetInfoWithResponse call
func ParseManagerControllerGetInfoResponse(rsp *http.Response) (*ManagerControllerGetInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhInfo `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerGetLogResponse parses an HTTP response from a ManagerControllerGetLogWithResponse call
func ParseManagerControllerGetLogResponse(rsp *http.Response) (*ManagerControllerGetLogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhLogs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerGetLogSummaryResponse parses an HTTP response from a ManagerControllerGetLogSummaryWithResponse call
func ParseManagerControllerGetLogSummaryResponse(rsp *http.Response) (*ManagerControllerGetLogSummaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetLogSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhLogsSummary `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerPutRestartResponse parses an HTTP response from a ManagerControllerPutRestartWithResponse call
func ParseManagerControllerPutRestartResponse(rsp *http.Response) (*ManagerControllerPutRestartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerPutRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerGetStatsResponse parses an HTTP response from a ManagerControllerGetStatsWithResponse call
func ParseManagerControllerGetStatsResponse(rsp *http.Response) (*ManagerControllerGetStatsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerGetStatsAnalysisdResponse parses an HTTP response from a ManagerControllerGetStatsAnalysisdWithResponse call
func ParseManagerControllerGetStatsAnalysisdResponse(rsp *http.Response) (*ManagerControllerGetStatsAnalysisdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetStatsAnalysisdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerGetStatsHourlyResponse parses an HTTP response from a ManagerControllerGetStatsHourlyWithResponse call
func ParseManagerControllerGetStatsHourlyResponse(rsp *http.Response) (*ManagerControllerGetStatsHourlyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetStatsHourlyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerGetStatsRemotedResponse parses an HTTP response from a ManagerControllerGetStatsRemotedWithResponse call
func ParseManagerControllerGetStatsRemotedResponse(rsp *http.Response) (*ManagerControllerGetStatsRemotedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetStatsRemotedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerGetStatsWeeklyResponse parses an HTTP response from a ManagerControllerGetStatsWeeklyWithResponse call
func ParseManagerControllerGetStatsWeeklyResponse(rsp *http.Response) (*ManagerControllerGetStatsWeeklyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetStatsWeeklyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseWazuhStats `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseManagerControllerGetStatusResponse parses an HTTP response from a ManagerControllerGetStatusWithResponse call
func ParseManagerControllerGetStatusResponse(rsp *http.Response) (*ManagerControllerGetStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ManagerControllerGetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *WazuhDaemonsStatus `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseMitreControllerGetAttackResponse parses an HTTP response from a MitreControllerGetAttackWithResponse call
func ParseMitreControllerGetAttackResponse(rsp *http.Response) (*MitreControllerGetAttackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &MitreControllerGetAttackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseOverviewControllerGetOverviewAgentsResponse parses an HTTP response from a OverviewControllerGetOverviewAgentsWithResponse call
func ParseOverviewControllerGetOverviewAgentsResponse(rsp *http.Response) (*OverviewControllerGetOverviewAgentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &OverviewControllerGetOverviewAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *OverviewAgents `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseRulesControllerGetRulesResponse parses an HTTP response from a RulesControllerGetRulesWithResponse call
func ParseRulesControllerGetRulesResponse(rsp *http.Response) (*RulesControllerGetRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RulesControllerGetRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRules `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseRulesControllerGetRulesFilesResponse parses an HTTP response from a RulesControllerGetRulesFilesWithResponse call
func ParseRulesControllerGetRulesFilesResponse(rsp *http.Response) (*RulesControllerGetRulesFilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RulesControllerGetRulesFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRulesFiles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseRulesControllerGetDownloadFileResponse parses an HTTP response from a RulesControllerGetDownloadFileWithResponse call
func ParseRulesControllerGetDownloadFileResponse(rsp *http.Response) (*RulesControllerGetDownloadFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RulesControllerGetDownloadFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseRulesControllerGetRulesGroupsResponse parses an HTTP response from a RulesControllerGetRulesGroupsWithResponse call
func ParseRulesControllerGetRulesGroupsResponse(rsp *http.Response) (*RulesControllerGetRulesGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RulesControllerGetRulesGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseRulesControllerGetRulesRequirementResponse parses an HTTP response from a RulesControllerGetRulesRequirementWithResponse call
func ParseRulesControllerGetRulesRequirementResponse(rsp *http.Response) (*RulesControllerGetRulesRequirementResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RulesControllerGetRulesRequirementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseScaControllerGetScaAgentResponse parses an HTTP response from a ScaControllerGetScaAgentWithResponse call
func ParseScaControllerGetScaAgentResponse(rsp *http.Response) (*ScaControllerGetScaAgentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScaControllerGetScaAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSCADatabase `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseScaControllerGetScaChecksResponse parses an HTTP response from a ScaControllerGetScaChecksWithResponse call
func ParseScaControllerGetScaChecksResponse(rsp *http.Response) (*ScaControllerGetScaChecksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScaControllerGetScaChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSCAChecks `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerGetRbacActionsResponse parses an HTTP response from a SecurityControllerGetRbacActionsWithResponse call
func ParseSecurityControllerGetRbacActionsResponse(rsp *http.Response) (*SecurityControllerGetRbacActionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetRbacActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerDeleteSecurityConfigResponse parses an HTTP response from a SecurityControllerDeleteSecurityConfigWithResponse call
func ParseSecurityControllerDeleteSecurityConfigResponse(rsp *http.Response) (*SecurityControllerDeleteSecurityConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerDeleteSecurityConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerGetSecurityConfigResponse parses an HTTP response from a SecurityControllerGetSecurityConfigWithResponse call
func ParseSecurityControllerGetSecurityConfigResponse(rsp *http.Response) (*SecurityControllerGetSecurityConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetSecurityConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerPutSecurityConfigResponse parses an HTTP response from a SecurityControllerPutSecurityConfigWithResponse call
func ParseSecurityControllerPutSecurityConfigResponse(rsp *http.Response) (*SecurityControllerPutSecurityConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerPutSecurityConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerRemovePoliciesResponse parses an HTTP response from a SecurityControllerRemovePoliciesWithResponse call
func ParseSecurityControllerRemovePoliciesResponse(rsp *http.Response) (*SecurityControllerRemovePoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRemovePoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponsePolicies `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerGetPoliciesResponse parses an HTTP response from a SecurityControllerGetPoliciesWithResponse call
func ParseSecurityControllerGetPoliciesResponse(rsp *http.Response) (*SecurityControllerGetPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponsePolicies `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerAddPolicyResponse parses an HTTP response from a SecurityControllerAddPolicyWithResponse call
func ParseSecurityControllerAddPolicyResponse(rsp *http.Response) (*SecurityControllerAddPolicyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerAddPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponsePolicies `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerUpdatePolicyResponse parses an HTTP response from a SecurityControllerUpdatePolicyWithResponse call
func ParseSecurityControllerUpdatePolicyResponse(rsp *http.Response) (*SecurityControllerUpdatePolicyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerUpdatePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponsePolicies `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerGetRbacResourcesResponse parses an HTTP response from a SecurityControllerGetRbacResourcesWithResponse call
func ParseSecurityControllerGetRbacResourcesResponse(rsp *http.Response) (*SecurityControllerGetRbacResourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetRbacResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerRemoveRolesResponse parses an HTTP response from a SecurityControllerRemoveRolesWithResponse call
func ParseSecurityControllerRemoveRolesResponse(rsp *http.Response) (*SecurityControllerRemoveRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRemoveRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRoles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerGetRolesResponse parses an HTTP response from a SecurityControllerGetRolesWithResponse call
func ParseSecurityControllerGetRolesResponse(rsp *http.Response) (*SecurityControllerGetRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRoles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerAddRoleResponse parses an HTTP response from a SecurityControllerAddRoleWithResponse call
func ParseSecurityControllerAddRoleResponse(rsp *http.Response) (*SecurityControllerAddRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerAddRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRoles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerUpdateRoleResponse parses an HTTP response from a SecurityControllerUpdateRoleWithResponse call
func ParseSecurityControllerUpdateRoleResponse(rsp *http.Response) (*SecurityControllerUpdateRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerUpdateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRoles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerRemoveRolePolicyResponse parses an HTTP response from a SecurityControllerRemoveRolePolicyWithResponse call
func ParseSecurityControllerRemoveRolePolicyResponse(rsp *http.Response) (*SecurityControllerRemoveRolePolicyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRemoveRolePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerSetRolePolicyResponse parses an HTTP response from a SecurityControllerSetRolePolicyWithResponse call
func ParseSecurityControllerSetRolePolicyResponse(rsp *http.Response) (*SecurityControllerSetRolePolicyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerSetRolePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerRemoveRoleRuleResponse parses an HTTP response from a SecurityControllerRemoveRoleRuleWithResponse call
func ParseSecurityControllerRemoveRoleRuleResponse(rsp *http.Response) (*SecurityControllerRemoveRoleRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRemoveRoleRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerSetRoleRuleResponse parses an HTTP response from a SecurityControllerSetRoleRuleWithResponse call
func ParseSecurityControllerSetRoleRuleResponse(rsp *http.Response) (*SecurityControllerSetRoleRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerSetRoleRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerRemoveRulesResponse parses an HTTP response from a SecurityControllerRemoveRulesWithResponse call
func ParseSecurityControllerRemoveRulesResponse(rsp *http.Response) (*SecurityControllerRemoveRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRemoveRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRoles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerGetRulesResponse parses an HTTP response from a SecurityControllerGetRulesWithResponse call
func ParseSecurityControllerGetRulesResponse(rsp *http.Response) (*SecurityControllerGetRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRoles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerAddRuleResponse parses an HTTP response from a SecurityControllerAddRuleWithResponse call
func ParseSecurityControllerAddRuleResponse(rsp *http.Response) (*SecurityControllerAddRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerAddRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseRoles `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerUpdateRuleResponse parses an HTTP response from a SecurityControllerUpdateRuleWithResponse call
func ParseSecurityControllerUpdateRuleResponse(rsp *http.Response) (*SecurityControllerUpdateRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerUpdateRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerLogoutUserResponse parses an HTTP response from a SecurityControllerLogoutUserWithResponse call
func ParseSecurityControllerLogoutUserResponse(rsp *http.Response) (*SecurityControllerLogoutUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerLogoutUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerLoginUserResponse parses an HTTP response from a SecurityControllerLoginUserWithResponse call
func ParseSecurityControllerLoginUserResponse(rsp *http.Response) (*SecurityControllerLoginUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerLoginUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *Token `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseSecurityControllerLoginUserRunAsResponse parses an HTTP response from a SecurityControllerLoginUserRunAsWithResponse call
func ParseSecurityControllerLoginUserRunAsResponse(rsp *http.Response) (*SecurityControllerLoginUserRunAsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerLoginUserRunAsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Token *string `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerRevokeAllTokensResponse parses an HTTP response from a SecurityControllerRevokeAllTokensWithResponse call
func ParseSecurityControllerRevokeAllTokensResponse(rsp *http.Response) (*SecurityControllerRevokeAllTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRevokeAllTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerDeleteUsersResponse parses an HTTP response from a SecurityControllerDeleteUsersWithResponse call
func ParseSecurityControllerDeleteUsersResponse(rsp *http.Response) (*SecurityControllerDeleteUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerDeleteUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerGetUsersResponse parses an HTTP response from a SecurityControllerGetUsersWithResponse call
func ParseSecurityControllerGetUsersResponse(rsp *http.Response) (*SecurityControllerGetUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerCreateUserResponse parses an HTTP response from a SecurityControllerCreateUserWithResponse call
func ParseSecurityControllerCreateUserResponse(rsp *http.Response) (*SecurityControllerCreateUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerCreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerGetUserMeResponse parses an HTTP response from a SecurityControllerGetUserMeWithResponse call
func ParseSecurityControllerGetUserMeResponse(rsp *http.Response) (*SecurityControllerGetUserMeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetUserMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerGetUserMePoliciesResponse parses an HTTP response from a SecurityControllerGetUserMePoliciesWithResponse call
func ParseSecurityControllerGetUserMePoliciesResponse(rsp *http.Response) (*SecurityControllerGetUserMePoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerGetUserMePoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerUpdateUserResponse parses an HTTP response from a SecurityControllerUpdateUserWithResponse call
func ParseSecurityControllerUpdateUserResponse(rsp *http.Response) (*SecurityControllerUpdateUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerUpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerRemoveUserRoleResponse parses an HTTP response from a SecurityControllerRemoveUserRoleWithResponse call
func ParseSecurityControllerRemoveUserRoleResponse(rsp *http.Response) (*SecurityControllerRemoveUserRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerRemoveUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSecurityControllerSetUserRoleResponse parses an HTTP response from a SecurityControllerSetUserRoleWithResponse call
func ParseSecurityControllerSetUserRoleResponse(rsp *http.Response) (*SecurityControllerSetUserRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SecurityControllerSetUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseUsers `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSyscheckControllerPutSyscheckResponse parses an HTTP response from a SyscheckControllerPutSyscheckWithResponse call
func ParseSyscheckControllerPutSyscheckResponse(rsp *http.Response) (*SyscheckControllerPutSyscheckResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SyscheckControllerPutSyscheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseAgentIDs `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSyscheckControllerDeleteSyscheckAgentResponse parses an HTTP response from a SyscheckControllerDeleteSyscheckAgentWithResponse call
func ParseSyscheckControllerDeleteSyscheckAgentResponse(rsp *http.Response) (*SyscheckControllerDeleteSyscheckAgentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SyscheckControllerDeleteSyscheckAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponse `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSyscheckControllerGetSyscheckAgentResponse parses an HTTP response from a SyscheckControllerGetSyscheckAgentWithResponse call
func ParseSyscheckControllerGetSyscheckAgentResponse(rsp *http.Response) (*SyscheckControllerGetSyscheckAgentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SyscheckControllerGetSyscheckAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscheckResult `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSyscheckControllerGetLastScanAgentResponse parses an HTTP response from a SyscheckControllerGetLastScanAgentWithResponse call
func ParseSyscheckControllerGetLastScanAgentResponse(rsp *http.Response) (*SyscheckControllerGetLastScanAgentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SyscheckControllerGetLastScanAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscheckLastScan `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSyscollectorControllerGetHardwareInfoResponse parses an HTTP response from a SyscollectorControllerGetHardwareInfoWithResponse call
func ParseSyscollectorControllerGetHardwareInfoResponse(rsp *http.Response) (*SyscollectorControllerGetHardwareInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetHardwareInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorHardware `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSyscollectorControllerGetHotfixInfoResponse parses an HTTP response from a SyscollectorControllerGetHotfixInfoWithResponse call
func ParseSyscollectorControllerGetHotfixInfoResponse(rsp *http.Response) (*SyscollectorControllerGetHotfixInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetHotfixInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorHotfixes `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSyscollectorControllerGetNetworkAddressInfoResponse parses an HTTP response from a SyscollectorControllerGetNetworkAddressInfoWithResponse call
func ParseSyscollectorControllerGetNetworkAddressInfoResponse(rsp *http.Response) (*SyscollectorControllerGetNetworkAddressInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetNetworkAddressInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorNetwork `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSyscollectorControllerGetNetworkInterfaceInfoResponse parses an HTTP response from a SyscollectorControllerGetNetworkInterfaceInfoWithResponse call
func ParseSyscollectorControllerGetNetworkInterfaceInfoResponse(rsp *http.Response) (*SyscollectorControllerGetNetworkInterfaceInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetNetworkInterfaceInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorInterface `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSyscollectorControllerGetNetworkProtocolInfoResponse parses an HTTP response from a SyscollectorControllerGetNetworkProtocolInfoWithResponse call
func ParseSyscollectorControllerGetNetworkProtocolInfoResponse(rsp *http.Response) (*SyscollectorControllerGetNetworkProtocolInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetNetworkProtocolInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorProtocol `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSyscollectorControllerGetOsInfoResponse parses an HTTP response from a SyscollectorControllerGetOsInfoWithResponse call
func ParseSyscollectorControllerGetOsInfoResponse(rsp *http.Response) (*SyscollectorControllerGetOsInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetOsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorOS `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSyscollectorControllerGetPackagesInfoResponse parses an HTTP response from a SyscollectorControllerGetPackagesInfoWithResponse call
func ParseSyscollectorControllerGetPackagesInfoResponse(rsp *http.Response) (*SyscollectorControllerGetPackagesInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetPackagesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorPackages `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSyscollectorControllerGetPortsInfoResponse parses an HTTP response from a SyscollectorControllerGetPortsInfoWithResponse call
func ParseSyscollectorControllerGetPortsInfoResponse(rsp *http.Response) (*SyscollectorControllerGetPortsInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetPortsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorPorts `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSyscollectorControllerGetProcessesInfoResponse parses an HTTP response from a SyscollectorControllerGetProcessesInfoWithResponse call
func ParseSyscollectorControllerGetProcessesInfoResponse(rsp *http.Response) (*SyscollectorControllerGetProcessesInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SyscollectorControllerGetProcessesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ApiResponse)
			ApiResponse `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Data *AllItemsResponseSyscollectorProcesses `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}
